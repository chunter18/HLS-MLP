-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mvprod_layer_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    matrix_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    matrix_V_ce0 : OUT STD_LOGIC;
    matrix_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    result_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    result_V_ce0 : OUT STD_LOGIC;
    result_V_we0 : OUT STD_LOGIC;
    result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of mvprod_layer_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_191 : STD_LOGIC_VECTOR (8 downto 0) := "110010001";
    constant ap_const_lv14_2728 : STD_LOGIC_VECTOR (13 downto 0) := "10011100101000";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv14_191 : STD_LOGIC_VECTOR (13 downto 0) := "00000110010001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal exitcond_flatten_reg_339 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_339_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_5_reg_105 : STD_LOGIC_VECTOR (0 downto 0);
    signal n4_reg_119 : STD_LOGIC_VECTOR (8 downto 0);
    signal m2_reg_133 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten1_reg_147 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_s_reg_161 : STD_LOGIC_VECTOR (17 downto 0);
    signal n_mid2_fu_181_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_mid2_reg_305 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal n_mid2_reg_305_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal n_mid2_reg_305_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal m_mid2_fu_189_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_mid2_reg_313 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal m_mid2_reg_313_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal m_mid2_reg_313_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal m_mid2_reg_313_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal m_mid2_reg_313_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal m_mid2_reg_313_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal m_mid2_reg_313_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_fu_201_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_next_reg_324 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_fu_207_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_reg_329 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_339_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_339_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_339_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_339_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_339_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_288_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_reg_343 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_8_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_348_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_348_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_363 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_363_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_363_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_363_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_V_reg_377 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal rewind_ap_ready : STD_LOGIC;
    signal rewind_ap_ready_reg : STD_LOGIC := '0';
    signal rewind_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_phi_mux_tmp_5_phi_fu_109_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_n4_phi_fu_123_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_m2_phi_fu_137_p6 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten1_phi_fu_151_p6 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_acc_s_phi_fu_165_p6 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_13_cast_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_175_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_254_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_fu_261_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_296_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_288_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_288_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_288_ce : STD_LOGIC;
    signal grp_fu_296_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_288_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_288_p20 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_296_p20 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_condition_183 : BOOLEAN;

    component mlp_mac_muladd_5nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component mlp_mac_muladd_18cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (37 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;



begin
    mlp_mac_muladd_5nbkb_U3 : component mlp_mac_muladd_5nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 5,
        din1_WIDTH => 10,
        din2_WIDTH => 9,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_288_p0,
        din1 => grp_fu_288_p1,
        din2 => grp_fu_288_p2,
        ce => grp_fu_288_ce,
        dout => grp_fu_288_p3);

    mlp_mac_muladd_18cud_U4 : component mlp_mac_muladd_18cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 38,
        dout_WIDTH => 39)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => matrix_V_q0,
        din1 => input_V_q0,
        din2 => grp_fu_296_p2,
        ce => grp_fu_296_ce,
        dout => grp_fu_296_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= rewind_enable;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    rewind_ap_ready_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                rewind_ap_ready_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (ap_start = ap_const_logic_1))) then 
                    rewind_ap_ready_reg <= rewind_ap_ready;
                else 
                    rewind_ap_ready_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    acc_s_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (exitcond_flatten_reg_339_pp0_iter6_reg = ap_const_lv1_0))) then 
                acc_s_reg_161 <= acc_V_reg_377;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc_s_reg_161 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten1_reg_147 <= indvar_flatten_next_reg_324;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                indvar_flatten1_reg_147 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    m2_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                m2_reg_133 <= m_mid2_reg_313;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                m2_reg_133 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    n4_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                n4_reg_119 <= n_reg_329;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                n4_reg_119 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    tmp_5_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                tmp_5_reg_105 <= tmp_s_reg_334;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                tmp_5_reg_105 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                acc_V_reg_377 <= grp_fu_296_p3(37 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_339 <= exitcond_flatten_fu_219_p2;
                exitcond_flatten_reg_339_pp0_iter1_reg <= exitcond_flatten_reg_339;
                m_mid2_reg_313_pp0_iter1_reg <= m_mid2_reg_313;
                n_mid2_reg_305 <= n_mid2_fu_181_p3;
                n_mid2_reg_305_pp0_iter1_reg <= n_mid2_reg_305;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_reg_339_pp0_iter2_reg <= exitcond_flatten_reg_339_pp0_iter1_reg;
                exitcond_flatten_reg_339_pp0_iter3_reg <= exitcond_flatten_reg_339_pp0_iter2_reg;
                exitcond_flatten_reg_339_pp0_iter4_reg <= exitcond_flatten_reg_339_pp0_iter3_reg;
                exitcond_flatten_reg_339_pp0_iter5_reg <= exitcond_flatten_reg_339_pp0_iter4_reg;
                exitcond_flatten_reg_339_pp0_iter6_reg <= exitcond_flatten_reg_339_pp0_iter5_reg;
                m_mid2_reg_313_pp0_iter2_reg <= m_mid2_reg_313_pp0_iter1_reg;
                m_mid2_reg_313_pp0_iter3_reg <= m_mid2_reg_313_pp0_iter2_reg;
                m_mid2_reg_313_pp0_iter4_reg <= m_mid2_reg_313_pp0_iter3_reg;
                m_mid2_reg_313_pp0_iter5_reg <= m_mid2_reg_313_pp0_iter4_reg;
                m_mid2_reg_313_pp0_iter6_reg <= m_mid2_reg_313_pp0_iter5_reg;
                n_mid2_reg_305_pp0_iter2_reg <= n_mid2_reg_305_pp0_iter1_reg;
                tmp_15_reg_363 <= tmp_15_fu_241_p2;
                tmp_15_reg_363_pp0_iter4_reg <= tmp_15_reg_363;
                tmp_15_reg_363_pp0_iter5_reg <= tmp_15_reg_363_pp0_iter4_reg;
                tmp_15_reg_363_pp0_iter6_reg <= tmp_15_reg_363_pp0_iter5_reg;
                tmp_8_reg_348 <= tmp_8_fu_228_p2;
                tmp_8_reg_348_pp0_iter4_reg <= tmp_8_reg_348;
                tmp_8_reg_348_pp0_iter5_reg <= tmp_8_reg_348_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_324 <= indvar_flatten_next_fu_201_p2;
                m_mid2_reg_313 <= m_mid2_fu_189_p3;
                n_reg_329 <= n_fu_207_p2;
                tmp_s_reg_334 <= tmp_s_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                tmp_13_reg_343 <= grp_fu_288_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_183_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_183 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_11001, exitcond_flatten_reg_339_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= rewind_enable;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_acc_s_phi_fu_165_p6_assign_proc : process(acc_s_reg_161, exitcond_flatten_reg_339_pp0_iter6_reg, acc_V_reg_377, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((exitcond_flatten_reg_339_pp0_iter6_reg = ap_const_lv1_1)) then 
                ap_phi_mux_acc_s_phi_fu_165_p6 <= ap_const_lv18_0;
            elsif ((exitcond_flatten_reg_339_pp0_iter6_reg = ap_const_lv1_0)) then 
                ap_phi_mux_acc_s_phi_fu_165_p6 <= acc_V_reg_377;
            else 
                ap_phi_mux_acc_s_phi_fu_165_p6 <= acc_s_reg_161;
            end if;
        else 
            ap_phi_mux_acc_s_phi_fu_165_p6 <= acc_s_reg_161;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten1_phi_fu_151_p6_assign_proc : process(exitcond_flatten_reg_339, indvar_flatten1_reg_147, indvar_flatten_next_reg_324, ap_condition_183)
    begin
        if ((ap_const_boolean_1 = ap_condition_183)) then
            if ((exitcond_flatten_reg_339 = ap_const_lv1_1)) then 
                ap_phi_mux_indvar_flatten1_phi_fu_151_p6 <= ap_const_lv14_0;
            elsif ((exitcond_flatten_reg_339 = ap_const_lv1_0)) then 
                ap_phi_mux_indvar_flatten1_phi_fu_151_p6 <= indvar_flatten_next_reg_324;
            else 
                ap_phi_mux_indvar_flatten1_phi_fu_151_p6 <= indvar_flatten1_reg_147;
            end if;
        else 
            ap_phi_mux_indvar_flatten1_phi_fu_151_p6 <= indvar_flatten1_reg_147;
        end if; 
    end process;


    ap_phi_mux_m2_phi_fu_137_p6_assign_proc : process(exitcond_flatten_reg_339, m2_reg_133, m_mid2_reg_313, ap_condition_183)
    begin
        if ((ap_const_boolean_1 = ap_condition_183)) then
            if ((exitcond_flatten_reg_339 = ap_const_lv1_1)) then 
                ap_phi_mux_m2_phi_fu_137_p6 <= ap_const_lv5_0;
            elsif ((exitcond_flatten_reg_339 = ap_const_lv1_0)) then 
                ap_phi_mux_m2_phi_fu_137_p6 <= m_mid2_reg_313;
            else 
                ap_phi_mux_m2_phi_fu_137_p6 <= m2_reg_133;
            end if;
        else 
            ap_phi_mux_m2_phi_fu_137_p6 <= m2_reg_133;
        end if; 
    end process;


    ap_phi_mux_n4_phi_fu_123_p6_assign_proc : process(exitcond_flatten_reg_339, n4_reg_119, n_reg_329, ap_condition_183)
    begin
        if ((ap_const_boolean_1 = ap_condition_183)) then
            if ((exitcond_flatten_reg_339 = ap_const_lv1_1)) then 
                ap_phi_mux_n4_phi_fu_123_p6 <= ap_const_lv9_0;
            elsif ((exitcond_flatten_reg_339 = ap_const_lv1_0)) then 
                ap_phi_mux_n4_phi_fu_123_p6 <= n_reg_329;
            else 
                ap_phi_mux_n4_phi_fu_123_p6 <= n4_reg_119;
            end if;
        else 
            ap_phi_mux_n4_phi_fu_123_p6 <= n4_reg_119;
        end if; 
    end process;


    ap_phi_mux_tmp_5_phi_fu_109_p6_assign_proc : process(exitcond_flatten_reg_339, tmp_5_reg_105, tmp_s_reg_334, ap_condition_183)
    begin
        if ((ap_const_boolean_1 = ap_condition_183)) then
            if ((exitcond_flatten_reg_339 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_5_phi_fu_109_p6 <= ap_const_lv1_0;
            elsif ((exitcond_flatten_reg_339 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_5_phi_fu_109_p6 <= tmp_s_reg_334;
            else 
                ap_phi_mux_tmp_5_phi_fu_109_p6 <= tmp_5_reg_105;
            end if;
        else 
            ap_phi_mux_tmp_5_phi_fu_109_p6 <= tmp_5_reg_105;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_219_p2 <= "1" when (ap_phi_mux_indvar_flatten1_phi_fu_151_p6 = ap_const_lv14_2728) else "0";

    grp_fu_288_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_288_ce <= ap_const_logic_1;
        else 
            grp_fu_288_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_288_p0 <= grp_fu_288_p00(5 - 1 downto 0);
    grp_fu_288_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_mid2_fu_189_p3),14));
    grp_fu_288_p1 <= ap_const_lv14_191(10 - 1 downto 0);
    grp_fu_288_p2 <= grp_fu_288_p20(9 - 1 downto 0);
    grp_fu_288_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_mid2_reg_305_pp0_iter1_reg),14));

    grp_fu_296_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_296_ce <= ap_const_logic_1;
        else 
            grp_fu_296_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_296_p2 <= grp_fu_296_p20(38 - 1 downto 0);
    grp_fu_296_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_261_p3),39));
    indvar_flatten_next_fu_201_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten1_phi_fu_151_p6) + unsigned(ap_const_lv14_1));
    input_V_address0 <= tmp_9_fu_233_p1(9 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(exitcond_flatten_reg_339_pp0_iter3_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_339_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_175_p2 <= std_logic_vector(unsigned(ap_phi_mux_m2_phi_fu_137_p6) + unsigned(ap_const_lv5_1));
    m_mid2_fu_189_p3 <= 
        m_fu_175_p2 when (ap_phi_mux_tmp_5_phi_fu_109_p6(0) = '1') else 
        ap_phi_mux_m2_phi_fu_137_p6;
    matrix_V_address0 <= tmp_13_cast_fu_237_p1(14 - 1 downto 0);

    matrix_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            matrix_V_ce0 <= ap_const_logic_1;
        else 
            matrix_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    n_fu_207_p2 <= std_logic_vector(unsigned(n_mid2_fu_181_p3) + unsigned(ap_const_lv9_1));
    n_mid2_fu_181_p3 <= 
        ap_const_lv9_0 when (ap_phi_mux_tmp_5_phi_fu_109_p6(0) = '1') else 
        ap_phi_mux_n4_phi_fu_123_p6;
    result_V_address0 <= tmp_10_fu_282_p1(5 - 1 downto 0);

    result_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            result_V_ce0 <= ap_const_logic_1;
        else 
            result_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_V_d0 <= acc_V_reg_377;

    result_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_15_reg_363_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_15_reg_363_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            result_V_we0 <= ap_const_logic_1;
        else 
            result_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rewind_ap_ready_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_219_p2, rewind_ap_ready_reg)
    begin
        if (((rewind_ap_ready_reg = ap_const_logic_1) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_219_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            rewind_ap_ready <= ap_const_logic_1;
        else 
            rewind_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    rewind_enable_assign_proc : process(ap_start, rewind_ap_ready_reg)
    begin
        if (((rewind_ap_ready_reg = ap_const_logic_0) and (ap_start = ap_const_logic_1))) then 
            rewind_enable <= ap_const_logic_1;
        else 
            rewind_enable <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_mid2_reg_313_pp0_iter6_reg),64));
    tmp_11_fu_261_p3 <= (tmp_14_fu_254_p3 & ap_const_lv20_0);
    tmp_13_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_343),64));
    tmp_14_fu_254_p3 <= 
        ap_const_lv18_0 when (tmp_8_reg_348_pp0_iter5_reg(0) = '1') else 
        ap_phi_mux_acc_s_phi_fu_165_p6;
    tmp_15_fu_241_p2 <= "1" when (n_mid2_reg_305_pp0_iter2_reg = ap_const_lv9_190) else "0";
    tmp_8_fu_228_p2 <= "1" when (n_mid2_reg_305_pp0_iter2_reg = ap_const_lv9_0) else "0";
    tmp_9_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_mid2_reg_305_pp0_iter2_reg),64));
    tmp_s_fu_213_p2 <= "1" when (n_fu_207_p2 = ap_const_lv9_191) else "0";
end behav;
