-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    weights_L1_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    weights_L1_V_ce0 : OUT STD_LOGIC;
    weights_L1_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    weights_L1_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    weights_L1_V_we0 : OUT STD_LOGIC;
    weights_L1_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    weights_L1_V_ce1 : OUT STD_LOGIC;
    weights_L1_V_d1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    weights_L1_V_q1 : IN STD_LOGIC_VECTOR (17 downto 0);
    weights_L1_V_we1 : OUT STD_LOGIC;
    weights_L2_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_L2_V_ce0 : OUT STD_LOGIC;
    weights_L2_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    weights_L2_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    weights_L2_V_we0 : OUT STD_LOGIC;
    weights_L2_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_L2_V_ce1 : OUT STD_LOGIC;
    weights_L2_V_d1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    weights_L2_V_q1 : IN STD_LOGIC_VECTOR (17 downto 0);
    weights_L2_V_we1 : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_V_we0 : OUT STD_LOGIC;
    input_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_V_ce1 : OUT STD_LOGIC;
    input_V_d1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    input_V_q1 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_V_we1 : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of mlp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mlp,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325tffg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.286000,HLS_SYN_LAT=11860,HLS_SYN_TPT=10025,HLS_SYN_MEM=1,HLS_SYN_DSP=6,HLS_SYN_FF=1594,HLS_SYN_LUT=2087,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal bias_added_V_i_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal bias_added_V_t_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L1_no_activ_V_i_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L1_no_activ_V_t_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L1_activ_V_i_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L1_activ_V_t_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L2_bias_added_V_i_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L2_bias_added_V_t_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L2_out_V_i_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L2_out_V_t_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L2_out_activ_V_i_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L2_out_activ_V_t_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_bias_pre_L1_U0_ap_start : STD_LOGIC;
    signal add_bias_pre_L1_U0_ap_done : STD_LOGIC;
    signal add_bias_pre_L1_U0_ap_continue : STD_LOGIC;
    signal add_bias_pre_L1_U0_ap_idle : STD_LOGIC;
    signal add_bias_pre_L1_U0_ap_ready : STD_LOGIC;
    signal add_bias_pre_L1_U0_input_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_bias_pre_L1_U0_input_V_ce0 : STD_LOGIC;
    signal add_bias_pre_L1_U0_result_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_bias_pre_L1_U0_result_V_ce0 : STD_LOGIC;
    signal add_bias_pre_L1_U0_result_V_we0 : STD_LOGIC;
    signal add_bias_pre_L1_U0_result_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_channel_done_bias_added_V : STD_LOGIC;
    signal add_bias_pre_L1_U0_result_V_full_n : STD_LOGIC;
    signal mvprod_layer_1_U0_ap_start : STD_LOGIC;
    signal mvprod_layer_1_U0_ap_done : STD_LOGIC;
    signal mvprod_layer_1_U0_ap_continue : STD_LOGIC;
    signal mvprod_layer_1_U0_ap_idle : STD_LOGIC;
    signal mvprod_layer_1_U0_ap_ready : STD_LOGIC;
    signal mvprod_layer_1_U0_matrix_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mvprod_layer_1_U0_matrix_V_ce0 : STD_LOGIC;
    signal mvprod_layer_1_U0_input_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mvprod_layer_1_U0_input_V_ce0 : STD_LOGIC;
    signal mvprod_layer_1_U0_result_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mvprod_layer_1_U0_result_V_ce0 : STD_LOGIC;
    signal mvprod_layer_1_U0_result_V_we0 : STD_LOGIC;
    signal mvprod_layer_1_U0_result_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_channel_done_L1_no_activ_V : STD_LOGIC;
    signal mvprod_layer_1_U0_result_V_full_n : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_ap_start : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_ap_done : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_ap_continue : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_ap_idle : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_ap_ready : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_input_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sigmoid_activation_L_1_U0_input_V_ce0 : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_result_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sigmoid_activation_L_1_U0_result_V_ce0 : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_result_V_we0 : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_result_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_channel_done_L1_activ_V : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_result_V_full_n : STD_LOGIC;
    signal add_bias_pre_L2_U0_ap_start : STD_LOGIC;
    signal add_bias_pre_L2_U0_ap_done : STD_LOGIC;
    signal add_bias_pre_L2_U0_ap_continue : STD_LOGIC;
    signal add_bias_pre_L2_U0_ap_idle : STD_LOGIC;
    signal add_bias_pre_L2_U0_ap_ready : STD_LOGIC;
    signal add_bias_pre_L2_U0_input_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_bias_pre_L2_U0_input_V_ce0 : STD_LOGIC;
    signal add_bias_pre_L2_U0_result_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_bias_pre_L2_U0_result_V_ce0 : STD_LOGIC;
    signal add_bias_pre_L2_U0_result_V_we0 : STD_LOGIC;
    signal add_bias_pre_L2_U0_result_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_channel_done_L2_bias_added_V : STD_LOGIC;
    signal add_bias_pre_L2_U0_result_V_full_n : STD_LOGIC;
    signal mvprod_layer_2_U0_ap_start : STD_LOGIC;
    signal mvprod_layer_2_U0_ap_done : STD_LOGIC;
    signal mvprod_layer_2_U0_ap_continue : STD_LOGIC;
    signal mvprod_layer_2_U0_ap_idle : STD_LOGIC;
    signal mvprod_layer_2_U0_ap_ready : STD_LOGIC;
    signal mvprod_layer_2_U0_matrix_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mvprod_layer_2_U0_matrix_V_ce0 : STD_LOGIC;
    signal mvprod_layer_2_U0_input_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mvprod_layer_2_U0_input_V_ce0 : STD_LOGIC;
    signal mvprod_layer_2_U0_result_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mvprod_layer_2_U0_result_V_ce0 : STD_LOGIC;
    signal mvprod_layer_2_U0_result_V_we0 : STD_LOGIC;
    signal mvprod_layer_2_U0_result_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_channel_done_L2_out_V : STD_LOGIC;
    signal mvprod_layer_2_U0_result_V_full_n : STD_LOGIC;
    signal sigmoid_activation_L_U0_ap_start : STD_LOGIC;
    signal sigmoid_activation_L_U0_ap_done : STD_LOGIC;
    signal sigmoid_activation_L_U0_ap_continue : STD_LOGIC;
    signal sigmoid_activation_L_U0_ap_idle : STD_LOGIC;
    signal sigmoid_activation_L_U0_ap_ready : STD_LOGIC;
    signal sigmoid_activation_L_U0_input_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sigmoid_activation_L_U0_input_V_ce0 : STD_LOGIC;
    signal sigmoid_activation_L_U0_result_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sigmoid_activation_L_U0_result_V_ce0 : STD_LOGIC;
    signal sigmoid_activation_L_U0_result_V_we0 : STD_LOGIC;
    signal sigmoid_activation_L_U0_result_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_channel_done_L2_out_activ_V : STD_LOGIC;
    signal sigmoid_activation_L_U0_result_V_full_n : STD_LOGIC;
    signal classify_U0_ap_start : STD_LOGIC;
    signal classify_U0_ap_done : STD_LOGIC;
    signal classify_U0_ap_continue : STD_LOGIC;
    signal classify_U0_ap_idle : STD_LOGIC;
    signal classify_U0_ap_ready : STD_LOGIC;
    signal classify_U0_activated_L2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal classify_U0_activated_L2_V_ce0 : STD_LOGIC;
    signal classify_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_digit : STD_LOGIC;
    signal digit_full_n : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_start : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_done : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_continue : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_idle : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_ready : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_digit_load_loc_chann : STD_LOGIC;
    signal digit_load_loc_chann_full_n : STD_LOGIC;
    signal p_src_mlp_cpp_lin_U0_ap_start : STD_LOGIC;
    signal p_src_mlp_cpp_lin_U0_ap_done : STD_LOGIC;
    signal p_src_mlp_cpp_lin_U0_ap_continue : STD_LOGIC;
    signal p_src_mlp_cpp_lin_U0_ap_idle : STD_LOGIC;
    signal p_src_mlp_cpp_lin_U0_ap_ready : STD_LOGIC;
    signal p_src_mlp_cpp_lin_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_p_src_mlp_cpp_lin_fu_117_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal bias_added_V_i_full_n : STD_LOGIC;
    signal bias_added_V_t_empty_n : STD_LOGIC;
    signal L1_no_activ_V_i_full_n : STD_LOGIC;
    signal L1_no_activ_V_t_empty_n : STD_LOGIC;
    signal L1_activ_V_i_full_n : STD_LOGIC;
    signal L1_activ_V_t_empty_n : STD_LOGIC;
    signal L2_bias_added_V_i_full_n : STD_LOGIC;
    signal L2_bias_added_V_t_empty_n : STD_LOGIC;
    signal L2_out_V_i_full_n : STD_LOGIC;
    signal L2_out_V_t_empty_n : STD_LOGIC;
    signal L2_out_activ_V_i_full_n : STD_LOGIC;
    signal L2_out_activ_V_t_empty_n : STD_LOGIC;
    signal digit_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal digit_empty_n : STD_LOGIC;
    signal digit_load_loc_chann_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal digit_load_loc_chann_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_mvprod_layer_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_mvprod_layer_1_U0_ap_ready : STD_LOGIC;
    signal mvprod_layer_1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_mvprod_layer_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_mvprod_layer_2_U0_ap_ready : STD_LOGIC;
    signal mvprod_layer_2_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_add_bias_pre_L1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_add_bias_pre_L1_U0_ap_ready : STD_LOGIC;
    signal add_bias_pre_L1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_bias_pre_L1_U0_start_full_n : STD_LOGIC;
    signal add_bias_pre_L1_U0_start_write : STD_LOGIC;
    signal mvprod_layer_1_U0_start_full_n : STD_LOGIC;
    signal mvprod_layer_1_U0_start_write : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_start_full_n : STD_LOGIC;
    signal sigmoid_activation_L_1_U0_start_write : STD_LOGIC;
    signal add_bias_pre_L2_U0_start_full_n : STD_LOGIC;
    signal add_bias_pre_L2_U0_start_write : STD_LOGIC;
    signal mvprod_layer_2_U0_start_full_n : STD_LOGIC;
    signal mvprod_layer_2_U0_start_write : STD_LOGIC;
    signal sigmoid_activation_L_U0_start_full_n : STD_LOGIC;
    signal sigmoid_activation_L_U0_start_write : STD_LOGIC;
    signal classify_U0_start_full_n : STD_LOGIC;
    signal classify_U0_start_write : STD_LOGIC;
    signal Block_arrayctor_loop_U0_start_full_n : STD_LOGIC;
    signal Block_arrayctor_loop_U0_start_write : STD_LOGIC;
    signal p_src_mlp_cpp_lin_U0_start_full_n : STD_LOGIC;
    signal p_src_mlp_cpp_lin_U0_start_write : STD_LOGIC;

    component add_bias_pre_L1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        result_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        result_V_ce0 : OUT STD_LOGIC;
        result_V_we0 : OUT STD_LOGIC;
        result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component mvprod_layer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        matrix_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        matrix_V_ce0 : OUT STD_LOGIC;
        matrix_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        result_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        result_V_ce0 : OUT STD_LOGIC;
        result_V_we0 : OUT STD_LOGIC;
        result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component sigmoid_activation_L_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        result_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        result_V_ce0 : OUT STD_LOGIC;
        result_V_we0 : OUT STD_LOGIC;
        result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component add_bias_pre_L2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        result_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        result_V_ce0 : OUT STD_LOGIC;
        result_V_we0 : OUT STD_LOGIC;
        result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component mvprod_layer_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        matrix_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        matrix_V_ce0 : OUT STD_LOGIC;
        matrix_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        result_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_V_ce0 : OUT STD_LOGIC;
        result_V_we0 : OUT STD_LOGIC;
        result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component sigmoid_activation_L IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        result_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_V_ce0 : OUT STD_LOGIC;
        result_V_we0 : OUT STD_LOGIC;
        result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component classify IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        activated_L2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        activated_L2_V_ce0 : OUT STD_LOGIC;
        activated_L2_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Block_arrayctor_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component p_src_mlp_cpp_lin IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_bias_added_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component mlp_L1_no_activ_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component mlp_L2_bias_added_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component mlp_L2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    bias_added_V_U : component mlp_bias_added_V
    generic map (
        DataWidth => 18,
        AddressRange => 401,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => add_bias_pre_L1_U0_result_V_address0,
        i_ce0 => add_bias_pre_L1_U0_result_V_ce0,
        i_we0 => add_bias_pre_L1_U0_result_V_we0,
        i_d0 => add_bias_pre_L1_U0_result_V_d0,
        i_q0 => bias_added_V_i_q0,
        t_address0 => mvprod_layer_1_U0_input_V_address0,
        t_ce0 => mvprod_layer_1_U0_input_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv18_0,
        t_q0 => bias_added_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => bias_added_V_i_full_n,
        i_write => add_bias_pre_L1_U0_ap_done,
        t_empty_n => bias_added_V_t_empty_n,
        t_read => mvprod_layer_1_U0_ap_ready);

    L1_no_activ_V_U : component mlp_L1_no_activ_V
    generic map (
        DataWidth => 18,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => mvprod_layer_1_U0_result_V_address0,
        i_ce0 => mvprod_layer_1_U0_result_V_ce0,
        i_we0 => mvprod_layer_1_U0_result_V_we0,
        i_d0 => mvprod_layer_1_U0_result_V_d0,
        i_q0 => L1_no_activ_V_i_q0,
        t_address0 => sigmoid_activation_L_1_U0_input_V_address0,
        t_ce0 => sigmoid_activation_L_1_U0_input_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv18_0,
        t_q0 => L1_no_activ_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => L1_no_activ_V_i_full_n,
        i_write => mvprod_layer_1_U0_ap_done,
        t_empty_n => L1_no_activ_V_t_empty_n,
        t_read => sigmoid_activation_L_1_U0_ap_ready);

    L1_activ_V_U : component mlp_L1_no_activ_V
    generic map (
        DataWidth => 18,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => sigmoid_activation_L_1_U0_result_V_address0,
        i_ce0 => sigmoid_activation_L_1_U0_result_V_ce0,
        i_we0 => sigmoid_activation_L_1_U0_result_V_we0,
        i_d0 => sigmoid_activation_L_1_U0_result_V_d0,
        i_q0 => L1_activ_V_i_q0,
        t_address0 => add_bias_pre_L2_U0_input_V_address0,
        t_ce0 => add_bias_pre_L2_U0_input_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv18_0,
        t_q0 => L1_activ_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => L1_activ_V_i_full_n,
        i_write => sigmoid_activation_L_1_U0_ap_done,
        t_empty_n => L1_activ_V_t_empty_n,
        t_read => add_bias_pre_L2_U0_ap_ready);

    L2_bias_added_V_U : component mlp_L2_bias_added_V
    generic map (
        DataWidth => 18,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => add_bias_pre_L2_U0_result_V_address0,
        i_ce0 => add_bias_pre_L2_U0_result_V_ce0,
        i_we0 => add_bias_pre_L2_U0_result_V_we0,
        i_d0 => add_bias_pre_L2_U0_result_V_d0,
        i_q0 => L2_bias_added_V_i_q0,
        t_address0 => mvprod_layer_2_U0_input_V_address0,
        t_ce0 => mvprod_layer_2_U0_input_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv18_0,
        t_q0 => L2_bias_added_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => L2_bias_added_V_i_full_n,
        i_write => add_bias_pre_L2_U0_ap_done,
        t_empty_n => L2_bias_added_V_t_empty_n,
        t_read => mvprod_layer_2_U0_ap_ready);

    L2_out_V_U : component mlp_L2_out_V
    generic map (
        DataWidth => 18,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => mvprod_layer_2_U0_result_V_address0,
        i_ce0 => mvprod_layer_2_U0_result_V_ce0,
        i_we0 => mvprod_layer_2_U0_result_V_we0,
        i_d0 => mvprod_layer_2_U0_result_V_d0,
        i_q0 => L2_out_V_i_q0,
        t_address0 => sigmoid_activation_L_U0_input_V_address0,
        t_ce0 => sigmoid_activation_L_U0_input_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv18_0,
        t_q0 => L2_out_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => L2_out_V_i_full_n,
        i_write => mvprod_layer_2_U0_ap_done,
        t_empty_n => L2_out_V_t_empty_n,
        t_read => sigmoid_activation_L_U0_ap_ready);

    L2_out_activ_V_U : component mlp_L2_out_V
    generic map (
        DataWidth => 18,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => sigmoid_activation_L_U0_result_V_address0,
        i_ce0 => sigmoid_activation_L_U0_result_V_ce0,
        i_we0 => sigmoid_activation_L_U0_result_V_we0,
        i_d0 => sigmoid_activation_L_U0_result_V_d0,
        i_q0 => L2_out_activ_V_i_q0,
        t_address0 => classify_U0_activated_L2_V_address0,
        t_ce0 => classify_U0_activated_L2_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv18_0,
        t_q0 => L2_out_activ_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => L2_out_activ_V_i_full_n,
        i_write => sigmoid_activation_L_U0_ap_done,
        t_empty_n => L2_out_activ_V_t_empty_n,
        t_read => classify_U0_ap_ready);

    add_bias_pre_L1_U0 : component add_bias_pre_L1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => add_bias_pre_L1_U0_ap_start,
        ap_done => add_bias_pre_L1_U0_ap_done,
        ap_continue => add_bias_pre_L1_U0_ap_continue,
        ap_idle => add_bias_pre_L1_U0_ap_idle,
        ap_ready => add_bias_pre_L1_U0_ap_ready,
        input_V_address0 => add_bias_pre_L1_U0_input_V_address0,
        input_V_ce0 => add_bias_pre_L1_U0_input_V_ce0,
        input_V_q0 => input_V_q0,
        result_V_address0 => add_bias_pre_L1_U0_result_V_address0,
        result_V_ce0 => add_bias_pre_L1_U0_result_V_ce0,
        result_V_we0 => add_bias_pre_L1_U0_result_V_we0,
        result_V_d0 => add_bias_pre_L1_U0_result_V_d0);

    mvprod_layer_1_U0 : component mvprod_layer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => mvprod_layer_1_U0_ap_start,
        ap_done => mvprod_layer_1_U0_ap_done,
        ap_continue => mvprod_layer_1_U0_ap_continue,
        ap_idle => mvprod_layer_1_U0_ap_idle,
        ap_ready => mvprod_layer_1_U0_ap_ready,
        matrix_V_address0 => mvprod_layer_1_U0_matrix_V_address0,
        matrix_V_ce0 => mvprod_layer_1_U0_matrix_V_ce0,
        matrix_V_q0 => weights_L1_V_q0,
        input_V_address0 => mvprod_layer_1_U0_input_V_address0,
        input_V_ce0 => mvprod_layer_1_U0_input_V_ce0,
        input_V_q0 => bias_added_V_t_q0,
        result_V_address0 => mvprod_layer_1_U0_result_V_address0,
        result_V_ce0 => mvprod_layer_1_U0_result_V_ce0,
        result_V_we0 => mvprod_layer_1_U0_result_V_we0,
        result_V_d0 => mvprod_layer_1_U0_result_V_d0);

    sigmoid_activation_L_1_U0 : component sigmoid_activation_L_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => sigmoid_activation_L_1_U0_ap_start,
        ap_done => sigmoid_activation_L_1_U0_ap_done,
        ap_continue => sigmoid_activation_L_1_U0_ap_continue,
        ap_idle => sigmoid_activation_L_1_U0_ap_idle,
        ap_ready => sigmoid_activation_L_1_U0_ap_ready,
        input_V_address0 => sigmoid_activation_L_1_U0_input_V_address0,
        input_V_ce0 => sigmoid_activation_L_1_U0_input_V_ce0,
        input_V_q0 => L1_no_activ_V_t_q0,
        result_V_address0 => sigmoid_activation_L_1_U0_result_V_address0,
        result_V_ce0 => sigmoid_activation_L_1_U0_result_V_ce0,
        result_V_we0 => sigmoid_activation_L_1_U0_result_V_we0,
        result_V_d0 => sigmoid_activation_L_1_U0_result_V_d0);

    add_bias_pre_L2_U0 : component add_bias_pre_L2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => add_bias_pre_L2_U0_ap_start,
        ap_done => add_bias_pre_L2_U0_ap_done,
        ap_continue => add_bias_pre_L2_U0_ap_continue,
        ap_idle => add_bias_pre_L2_U0_ap_idle,
        ap_ready => add_bias_pre_L2_U0_ap_ready,
        input_V_address0 => add_bias_pre_L2_U0_input_V_address0,
        input_V_ce0 => add_bias_pre_L2_U0_input_V_ce0,
        input_V_q0 => L1_activ_V_t_q0,
        result_V_address0 => add_bias_pre_L2_U0_result_V_address0,
        result_V_ce0 => add_bias_pre_L2_U0_result_V_ce0,
        result_V_we0 => add_bias_pre_L2_U0_result_V_we0,
        result_V_d0 => add_bias_pre_L2_U0_result_V_d0);

    mvprod_layer_2_U0 : component mvprod_layer_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => mvprod_layer_2_U0_ap_start,
        ap_done => mvprod_layer_2_U0_ap_done,
        ap_continue => mvprod_layer_2_U0_ap_continue,
        ap_idle => mvprod_layer_2_U0_ap_idle,
        ap_ready => mvprod_layer_2_U0_ap_ready,
        matrix_V_address0 => mvprod_layer_2_U0_matrix_V_address0,
        matrix_V_ce0 => mvprod_layer_2_U0_matrix_V_ce0,
        matrix_V_q0 => weights_L2_V_q0,
        input_V_address0 => mvprod_layer_2_U0_input_V_address0,
        input_V_ce0 => mvprod_layer_2_U0_input_V_ce0,
        input_V_q0 => L2_bias_added_V_t_q0,
        result_V_address0 => mvprod_layer_2_U0_result_V_address0,
        result_V_ce0 => mvprod_layer_2_U0_result_V_ce0,
        result_V_we0 => mvprod_layer_2_U0_result_V_we0,
        result_V_d0 => mvprod_layer_2_U0_result_V_d0);

    sigmoid_activation_L_U0 : component sigmoid_activation_L
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => sigmoid_activation_L_U0_ap_start,
        ap_done => sigmoid_activation_L_U0_ap_done,
        ap_continue => sigmoid_activation_L_U0_ap_continue,
        ap_idle => sigmoid_activation_L_U0_ap_idle,
        ap_ready => sigmoid_activation_L_U0_ap_ready,
        input_V_address0 => sigmoid_activation_L_U0_input_V_address0,
        input_V_ce0 => sigmoid_activation_L_U0_input_V_ce0,
        input_V_q0 => L2_out_V_t_q0,
        result_V_address0 => sigmoid_activation_L_U0_result_V_address0,
        result_V_ce0 => sigmoid_activation_L_U0_result_V_ce0,
        result_V_we0 => sigmoid_activation_L_U0_result_V_we0,
        result_V_d0 => sigmoid_activation_L_U0_result_V_d0);

    classify_U0 : component classify
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => classify_U0_ap_start,
        ap_done => classify_U0_ap_done,
        ap_continue => classify_U0_ap_continue,
        ap_idle => classify_U0_ap_idle,
        ap_ready => classify_U0_ap_ready,
        activated_L2_V_address0 => classify_U0_activated_L2_V_address0,
        activated_L2_V_ce0 => classify_U0_activated_L2_V_ce0,
        activated_L2_V_q0 => L2_out_activ_V_t_q0,
        ap_return => classify_U0_ap_return);

    Block_arrayctor_loop_U0 : component Block_arrayctor_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_arrayctor_loop_U0_ap_start,
        ap_done => Block_arrayctor_loop_U0_ap_done,
        ap_continue => Block_arrayctor_loop_U0_ap_continue,
        ap_idle => Block_arrayctor_loop_U0_ap_idle,
        ap_ready => Block_arrayctor_loop_U0_ap_ready,
        p_read => digit_dout,
        ap_return => Block_arrayctor_loop_U0_ap_return);

    p_src_mlp_cpp_lin_U0 : component p_src_mlp_cpp_lin
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => p_src_mlp_cpp_lin_U0_ap_start,
        ap_done => p_src_mlp_cpp_lin_U0_ap_done,
        ap_continue => p_src_mlp_cpp_lin_U0_ap_continue,
        ap_idle => p_src_mlp_cpp_lin_U0_ap_idle,
        ap_ready => p_src_mlp_cpp_lin_U0_ap_ready,
        p_read => digit_load_loc_chann_dout,
        ap_return => p_src_mlp_cpp_lin_U0_ap_return);

    digit_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => classify_U0_ap_return,
        if_full_n => digit_full_n,
        if_write => classify_U0_ap_done,
        if_dout => digit_dout,
        if_empty_n => digit_empty_n,
        if_read => Block_arrayctor_loop_U0_ap_ready);

    digit_load_loc_chann_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_arrayctor_loop_U0_ap_return,
        if_full_n => digit_load_loc_chann_full_n,
        if_write => Block_arrayctor_loop_U0_ap_done,
        if_dout => digit_load_loc_chann_dout,
        if_empty_n => digit_load_loc_chann_empty_n,
        if_read => p_src_mlp_cpp_lin_U0_ap_ready);





    ap_sync_reg_add_bias_pre_L1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_add_bias_pre_L1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_add_bias_pre_L1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_add_bias_pre_L1_U0_ap_ready <= ap_sync_add_bias_pre_L1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_mvprod_layer_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_mvprod_layer_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_mvprod_layer_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_mvprod_layer_1_U0_ap_ready <= ap_sync_mvprod_layer_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_mvprod_layer_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_mvprod_layer_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_mvprod_layer_2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_mvprod_layer_2_U0_ap_ready <= ap_sync_mvprod_layer_2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    add_bias_pre_L1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = add_bias_pre_L1_U0_ap_ready))) then 
                add_bias_pre_L1_U0_ap_ready_count <= std_logic_vector(unsigned(add_bias_pre_L1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = add_bias_pre_L1_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                add_bias_pre_L1_U0_ap_ready_count <= std_logic_vector(unsigned(add_bias_pre_L1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    mvprod_layer_1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (mvprod_layer_1_U0_ap_ready = ap_const_logic_0))) then 
                mvprod_layer_1_U0_ap_ready_count <= std_logic_vector(unsigned(mvprod_layer_1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((mvprod_layer_1_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                mvprod_layer_1_U0_ap_ready_count <= std_logic_vector(unsigned(mvprod_layer_1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    mvprod_layer_2_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (mvprod_layer_2_U0_ap_ready = ap_const_logic_0))) then 
                mvprod_layer_2_U0_ap_ready_count <= std_logic_vector(unsigned(mvprod_layer_2_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((mvprod_layer_2_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                mvprod_layer_2_U0_ap_ready_count <= std_logic_vector(unsigned(mvprod_layer_2_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_arrayctor_loop_U0_ap_continue <= digit_load_loc_chann_full_n;
    Block_arrayctor_loop_U0_ap_start <= digit_empty_n;
    Block_arrayctor_loop_U0_start_full_n <= ap_const_logic_1;
    Block_arrayctor_loop_U0_start_write <= ap_const_logic_0;
    add_bias_pre_L1_U0_ap_continue <= bias_added_V_i_full_n;
    add_bias_pre_L1_U0_ap_start <= ((ap_sync_reg_add_bias_pre_L1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    add_bias_pre_L1_U0_result_V_full_n <= bias_added_V_i_full_n;
    add_bias_pre_L1_U0_start_full_n <= ap_const_logic_1;
    add_bias_pre_L1_U0_start_write <= ap_const_logic_0;
    add_bias_pre_L2_U0_ap_continue <= L2_bias_added_V_i_full_n;
    add_bias_pre_L2_U0_ap_start <= L1_activ_V_t_empty_n;
    add_bias_pre_L2_U0_result_V_full_n <= L2_bias_added_V_i_full_n;
    add_bias_pre_L2_U0_start_full_n <= ap_const_logic_1;
    add_bias_pre_L2_U0_start_write <= ap_const_logic_0;
    ap_channel_done_L1_activ_V <= sigmoid_activation_L_1_U0_ap_done;
    ap_channel_done_L1_no_activ_V <= mvprod_layer_1_U0_ap_done;
    ap_channel_done_L2_bias_added_V <= add_bias_pre_L2_U0_ap_done;
    ap_channel_done_L2_out_V <= mvprod_layer_2_U0_ap_done;
    ap_channel_done_L2_out_activ_V <= sigmoid_activation_L_U0_ap_done;
    ap_channel_done_bias_added_V <= add_bias_pre_L1_U0_ap_done;
    ap_channel_done_digit <= classify_U0_ap_done;
    ap_channel_done_digit_load_loc_chann <= Block_arrayctor_loop_U0_ap_done;
    ap_done <= p_src_mlp_cpp_lin_U0_ap_done;
    ap_idle <= (sigmoid_activation_L_U0_ap_idle and sigmoid_activation_L_1_U0_ap_idle and p_src_mlp_cpp_lin_U0_ap_idle and mvprod_layer_2_U0_ap_idle and mvprod_layer_1_U0_ap_idle and (digit_load_loc_chann_empty_n xor ap_const_logic_1) and (digit_empty_n xor ap_const_logic_1) and (ap_const_logic_1 xor L2_out_activ_V_t_empty_n) and (ap_const_logic_1 xor L2_out_V_t_empty_n) and (ap_const_logic_1 xor L2_bias_added_V_t_empty_n) and (ap_const_logic_1 xor L1_activ_V_t_empty_n) and (ap_const_logic_1 xor L1_no_activ_V_t_empty_n) and (bias_added_V_t_empty_n xor ap_const_logic_1) and classify_U0_ap_idle and add_bias_pre_L2_U0_ap_idle and add_bias_pre_L1_U0_ap_idle and Block_arrayctor_loop_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_return <= p_src_mlp_cpp_lin_U0_ap_return;
    ap_sync_add_bias_pre_L1_U0_ap_ready <= (ap_sync_reg_add_bias_pre_L1_U0_ap_ready or add_bias_pre_L1_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= p_src_mlp_cpp_lin_U0_ap_done;
    ap_sync_mvprod_layer_1_U0_ap_ready <= (mvprod_layer_1_U0_ap_ready or ap_sync_reg_mvprod_layer_1_U0_ap_ready);
    ap_sync_mvprod_layer_2_U0_ap_ready <= (mvprod_layer_2_U0_ap_ready or ap_sync_reg_mvprod_layer_2_U0_ap_ready);
    ap_sync_ready <= (ap_sync_mvprod_layer_2_U0_ap_ready and ap_sync_mvprod_layer_1_U0_ap_ready and ap_sync_add_bias_pre_L1_U0_ap_ready);
    classify_U0_ap_continue <= digit_full_n;
    classify_U0_ap_start <= L2_out_activ_V_t_empty_n;
    classify_U0_start_full_n <= ap_const_logic_1;
    classify_U0_start_write <= ap_const_logic_0;
    input_V_address0 <= add_bias_pre_L1_U0_input_V_address0;
    input_V_address1 <= ap_const_lv9_0;
    input_V_ce0 <= add_bias_pre_L1_U0_input_V_ce0;
    input_V_ce1 <= ap_const_logic_0;
    input_V_d0 <= ap_const_lv18_0;
    input_V_d1 <= ap_const_lv18_0;
    input_V_we0 <= ap_const_logic_0;
    input_V_we1 <= ap_const_logic_0;
    mvprod_layer_1_U0_ap_continue <= L1_no_activ_V_i_full_n;
    mvprod_layer_1_U0_ap_start <= ((ap_sync_reg_mvprod_layer_1_U0_ap_ready xor ap_const_logic_1) and bias_added_V_t_empty_n and ap_start);
    mvprod_layer_1_U0_result_V_full_n <= L1_no_activ_V_i_full_n;
    mvprod_layer_1_U0_start_full_n <= ap_const_logic_1;
    mvprod_layer_1_U0_start_write <= ap_const_logic_0;
    mvprod_layer_2_U0_ap_continue <= L2_out_V_i_full_n;
    mvprod_layer_2_U0_ap_start <= ((ap_sync_reg_mvprod_layer_2_U0_ap_ready xor ap_const_logic_1) and ap_start and L2_bias_added_V_t_empty_n);
    mvprod_layer_2_U0_result_V_full_n <= L2_out_V_i_full_n;
    mvprod_layer_2_U0_start_full_n <= ap_const_logic_1;
    mvprod_layer_2_U0_start_write <= ap_const_logic_0;
    p_src_mlp_cpp_lin_U0_ap_continue <= ap_const_logic_1;
    p_src_mlp_cpp_lin_U0_ap_start <= digit_load_loc_chann_empty_n;
    p_src_mlp_cpp_lin_U0_start_full_n <= ap_const_logic_1;
    p_src_mlp_cpp_lin_U0_start_write <= ap_const_logic_0;
    sigmoid_activation_L_1_U0_ap_continue <= L1_activ_V_i_full_n;
    sigmoid_activation_L_1_U0_ap_start <= L1_no_activ_V_t_empty_n;
    sigmoid_activation_L_1_U0_result_V_full_n <= L1_activ_V_i_full_n;
    sigmoid_activation_L_1_U0_start_full_n <= ap_const_logic_1;
    sigmoid_activation_L_1_U0_start_write <= ap_const_logic_0;
    sigmoid_activation_L_U0_ap_continue <= L2_out_activ_V_i_full_n;
    sigmoid_activation_L_U0_ap_start <= L2_out_V_t_empty_n;
    sigmoid_activation_L_U0_result_V_full_n <= L2_out_activ_V_i_full_n;
    sigmoid_activation_L_U0_start_full_n <= ap_const_logic_1;
    sigmoid_activation_L_U0_start_write <= ap_const_logic_0;
    tmp_p_src_mlp_cpp_lin_fu_117_ap_return <= ap_const_lv32_0;
    weights_L1_V_address0 <= mvprod_layer_1_U0_matrix_V_address0;
    weights_L1_V_address1 <= ap_const_lv14_0;
    weights_L1_V_ce0 <= mvprod_layer_1_U0_matrix_V_ce0;
    weights_L1_V_ce1 <= ap_const_logic_0;
    weights_L1_V_d0 <= ap_const_lv18_0;
    weights_L1_V_d1 <= ap_const_lv18_0;
    weights_L1_V_we0 <= ap_const_logic_0;
    weights_L1_V_we1 <= ap_const_logic_0;
    weights_L2_V_address0 <= mvprod_layer_2_U0_matrix_V_address0;
    weights_L2_V_address1 <= ap_const_lv9_0;
    weights_L2_V_ce0 <= mvprod_layer_2_U0_matrix_V_ce0;
    weights_L2_V_ce1 <= ap_const_logic_0;
    weights_L2_V_d0 <= ap_const_lv18_0;
    weights_L2_V_d1 <= ap_const_lv18_0;
    weights_L2_V_we0 <= ap_const_logic_0;
    weights_L2_V_we1 <= ap_const_logic_0;
end behav;
