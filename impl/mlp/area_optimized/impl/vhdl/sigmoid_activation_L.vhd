-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sigmoid_activation_L is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    result_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    result_V_ce0 : OUT STD_LOGIC;
    result_V_we0 : OUT STD_LOGIC;
    result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of sigmoid_activation_L is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv18_8000 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv18_10000 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_107_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_224 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_229 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_240 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_reg_246 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_131_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_2_reg_251 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_261 : STD_LOGIC_VECTOR (14 downto 0);
    signal OP1_V_cast_fu_153_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_reg_272 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_5_fu_163_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_reg_277 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_4_fu_201_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_4_reg_282 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_reg_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal result_V_addr_gep_fu_82_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_7_fu_209_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_1_fu_126_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_fu_156_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_169_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_11_cast_fu_176_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_3_fu_185_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_9_fu_191_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component mlp_mul_mul_18s_1g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;



begin
    mlp_mul_mul_18s_1g8j_U23 : component mlp_mul_mul_18s_1g8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p0,
        din1 => grp_fu_215_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_215_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_fu_101_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_90 <= i_1_reg_224;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_90 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_224 <= i_1_fu_107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Val2_2_reg_251 <= p_Val2_2_fu_131_p3;
                tmp_3_reg_261 <= p_Val2_2_fu_131_p3(16 downto 2);
                tmp_7_reg_256 <= tmp_7_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_4_reg_282 <= p_Val2_4_fu_201_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    p_Val2_5_reg_277(17 downto 3) <= p_Val2_5_fu_163_p2(17 downto 3);
                tmp_8_reg_272 <= grp_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Val2_s_reg_240 <= input_V_q0;
                tmp_2_reg_246 <= input_V_q0(17 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_101_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_1_reg_229(3 downto 0) <= tmp_1_fu_113_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_1_reg_229(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_Val2_5_reg_277(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_101_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_101_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
        OP1_V_cast_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_reg_251),33));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_101_p2)
    begin
        if (((tmp_fu_101_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_101_p2)
    begin
        if (((tmp_fu_101_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_215_p0 <= OP1_V_cast_fu_153_p1(18 - 1 downto 0);
    grp_fu_215_p1 <= OP1_V_cast_fu_153_p1(18 - 1 downto 0);
    i_1_fu_107_p2 <= std_logic_vector(unsigned(i_reg_90) + unsigned(ap_const_lv4_1));
    input_V_address0 <= tmp_1_fu_113_p1(4 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_fu_126_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(p_Val2_s_reg_240));
    p_Val2_2_fu_131_p3 <= 
        p_Val2_1_fu_126_p2 when (tmp_2_reg_246(0) = '1') else 
        p_Val2_s_reg_240;
    p_Val2_3_fu_185_p2 <= std_logic_vector(unsigned(tmp_4_fu_169_p3) - unsigned(tmp_11_cast_fu_176_p4));
    p_Val2_4_fu_201_p3 <= 
        ap_const_lv18_10000 when (tmp_7_reg_256(0) = '1') else 
        tmp_9_fu_191_p4;
    p_Val2_5_fu_163_p2 <= std_logic_vector(unsigned(tmp_s_fu_156_p3) + unsigned(ap_const_lv18_8000));
    p_Val2_7_fu_209_p2 <= std_logic_vector(unsigned(ap_const_lv18_10000) - unsigned(p_Val2_4_reg_282));
    result_V_addr_gep_fu_82_p3 <= tmp_1_reg_229(4 - 1 downto 0);

    result_V_address0_assign_proc : process(tmp_1_reg_229, ap_CS_fsm_state8, ap_CS_fsm_state9, result_V_addr_gep_fu_82_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            result_V_address0 <= result_V_addr_gep_fu_82_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            result_V_address0 <= tmp_1_reg_229(4 - 1 downto 0);
        else 
            result_V_address0 <= "XXXX";
        end if; 
    end process;


    result_V_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            result_V_ce0 <= ap_const_logic_1;
        else 
            result_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_V_d0_assign_proc : process(p_Val2_4_fu_201_p3, ap_CS_fsm_state8, ap_CS_fsm_state9, p_Val2_7_fu_209_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            result_V_d0 <= p_Val2_7_fu_209_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            result_V_d0 <= p_Val2_4_fu_201_p3;
        else 
            result_V_d0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_V_we0_assign_proc : process(tmp_2_reg_246, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((((tmp_2_reg_246 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_2_reg_246 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            result_V_we0 <= ap_const_logic_1;
        else 
            result_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_cast_fu_176_p4 <= tmp_8_reg_272(32 downto 5);
    tmp_1_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_90),64));
    tmp_4_fu_169_p3 <= (p_Val2_5_reg_277 & ap_const_lv10_0);
    tmp_7_fu_137_p2 <= "1" when (signed(p_Val2_2_fu_131_p3) > signed(ap_const_lv18_8000)) else "0";
    tmp_9_fu_191_p4 <= p_Val2_3_fu_185_p2(27 downto 10);
    tmp_fu_101_p2 <= "1" when (i_reg_90 = ap_const_lv4_A) else "0";
    tmp_s_fu_156_p3 <= (tmp_3_reg_261 & ap_const_lv3_0);
end behav;
