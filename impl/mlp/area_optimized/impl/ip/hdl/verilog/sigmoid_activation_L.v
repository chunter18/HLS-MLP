// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sigmoid_activation_L (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        result_V_address0,
        result_V_ce0,
        result_V_we0,
        result_V_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] input_V_address0;
output   input_V_ce0;
input  [17:0] input_V_q0;
output  [3:0] result_V_address0;
output   result_V_ce0;
output   result_V_we0;
output  [17:0] result_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg[3:0] result_V_address0;
reg result_V_ce0;
reg result_V_we0;
reg[17:0] result_V_d0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_1_fu_107_p2;
reg   [3:0] i_1_reg_224;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_1_fu_113_p1;
reg   [63:0] tmp_1_reg_229;
wire   [0:0] tmp_fu_101_p2;
reg   [17:0] p_Val2_s_reg_240;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_2_reg_246;
wire  signed [17:0] p_Val2_2_fu_131_p3;
reg  signed [17:0] p_Val2_2_reg_251;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_7_fu_137_p2;
reg   [0:0] tmp_7_reg_256;
reg   [14:0] tmp_3_reg_261;
wire  signed [32:0] OP1_V_cast_fu_153_p1;
wire    ap_CS_fsm_state5;
wire  signed [32:0] grp_fu_215_p2;
reg  signed [32:0] tmp_8_reg_272;
wire    ap_CS_fsm_state7;
wire   [17:0] p_Val2_5_fu_163_p2;
reg   [17:0] p_Val2_5_reg_277;
wire   [17:0] p_Val2_4_fu_201_p3;
reg   [17:0] p_Val2_4_reg_282;
wire    ap_CS_fsm_state8;
reg   [3:0] i_reg_90;
reg    ap_block_state1;
wire    ap_CS_fsm_state9;
wire   [3:0] result_V_addr_gep_fu_82_p3;
wire   [17:0] p_Val2_7_fu_209_p2;
wire   [17:0] p_Val2_1_fu_126_p2;
wire   [17:0] tmp_s_fu_156_p3;
wire   [27:0] tmp_4_fu_169_p3;
wire   [27:0] tmp_11_cast_fu_176_p4;
wire   [27:0] p_Val2_3_fu_185_p2;
wire   [17:0] tmp_9_fu_191_p4;
wire  signed [17:0] grp_fu_215_p0;
wire  signed [17:0] grp_fu_215_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
end

mlp_mul_mul_18s_1g8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mlp_mul_mul_18s_1g8j_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_215_p0),
    .din1(grp_fu_215_p1),
    .ce(1'b1),
    .dout(grp_fu_215_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_90 <= i_1_reg_224;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_90 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_224 <= i_1_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_2_reg_251 <= p_Val2_2_fu_131_p3;
        tmp_3_reg_261 <= {{p_Val2_2_fu_131_p3[16:2]}};
        tmp_7_reg_256 <= tmp_7_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_4_reg_282 <= p_Val2_4_fu_201_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_Val2_5_reg_277[17 : 3] <= p_Val2_5_fu_163_p2[17 : 3];
        tmp_8_reg_272 <= grp_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_s_reg_240 <= input_V_q0;
        tmp_2_reg_246 <= input_V_q0[32'd17];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_229[3 : 0] <= tmp_1_fu_113_p1[3 : 0];
    end
end

always @ (*) begin
    if (((tmp_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        result_V_address0 = result_V_addr_gep_fu_82_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        result_V_address0 = tmp_1_reg_229;
    end else begin
        result_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        result_V_ce0 = 1'b1;
    end else begin
        result_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        result_V_d0 = p_Val2_7_fu_209_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        result_V_d0 = p_Val2_4_fu_201_p3;
    end else begin
        result_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_2_reg_246 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((tmp_2_reg_246 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        result_V_we0 = 1'b1;
    end else begin
        result_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_cast_fu_153_p1 = p_Val2_2_reg_251;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_fu_215_p0 = OP1_V_cast_fu_153_p1;

assign grp_fu_215_p1 = OP1_V_cast_fu_153_p1;

assign i_1_fu_107_p2 = (i_reg_90 + 4'd1);

assign input_V_address0 = tmp_1_fu_113_p1;

assign p_Val2_1_fu_126_p2 = (18'd0 - p_Val2_s_reg_240);

assign p_Val2_2_fu_131_p3 = ((tmp_2_reg_246[0:0] === 1'b1) ? p_Val2_1_fu_126_p2 : p_Val2_s_reg_240);

assign p_Val2_3_fu_185_p2 = (tmp_4_fu_169_p3 - tmp_11_cast_fu_176_p4);

assign p_Val2_4_fu_201_p3 = ((tmp_7_reg_256[0:0] === 1'b1) ? 18'd65536 : tmp_9_fu_191_p4);

assign p_Val2_5_fu_163_p2 = (tmp_s_fu_156_p3 + 18'd32768);

assign p_Val2_7_fu_209_p2 = (18'd65536 - p_Val2_4_reg_282);

assign result_V_addr_gep_fu_82_p3 = tmp_1_reg_229;

assign tmp_11_cast_fu_176_p4 = {{tmp_8_reg_272[32:5]}};

assign tmp_1_fu_113_p1 = i_reg_90;

assign tmp_4_fu_169_p3 = {{p_Val2_5_reg_277}, {10'd0}};

assign tmp_7_fu_137_p2 = (($signed(p_Val2_2_fu_131_p3) > $signed(18'd32768)) ? 1'b1 : 1'b0);

assign tmp_9_fu_191_p4 = {{p_Val2_3_fu_185_p2[27:10]}};

assign tmp_fu_101_p2 = ((i_reg_90 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_s_fu_156_p3 = {{tmp_3_reg_261}, {3'd0}};

always @ (posedge ap_clk) begin
    tmp_1_reg_229[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_Val2_5_reg_277[2:0] <= 3'b000;
end

endmodule //sigmoid_activation_L
