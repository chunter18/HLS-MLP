// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mvprod_layer_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        matrix_V_address0,
        matrix_V_ce0,
        matrix_V_q0,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        result_V_address0,
        result_V_ce0,
        result_V_we0,
        result_V_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [13:0] matrix_V_address0;
output   matrix_V_ce0;
input  [17:0] matrix_V_q0;
output  [8:0] input_V_address0;
output   input_V_ce0;
input  [17:0] input_V_q0;
output  [4:0] result_V_address0;
output   result_V_ce0;
output   result_V_we0;
output  [17:0] result_V_d0;

reg ap_done;
reg ap_idle;
reg matrix_V_ce0;
reg input_V_ce0;
reg result_V_ce0;
reg result_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [0:0] exitcond_flatten_reg_339;
reg   [0:0] exitcond_flatten_reg_339_pp0_iter3_reg;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_5_reg_105;
reg   [8:0] n4_reg_119;
reg   [4:0] m2_reg_133;
reg   [13:0] indvar_flatten1_reg_147;
reg   [17:0] acc_s_reg_161;
wire   [8:0] n_mid2_fu_181_p3;
reg   [8:0] n_mid2_reg_305;
wire    ap_CS_fsm_pp0_stage0;
reg   [8:0] n_mid2_reg_305_pp0_iter1_reg;
reg   [8:0] n_mid2_reg_305_pp0_iter2_reg;
wire   [4:0] m_mid2_fu_189_p3;
reg   [4:0] m_mid2_reg_313;
wire    ap_enable_reg_pp0_iter0;
reg   [4:0] m_mid2_reg_313_pp0_iter1_reg;
reg   [4:0] m_mid2_reg_313_pp0_iter2_reg;
reg   [4:0] m_mid2_reg_313_pp0_iter3_reg;
reg   [4:0] m_mid2_reg_313_pp0_iter4_reg;
reg   [4:0] m_mid2_reg_313_pp0_iter5_reg;
reg   [4:0] m_mid2_reg_313_pp0_iter6_reg;
wire   [13:0] indvar_flatten_next_fu_201_p2;
reg   [13:0] indvar_flatten_next_reg_324;
wire   [8:0] n_fu_207_p2;
reg   [8:0] n_reg_329;
wire   [0:0] tmp_s_fu_213_p2;
reg   [0:0] tmp_s_reg_334;
wire   [0:0] exitcond_flatten_fu_219_p2;
reg   [0:0] exitcond_flatten_reg_339_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_339_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_339_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_reg_339_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_reg_339_pp0_iter6_reg;
wire   [13:0] grp_fu_288_p3;
reg   [13:0] tmp_13_reg_343;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] tmp_8_fu_228_p2;
reg   [0:0] tmp_8_reg_348;
reg   [0:0] tmp_8_reg_348_pp0_iter4_reg;
reg   [0:0] tmp_8_reg_348_pp0_iter5_reg;
wire   [0:0] tmp_15_fu_241_p2;
reg   [0:0] tmp_15_reg_363;
reg   [0:0] tmp_15_reg_363_pp0_iter4_reg;
reg   [0:0] tmp_15_reg_363_pp0_iter5_reg;
reg   [0:0] tmp_15_reg_363_pp0_iter6_reg;
reg   [17:0] acc_V_reg_377;
reg    ap_enable_reg_pp0_iter6;
reg    rewind_ap_ready;
reg    rewind_ap_ready_reg;
reg    rewind_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] ap_phi_mux_tmp_5_phi_fu_109_p6;
wire    ap_block_pp0_stage0;
reg   [8:0] ap_phi_mux_n4_phi_fu_123_p6;
reg   [4:0] ap_phi_mux_m2_phi_fu_137_p6;
reg   [13:0] ap_phi_mux_indvar_flatten1_phi_fu_151_p6;
reg   [17:0] ap_phi_mux_acc_s_phi_fu_165_p6;
wire   [63:0] tmp_13_cast_fu_237_p1;
wire   [63:0] tmp_9_fu_233_p1;
wire   [63:0] tmp_10_fu_282_p1;
wire   [4:0] m_fu_175_p2;
wire   [17:0] tmp_14_fu_254_p3;
wire   [37:0] tmp_11_fu_261_p3;
wire  signed [38:0] grp_fu_296_p3;
wire   [4:0] grp_fu_288_p0;
wire   [9:0] grp_fu_288_p1;
wire   [8:0] grp_fu_288_p2;
wire   [37:0] grp_fu_296_p2;
reg    grp_fu_288_ce;
reg    grp_fu_296_ce;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to6;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [13:0] grp_fu_288_p00;
wire   [13:0] grp_fu_288_p20;
wire   [38:0] grp_fu_296_p20;
reg    ap_condition_183;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 rewind_ap_ready_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

mlp_mac_muladd_5nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 14 ))
mlp_mac_muladd_5nbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_288_p0),
    .din1(grp_fu_288_p1),
    .din2(grp_fu_288_p2),
    .ce(grp_fu_288_ce),
    .dout(grp_fu_288_p3)
);

mlp_mac_muladd_18cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 38 ),
    .dout_WIDTH( 39 ))
mlp_mac_muladd_18cud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(matrix_V_q0),
    .din1(input_V_q0),
    .din2(grp_fu_296_p2),
    .ce(grp_fu_296_ce),
    .dout(grp_fu_296_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= rewind_enable;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rewind_ap_ready_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (ap_start == 1'b1))) begin
            rewind_ap_ready_reg <= rewind_ap_ready;
        end else begin
            rewind_ap_ready_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (exitcond_flatten_reg_339_pp0_iter6_reg == 1'd0))) begin
        acc_s_reg_161 <= acc_V_reg_377;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        acc_s_reg_161 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten1_reg_147 <= indvar_flatten_next_reg_324;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten1_reg_147 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m2_reg_133 <= m_mid2_reg_313;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        m2_reg_133 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        n4_reg_119 <= n_reg_329;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        n4_reg_119 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp_5_reg_105 <= tmp_s_reg_334;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp_5_reg_105 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        acc_V_reg_377 <= {{grp_fu_296_p3[37:20]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_339 <= exitcond_flatten_fu_219_p2;
        exitcond_flatten_reg_339_pp0_iter1_reg <= exitcond_flatten_reg_339;
        m_mid2_reg_313_pp0_iter1_reg <= m_mid2_reg_313;
        n_mid2_reg_305 <= n_mid2_fu_181_p3;
        n_mid2_reg_305_pp0_iter1_reg <= n_mid2_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_339_pp0_iter2_reg <= exitcond_flatten_reg_339_pp0_iter1_reg;
        exitcond_flatten_reg_339_pp0_iter3_reg <= exitcond_flatten_reg_339_pp0_iter2_reg;
        exitcond_flatten_reg_339_pp0_iter4_reg <= exitcond_flatten_reg_339_pp0_iter3_reg;
        exitcond_flatten_reg_339_pp0_iter5_reg <= exitcond_flatten_reg_339_pp0_iter4_reg;
        exitcond_flatten_reg_339_pp0_iter6_reg <= exitcond_flatten_reg_339_pp0_iter5_reg;
        m_mid2_reg_313_pp0_iter2_reg <= m_mid2_reg_313_pp0_iter1_reg;
        m_mid2_reg_313_pp0_iter3_reg <= m_mid2_reg_313_pp0_iter2_reg;
        m_mid2_reg_313_pp0_iter4_reg <= m_mid2_reg_313_pp0_iter3_reg;
        m_mid2_reg_313_pp0_iter5_reg <= m_mid2_reg_313_pp0_iter4_reg;
        m_mid2_reg_313_pp0_iter6_reg <= m_mid2_reg_313_pp0_iter5_reg;
        n_mid2_reg_305_pp0_iter2_reg <= n_mid2_reg_305_pp0_iter1_reg;
        tmp_15_reg_363 <= tmp_15_fu_241_p2;
        tmp_15_reg_363_pp0_iter4_reg <= tmp_15_reg_363;
        tmp_15_reg_363_pp0_iter5_reg <= tmp_15_reg_363_pp0_iter4_reg;
        tmp_15_reg_363_pp0_iter6_reg <= tmp_15_reg_363_pp0_iter5_reg;
        tmp_8_reg_348 <= tmp_8_fu_228_p2;
        tmp_8_reg_348_pp0_iter4_reg <= tmp_8_reg_348;
        tmp_8_reg_348_pp0_iter5_reg <= tmp_8_reg_348_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_reg_324 <= indvar_flatten_next_fu_201_p2;
        m_mid2_reg_313 <= m_mid2_fu_189_p3;
        n_reg_329 <= n_fu_207_p2;
        tmp_s_reg_334 <= tmp_s_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_13_reg_343 <= grp_fu_288_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0_0to6 = 1'b1;
    end else begin
        ap_idle_pp0_0to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((exitcond_flatten_reg_339_pp0_iter6_reg == 1'd1)) begin
            ap_phi_mux_acc_s_phi_fu_165_p6 = 18'd0;
        end else if ((exitcond_flatten_reg_339_pp0_iter6_reg == 1'd0)) begin
            ap_phi_mux_acc_s_phi_fu_165_p6 = acc_V_reg_377;
        end else begin
            ap_phi_mux_acc_s_phi_fu_165_p6 = acc_s_reg_161;
        end
    end else begin
        ap_phi_mux_acc_s_phi_fu_165_p6 = acc_s_reg_161;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_183)) begin
        if ((exitcond_flatten_reg_339 == 1'd1)) begin
            ap_phi_mux_indvar_flatten1_phi_fu_151_p6 = 14'd0;
        end else if ((exitcond_flatten_reg_339 == 1'd0)) begin
            ap_phi_mux_indvar_flatten1_phi_fu_151_p6 = indvar_flatten_next_reg_324;
        end else begin
            ap_phi_mux_indvar_flatten1_phi_fu_151_p6 = indvar_flatten1_reg_147;
        end
    end else begin
        ap_phi_mux_indvar_flatten1_phi_fu_151_p6 = indvar_flatten1_reg_147;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_183)) begin
        if ((exitcond_flatten_reg_339 == 1'd1)) begin
            ap_phi_mux_m2_phi_fu_137_p6 = 5'd0;
        end else if ((exitcond_flatten_reg_339 == 1'd0)) begin
            ap_phi_mux_m2_phi_fu_137_p6 = m_mid2_reg_313;
        end else begin
            ap_phi_mux_m2_phi_fu_137_p6 = m2_reg_133;
        end
    end else begin
        ap_phi_mux_m2_phi_fu_137_p6 = m2_reg_133;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_183)) begin
        if ((exitcond_flatten_reg_339 == 1'd1)) begin
            ap_phi_mux_n4_phi_fu_123_p6 = 9'd0;
        end else if ((exitcond_flatten_reg_339 == 1'd0)) begin
            ap_phi_mux_n4_phi_fu_123_p6 = n_reg_329;
        end else begin
            ap_phi_mux_n4_phi_fu_123_p6 = n4_reg_119;
        end
    end else begin
        ap_phi_mux_n4_phi_fu_123_p6 = n4_reg_119;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_183)) begin
        if ((exitcond_flatten_reg_339 == 1'd1)) begin
            ap_phi_mux_tmp_5_phi_fu_109_p6 = 1'd0;
        end else if ((exitcond_flatten_reg_339 == 1'd0)) begin
            ap_phi_mux_tmp_5_phi_fu_109_p6 = tmp_s_reg_334;
        end else begin
            ap_phi_mux_tmp_5_phi_fu_109_p6 = tmp_5_reg_105;
        end
    end else begin
        ap_phi_mux_tmp_5_phi_fu_109_p6 = tmp_5_reg_105;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to6 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_288_ce = 1'b1;
    end else begin
        grp_fu_288_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_296_ce = 1'b1;
    end else begin
        grp_fu_296_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_339_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        matrix_V_ce0 = 1'b1;
    end else begin
        matrix_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        result_V_ce0 = 1'b1;
    end else begin
        result_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_15_reg_363_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        result_V_we0 = 1'b1;
    end else begin
        result_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((rewind_ap_ready_reg == 1'b1) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_219_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        rewind_ap_ready = 1'b1;
    end else begin
        rewind_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((rewind_ap_ready_reg == 1'b0) & (ap_start == 1'b1))) begin
        rewind_enable = 1'b1;
    end else begin
        rewind_enable = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_183 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = rewind_enable;

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_219_p2 = ((ap_phi_mux_indvar_flatten1_phi_fu_151_p6 == 14'd10024) ? 1'b1 : 1'b0);

assign grp_fu_288_p0 = grp_fu_288_p00;

assign grp_fu_288_p00 = m_mid2_fu_189_p3;

assign grp_fu_288_p1 = 14'd401;

assign grp_fu_288_p2 = grp_fu_288_p20;

assign grp_fu_288_p20 = n_mid2_reg_305_pp0_iter1_reg;

assign grp_fu_296_p2 = grp_fu_296_p20;

assign grp_fu_296_p20 = tmp_11_fu_261_p3;

assign indvar_flatten_next_fu_201_p2 = (ap_phi_mux_indvar_flatten1_phi_fu_151_p6 + 14'd1);

assign input_V_address0 = tmp_9_fu_233_p1;

assign m_fu_175_p2 = (ap_phi_mux_m2_phi_fu_137_p6 + 5'd1);

assign m_mid2_fu_189_p3 = ((ap_phi_mux_tmp_5_phi_fu_109_p6[0:0] === 1'b1) ? m_fu_175_p2 : ap_phi_mux_m2_phi_fu_137_p6);

assign matrix_V_address0 = tmp_13_cast_fu_237_p1;

assign n_fu_207_p2 = (n_mid2_fu_181_p3 + 9'd1);

assign n_mid2_fu_181_p3 = ((ap_phi_mux_tmp_5_phi_fu_109_p6[0:0] === 1'b1) ? 9'd0 : ap_phi_mux_n4_phi_fu_123_p6);

assign result_V_address0 = tmp_10_fu_282_p1;

assign result_V_d0 = acc_V_reg_377;

assign tmp_10_fu_282_p1 = m_mid2_reg_313_pp0_iter6_reg;

assign tmp_11_fu_261_p3 = {{tmp_14_fu_254_p3}, {20'd0}};

assign tmp_13_cast_fu_237_p1 = tmp_13_reg_343;

assign tmp_14_fu_254_p3 = ((tmp_8_reg_348_pp0_iter5_reg[0:0] === 1'b1) ? 18'd0 : ap_phi_mux_acc_s_phi_fu_165_p6);

assign tmp_15_fu_241_p2 = ((n_mid2_reg_305_pp0_iter2_reg == 9'd400) ? 1'b1 : 1'b0);

assign tmp_8_fu_228_p2 = ((n_mid2_reg_305_pp0_iter2_reg == 9'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_233_p1 = n_mid2_reg_305_pp0_iter2_reg;

assign tmp_s_fu_213_p2 = ((n_fu_207_p2 == 9'd401) ? 1'b1 : 1'b0);

endmodule //mvprod_layer_1
