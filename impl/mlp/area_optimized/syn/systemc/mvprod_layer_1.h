// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mvprod_layer_1_HH_
#define _mvprod_layer_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mlp_mac_muladd_5nbkb.h"
#include "mlp_mac_muladd_18cud.h"

namespace ap_rtl {

struct mvprod_layer_1 : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > matrix_V_address0;
    sc_out< sc_logic > matrix_V_ce0;
    sc_in< sc_lv<18> > matrix_V_q0;
    sc_out< sc_lv<9> > input_V_address0;
    sc_out< sc_logic > input_V_ce0;
    sc_in< sc_lv<18> > input_V_q0;
    sc_out< sc_lv<5> > result_V_address0;
    sc_out< sc_logic > result_V_ce0;
    sc_out< sc_logic > result_V_we0;
    sc_out< sc_lv<18> > result_V_d0;


    // Module declarations
    mvprod_layer_1(sc_module_name name);
    SC_HAS_PROCESS(mvprod_layer_1);

    ~mvprod_layer_1();

    sc_trace_file* mVcdFile;

    mlp_mac_muladd_5nbkb<1,3,5,10,9,14>* mlp_mac_muladd_5nbkb_U3;
    mlp_mac_muladd_18cud<1,3,18,18,38,39>* mlp_mac_muladd_18cud_U4;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_339;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_339_pp0_iter3_reg;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > tmp_5_reg_105;
    sc_signal< sc_lv<9> > n4_reg_119;
    sc_signal< sc_lv<5> > m2_reg_133;
    sc_signal< sc_lv<14> > indvar_flatten1_reg_147;
    sc_signal< sc_lv<18> > acc_s_reg_161;
    sc_signal< sc_lv<9> > n_mid2_fu_181_p3;
    sc_signal< sc_lv<9> > n_mid2_reg_305;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_lv<9> > n_mid2_reg_305_pp0_iter1_reg;
    sc_signal< sc_lv<9> > n_mid2_reg_305_pp0_iter2_reg;
    sc_signal< sc_lv<5> > m_mid2_fu_189_p3;
    sc_signal< sc_lv<5> > m_mid2_reg_313;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > m_mid2_reg_313_pp0_iter1_reg;
    sc_signal< sc_lv<5> > m_mid2_reg_313_pp0_iter2_reg;
    sc_signal< sc_lv<5> > m_mid2_reg_313_pp0_iter3_reg;
    sc_signal< sc_lv<5> > m_mid2_reg_313_pp0_iter4_reg;
    sc_signal< sc_lv<5> > m_mid2_reg_313_pp0_iter5_reg;
    sc_signal< sc_lv<5> > m_mid2_reg_313_pp0_iter6_reg;
    sc_signal< sc_lv<14> > indvar_flatten_next_fu_201_p2;
    sc_signal< sc_lv<14> > indvar_flatten_next_reg_324;
    sc_signal< sc_lv<9> > n_fu_207_p2;
    sc_signal< sc_lv<9> > n_reg_329;
    sc_signal< sc_lv<1> > tmp_s_fu_213_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_334;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_219_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_339_pp0_iter1_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_339_pp0_iter2_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_339_pp0_iter4_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_339_pp0_iter5_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_339_pp0_iter6_reg;
    sc_signal< sc_lv<14> > grp_fu_288_p3;
    sc_signal< sc_lv<14> > tmp_13_reg_343;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > tmp_8_fu_228_p2;
    sc_signal< sc_lv<1> > tmp_8_reg_348;
    sc_signal< sc_lv<1> > tmp_8_reg_348_pp0_iter4_reg;
    sc_signal< sc_lv<1> > tmp_8_reg_348_pp0_iter5_reg;
    sc_signal< sc_lv<1> > tmp_15_fu_241_p2;
    sc_signal< sc_lv<1> > tmp_15_reg_363;
    sc_signal< sc_lv<1> > tmp_15_reg_363_pp0_iter4_reg;
    sc_signal< sc_lv<1> > tmp_15_reg_363_pp0_iter5_reg;
    sc_signal< sc_lv<1> > tmp_15_reg_363_pp0_iter6_reg;
    sc_signal< sc_lv<18> > acc_V_reg_377;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > rewind_ap_ready;
    sc_signal< sc_logic > rewind_ap_ready_reg;
    sc_signal< sc_logic > rewind_enable;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_lv<1> > ap_phi_mux_tmp_5_phi_fu_109_p6;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<9> > ap_phi_mux_n4_phi_fu_123_p6;
    sc_signal< sc_lv<5> > ap_phi_mux_m2_phi_fu_137_p6;
    sc_signal< sc_lv<14> > ap_phi_mux_indvar_flatten1_phi_fu_151_p6;
    sc_signal< sc_lv<18> > ap_phi_mux_acc_s_phi_fu_165_p6;
    sc_signal< sc_lv<64> > tmp_13_cast_fu_237_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_233_p1;
    sc_signal< sc_lv<64> > tmp_10_fu_282_p1;
    sc_signal< sc_lv<5> > m_fu_175_p2;
    sc_signal< sc_lv<18> > tmp_14_fu_254_p3;
    sc_signal< sc_lv<38> > tmp_11_fu_261_p3;
    sc_signal< sc_lv<39> > grp_fu_296_p3;
    sc_signal< sc_lv<5> > grp_fu_288_p0;
    sc_signal< sc_lv<10> > grp_fu_288_p1;
    sc_signal< sc_lv<9> > grp_fu_288_p2;
    sc_signal< sc_lv<38> > grp_fu_296_p2;
    sc_signal< sc_logic > grp_fu_288_ce;
    sc_signal< sc_logic > grp_fu_296_ce;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to6;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<14> > grp_fu_288_p00;
    sc_signal< sc_lv<14> > grp_fu_288_p20;
    sc_signal< sc_lv<39> > grp_fu_296_p20;
    sc_signal< bool > ap_condition_183;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<18> ap_const_lv18_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<9> ap_const_lv9_191;
    static const sc_lv<14> ap_const_lv14_2728;
    static const sc_lv<9> ap_const_lv9_190;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_25;
    static const sc_lv<14> ap_const_lv14_191;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_183();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to6();
    void thread_ap_phi_mux_acc_s_phi_fu_165_p6();
    void thread_ap_phi_mux_indvar_flatten1_phi_fu_151_p6();
    void thread_ap_phi_mux_m2_phi_fu_137_p6();
    void thread_ap_phi_mux_n4_phi_fu_123_p6();
    void thread_ap_phi_mux_tmp_5_phi_fu_109_p6();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_exitcond_flatten_fu_219_p2();
    void thread_grp_fu_288_ce();
    void thread_grp_fu_288_p0();
    void thread_grp_fu_288_p00();
    void thread_grp_fu_288_p1();
    void thread_grp_fu_288_p2();
    void thread_grp_fu_288_p20();
    void thread_grp_fu_296_ce();
    void thread_grp_fu_296_p2();
    void thread_grp_fu_296_p20();
    void thread_indvar_flatten_next_fu_201_p2();
    void thread_input_V_address0();
    void thread_input_V_ce0();
    void thread_internal_ap_ready();
    void thread_m_fu_175_p2();
    void thread_m_mid2_fu_189_p3();
    void thread_matrix_V_address0();
    void thread_matrix_V_ce0();
    void thread_n_fu_207_p2();
    void thread_n_mid2_fu_181_p3();
    void thread_result_V_address0();
    void thread_result_V_ce0();
    void thread_result_V_d0();
    void thread_result_V_we0();
    void thread_rewind_ap_ready();
    void thread_rewind_enable();
    void thread_tmp_10_fu_282_p1();
    void thread_tmp_11_fu_261_p3();
    void thread_tmp_13_cast_fu_237_p1();
    void thread_tmp_14_fu_254_p3();
    void thread_tmp_15_fu_241_p2();
    void thread_tmp_8_fu_228_p2();
    void thread_tmp_9_fu_233_p1();
    void thread_tmp_s_fu_213_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
