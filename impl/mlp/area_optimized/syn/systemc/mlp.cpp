// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mlp.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mlp::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<14> mlp::ap_const_lv14_0 = "00000000000000";
const sc_logic mlp::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<18> mlp::ap_const_lv18_0 = "000000000000000000";
const sc_lv<9> mlp::ap_const_lv9_0 = "000000000";
const sc_lv<2> mlp::ap_const_lv2_0 = "00";
const sc_lv<2> mlp::ap_const_lv2_1 = "1";
const bool mlp::ap_const_boolean_1 = true;
const sc_lv<32> mlp::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mlp::ap_const_lv32_1 = "1";

mlp::mlp(sc_module_name name) : sc_module(name), mVcdFile(0) {
    bias_added_V_U = new mlp_bias_added_V("bias_added_V_U");
    bias_added_V_U->clk(ap_clk);
    bias_added_V_U->reset(ap_rst);
    bias_added_V_U->i_address0(add_bias_pre_L1_U0_result_V_address0);
    bias_added_V_U->i_ce0(add_bias_pre_L1_U0_result_V_ce0);
    bias_added_V_U->i_we0(add_bias_pre_L1_U0_result_V_we0);
    bias_added_V_U->i_d0(add_bias_pre_L1_U0_result_V_d0);
    bias_added_V_U->i_q0(bias_added_V_i_q0);
    bias_added_V_U->t_address0(mvprod_layer_1_U0_input_V_address0);
    bias_added_V_U->t_ce0(mvprod_layer_1_U0_input_V_ce0);
    bias_added_V_U->t_we0(ap_var_for_const0);
    bias_added_V_U->t_d0(ap_var_for_const1);
    bias_added_V_U->t_q0(bias_added_V_t_q0);
    bias_added_V_U->i_ce(ap_var_for_const2);
    bias_added_V_U->t_ce(ap_var_for_const2);
    bias_added_V_U->i_full_n(bias_added_V_i_full_n);
    bias_added_V_U->i_write(add_bias_pre_L1_U0_ap_done);
    bias_added_V_U->t_empty_n(bias_added_V_t_empty_n);
    bias_added_V_U->t_read(mvprod_layer_1_U0_ap_ready);
    L1_no_activ_V_U = new mlp_L1_no_activ_V("L1_no_activ_V_U");
    L1_no_activ_V_U->clk(ap_clk);
    L1_no_activ_V_U->reset(ap_rst);
    L1_no_activ_V_U->i_address0(mvprod_layer_1_U0_result_V_address0);
    L1_no_activ_V_U->i_ce0(mvprod_layer_1_U0_result_V_ce0);
    L1_no_activ_V_U->i_we0(mvprod_layer_1_U0_result_V_we0);
    L1_no_activ_V_U->i_d0(mvprod_layer_1_U0_result_V_d0);
    L1_no_activ_V_U->i_q0(L1_no_activ_V_i_q0);
    L1_no_activ_V_U->t_address0(sigmoid_activation_L_1_U0_input_V_address0);
    L1_no_activ_V_U->t_ce0(sigmoid_activation_L_1_U0_input_V_ce0);
    L1_no_activ_V_U->t_we0(ap_var_for_const0);
    L1_no_activ_V_U->t_d0(ap_var_for_const1);
    L1_no_activ_V_U->t_q0(L1_no_activ_V_t_q0);
    L1_no_activ_V_U->i_ce(ap_var_for_const2);
    L1_no_activ_V_U->t_ce(ap_var_for_const2);
    L1_no_activ_V_U->i_full_n(L1_no_activ_V_i_full_n);
    L1_no_activ_V_U->i_write(mvprod_layer_1_U0_ap_done);
    L1_no_activ_V_U->t_empty_n(L1_no_activ_V_t_empty_n);
    L1_no_activ_V_U->t_read(sigmoid_activation_L_1_U0_ap_ready);
    L1_activ_V_U = new mlp_L1_no_activ_V("L1_activ_V_U");
    L1_activ_V_U->clk(ap_clk);
    L1_activ_V_U->reset(ap_rst);
    L1_activ_V_U->i_address0(sigmoid_activation_L_1_U0_result_V_address0);
    L1_activ_V_U->i_ce0(sigmoid_activation_L_1_U0_result_V_ce0);
    L1_activ_V_U->i_we0(sigmoid_activation_L_1_U0_result_V_we0);
    L1_activ_V_U->i_d0(sigmoid_activation_L_1_U0_result_V_d0);
    L1_activ_V_U->i_q0(L1_activ_V_i_q0);
    L1_activ_V_U->t_address0(add_bias_pre_L2_U0_input_V_address0);
    L1_activ_V_U->t_ce0(add_bias_pre_L2_U0_input_V_ce0);
    L1_activ_V_U->t_we0(ap_var_for_const0);
    L1_activ_V_U->t_d0(ap_var_for_const1);
    L1_activ_V_U->t_q0(L1_activ_V_t_q0);
    L1_activ_V_U->i_ce(ap_var_for_const2);
    L1_activ_V_U->t_ce(ap_var_for_const2);
    L1_activ_V_U->i_full_n(L1_activ_V_i_full_n);
    L1_activ_V_U->i_write(sigmoid_activation_L_1_U0_ap_done);
    L1_activ_V_U->t_empty_n(L1_activ_V_t_empty_n);
    L1_activ_V_U->t_read(add_bias_pre_L2_U0_ap_ready);
    L2_bias_added_V_U = new mlp_L2_bias_added_V("L2_bias_added_V_U");
    L2_bias_added_V_U->clk(ap_clk);
    L2_bias_added_V_U->reset(ap_rst);
    L2_bias_added_V_U->i_address0(add_bias_pre_L2_U0_result_V_address0);
    L2_bias_added_V_U->i_ce0(add_bias_pre_L2_U0_result_V_ce0);
    L2_bias_added_V_U->i_we0(add_bias_pre_L2_U0_result_V_we0);
    L2_bias_added_V_U->i_d0(add_bias_pre_L2_U0_result_V_d0);
    L2_bias_added_V_U->i_q0(L2_bias_added_V_i_q0);
    L2_bias_added_V_U->t_address0(mvprod_layer_2_U0_input_V_address0);
    L2_bias_added_V_U->t_ce0(mvprod_layer_2_U0_input_V_ce0);
    L2_bias_added_V_U->t_we0(ap_var_for_const0);
    L2_bias_added_V_U->t_d0(ap_var_for_const1);
    L2_bias_added_V_U->t_q0(L2_bias_added_V_t_q0);
    L2_bias_added_V_U->i_ce(ap_var_for_const2);
    L2_bias_added_V_U->t_ce(ap_var_for_const2);
    L2_bias_added_V_U->i_full_n(L2_bias_added_V_i_full_n);
    L2_bias_added_V_U->i_write(add_bias_pre_L2_U0_ap_done);
    L2_bias_added_V_U->t_empty_n(L2_bias_added_V_t_empty_n);
    L2_bias_added_V_U->t_read(mvprod_layer_2_U0_ap_ready);
    L2_out_V_U = new mlp_L2_out_V("L2_out_V_U");
    L2_out_V_U->clk(ap_clk);
    L2_out_V_U->reset(ap_rst);
    L2_out_V_U->i_address0(mvprod_layer_2_U0_result_V_address0);
    L2_out_V_U->i_ce0(mvprod_layer_2_U0_result_V_ce0);
    L2_out_V_U->i_we0(mvprod_layer_2_U0_result_V_we0);
    L2_out_V_U->i_d0(mvprod_layer_2_U0_result_V_d0);
    L2_out_V_U->i_q0(L2_out_V_i_q0);
    L2_out_V_U->t_address0(sigmoid_activation_L_U0_input_V_address0);
    L2_out_V_U->t_ce0(sigmoid_activation_L_U0_input_V_ce0);
    L2_out_V_U->t_we0(ap_var_for_const0);
    L2_out_V_U->t_d0(ap_var_for_const1);
    L2_out_V_U->t_q0(L2_out_V_t_q0);
    L2_out_V_U->i_ce(ap_var_for_const2);
    L2_out_V_U->t_ce(ap_var_for_const2);
    L2_out_V_U->i_full_n(L2_out_V_i_full_n);
    L2_out_V_U->i_write(mvprod_layer_2_U0_ap_done);
    L2_out_V_U->t_empty_n(L2_out_V_t_empty_n);
    L2_out_V_U->t_read(sigmoid_activation_L_U0_ap_ready);
    L2_out_activ_V_U = new mlp_L2_out_V("L2_out_activ_V_U");
    L2_out_activ_V_U->clk(ap_clk);
    L2_out_activ_V_U->reset(ap_rst);
    L2_out_activ_V_U->i_address0(sigmoid_activation_L_U0_result_V_address0);
    L2_out_activ_V_U->i_ce0(sigmoid_activation_L_U0_result_V_ce0);
    L2_out_activ_V_U->i_we0(sigmoid_activation_L_U0_result_V_we0);
    L2_out_activ_V_U->i_d0(sigmoid_activation_L_U0_result_V_d0);
    L2_out_activ_V_U->i_q0(L2_out_activ_V_i_q0);
    L2_out_activ_V_U->t_address0(classify_U0_activated_L2_V_address0);
    L2_out_activ_V_U->t_ce0(classify_U0_activated_L2_V_ce0);
    L2_out_activ_V_U->t_we0(ap_var_for_const0);
    L2_out_activ_V_U->t_d0(ap_var_for_const1);
    L2_out_activ_V_U->t_q0(L2_out_activ_V_t_q0);
    L2_out_activ_V_U->i_ce(ap_var_for_const2);
    L2_out_activ_V_U->t_ce(ap_var_for_const2);
    L2_out_activ_V_U->i_full_n(L2_out_activ_V_i_full_n);
    L2_out_activ_V_U->i_write(sigmoid_activation_L_U0_ap_done);
    L2_out_activ_V_U->t_empty_n(L2_out_activ_V_t_empty_n);
    L2_out_activ_V_U->t_read(classify_U0_ap_ready);
    add_bias_pre_L1_U0 = new add_bias_pre_L1("add_bias_pre_L1_U0");
    add_bias_pre_L1_U0->ap_clk(ap_clk);
    add_bias_pre_L1_U0->ap_rst(ap_rst);
    add_bias_pre_L1_U0->ap_start(add_bias_pre_L1_U0_ap_start);
    add_bias_pre_L1_U0->ap_done(add_bias_pre_L1_U0_ap_done);
    add_bias_pre_L1_U0->ap_continue(add_bias_pre_L1_U0_ap_continue);
    add_bias_pre_L1_U0->ap_idle(add_bias_pre_L1_U0_ap_idle);
    add_bias_pre_L1_U0->ap_ready(add_bias_pre_L1_U0_ap_ready);
    add_bias_pre_L1_U0->input_V_address0(add_bias_pre_L1_U0_input_V_address0);
    add_bias_pre_L1_U0->input_V_ce0(add_bias_pre_L1_U0_input_V_ce0);
    add_bias_pre_L1_U0->input_V_q0(input_V_q0);
    add_bias_pre_L1_U0->result_V_address0(add_bias_pre_L1_U0_result_V_address0);
    add_bias_pre_L1_U0->result_V_ce0(add_bias_pre_L1_U0_result_V_ce0);
    add_bias_pre_L1_U0->result_V_we0(add_bias_pre_L1_U0_result_V_we0);
    add_bias_pre_L1_U0->result_V_d0(add_bias_pre_L1_U0_result_V_d0);
    mvprod_layer_1_U0 = new mvprod_layer_1("mvprod_layer_1_U0");
    mvprod_layer_1_U0->ap_clk(ap_clk);
    mvprod_layer_1_U0->ap_rst(ap_rst);
    mvprod_layer_1_U0->ap_start(mvprod_layer_1_U0_ap_start);
    mvprod_layer_1_U0->ap_done(mvprod_layer_1_U0_ap_done);
    mvprod_layer_1_U0->ap_continue(mvprod_layer_1_U0_ap_continue);
    mvprod_layer_1_U0->ap_idle(mvprod_layer_1_U0_ap_idle);
    mvprod_layer_1_U0->ap_ready(mvprod_layer_1_U0_ap_ready);
    mvprod_layer_1_U0->matrix_V_address0(mvprod_layer_1_U0_matrix_V_address0);
    mvprod_layer_1_U0->matrix_V_ce0(mvprod_layer_1_U0_matrix_V_ce0);
    mvprod_layer_1_U0->matrix_V_q0(weights_L1_V_q0);
    mvprod_layer_1_U0->input_V_address0(mvprod_layer_1_U0_input_V_address0);
    mvprod_layer_1_U0->input_V_ce0(mvprod_layer_1_U0_input_V_ce0);
    mvprod_layer_1_U0->input_V_q0(bias_added_V_t_q0);
    mvprod_layer_1_U0->result_V_address0(mvprod_layer_1_U0_result_V_address0);
    mvprod_layer_1_U0->result_V_ce0(mvprod_layer_1_U0_result_V_ce0);
    mvprod_layer_1_U0->result_V_we0(mvprod_layer_1_U0_result_V_we0);
    mvprod_layer_1_U0->result_V_d0(mvprod_layer_1_U0_result_V_d0);
    sigmoid_activation_L_1_U0 = new sigmoid_activation_L_1("sigmoid_activation_L_1_U0");
    sigmoid_activation_L_1_U0->ap_clk(ap_clk);
    sigmoid_activation_L_1_U0->ap_rst(ap_rst);
    sigmoid_activation_L_1_U0->ap_start(sigmoid_activation_L_1_U0_ap_start);
    sigmoid_activation_L_1_U0->ap_done(sigmoid_activation_L_1_U0_ap_done);
    sigmoid_activation_L_1_U0->ap_continue(sigmoid_activation_L_1_U0_ap_continue);
    sigmoid_activation_L_1_U0->ap_idle(sigmoid_activation_L_1_U0_ap_idle);
    sigmoid_activation_L_1_U0->ap_ready(sigmoid_activation_L_1_U0_ap_ready);
    sigmoid_activation_L_1_U0->input_V_address0(sigmoid_activation_L_1_U0_input_V_address0);
    sigmoid_activation_L_1_U0->input_V_ce0(sigmoid_activation_L_1_U0_input_V_ce0);
    sigmoid_activation_L_1_U0->input_V_q0(L1_no_activ_V_t_q0);
    sigmoid_activation_L_1_U0->result_V_address0(sigmoid_activation_L_1_U0_result_V_address0);
    sigmoid_activation_L_1_U0->result_V_ce0(sigmoid_activation_L_1_U0_result_V_ce0);
    sigmoid_activation_L_1_U0->result_V_we0(sigmoid_activation_L_1_U0_result_V_we0);
    sigmoid_activation_L_1_U0->result_V_d0(sigmoid_activation_L_1_U0_result_V_d0);
    add_bias_pre_L2_U0 = new add_bias_pre_L2("add_bias_pre_L2_U0");
    add_bias_pre_L2_U0->ap_clk(ap_clk);
    add_bias_pre_L2_U0->ap_rst(ap_rst);
    add_bias_pre_L2_U0->ap_start(add_bias_pre_L2_U0_ap_start);
    add_bias_pre_L2_U0->ap_done(add_bias_pre_L2_U0_ap_done);
    add_bias_pre_L2_U0->ap_continue(add_bias_pre_L2_U0_ap_continue);
    add_bias_pre_L2_U0->ap_idle(add_bias_pre_L2_U0_ap_idle);
    add_bias_pre_L2_U0->ap_ready(add_bias_pre_L2_U0_ap_ready);
    add_bias_pre_L2_U0->input_V_address0(add_bias_pre_L2_U0_input_V_address0);
    add_bias_pre_L2_U0->input_V_ce0(add_bias_pre_L2_U0_input_V_ce0);
    add_bias_pre_L2_U0->input_V_q0(L1_activ_V_t_q0);
    add_bias_pre_L2_U0->result_V_address0(add_bias_pre_L2_U0_result_V_address0);
    add_bias_pre_L2_U0->result_V_ce0(add_bias_pre_L2_U0_result_V_ce0);
    add_bias_pre_L2_U0->result_V_we0(add_bias_pre_L2_U0_result_V_we0);
    add_bias_pre_L2_U0->result_V_d0(add_bias_pre_L2_U0_result_V_d0);
    mvprod_layer_2_U0 = new mvprod_layer_2("mvprod_layer_2_U0");
    mvprod_layer_2_U0->ap_clk(ap_clk);
    mvprod_layer_2_U0->ap_rst(ap_rst);
    mvprod_layer_2_U0->ap_start(mvprod_layer_2_U0_ap_start);
    mvprod_layer_2_U0->ap_done(mvprod_layer_2_U0_ap_done);
    mvprod_layer_2_U0->ap_continue(mvprod_layer_2_U0_ap_continue);
    mvprod_layer_2_U0->ap_idle(mvprod_layer_2_U0_ap_idle);
    mvprod_layer_2_U0->ap_ready(mvprod_layer_2_U0_ap_ready);
    mvprod_layer_2_U0->matrix_V_address0(mvprod_layer_2_U0_matrix_V_address0);
    mvprod_layer_2_U0->matrix_V_ce0(mvprod_layer_2_U0_matrix_V_ce0);
    mvprod_layer_2_U0->matrix_V_q0(weights_L2_V_q0);
    mvprod_layer_2_U0->input_V_address0(mvprod_layer_2_U0_input_V_address0);
    mvprod_layer_2_U0->input_V_ce0(mvprod_layer_2_U0_input_V_ce0);
    mvprod_layer_2_U0->input_V_q0(L2_bias_added_V_t_q0);
    mvprod_layer_2_U0->result_V_address0(mvprod_layer_2_U0_result_V_address0);
    mvprod_layer_2_U0->result_V_ce0(mvprod_layer_2_U0_result_V_ce0);
    mvprod_layer_2_U0->result_V_we0(mvprod_layer_2_U0_result_V_we0);
    mvprod_layer_2_U0->result_V_d0(mvprod_layer_2_U0_result_V_d0);
    sigmoid_activation_L_U0 = new sigmoid_activation_L("sigmoid_activation_L_U0");
    sigmoid_activation_L_U0->ap_clk(ap_clk);
    sigmoid_activation_L_U0->ap_rst(ap_rst);
    sigmoid_activation_L_U0->ap_start(sigmoid_activation_L_U0_ap_start);
    sigmoid_activation_L_U0->ap_done(sigmoid_activation_L_U0_ap_done);
    sigmoid_activation_L_U0->ap_continue(sigmoid_activation_L_U0_ap_continue);
    sigmoid_activation_L_U0->ap_idle(sigmoid_activation_L_U0_ap_idle);
    sigmoid_activation_L_U0->ap_ready(sigmoid_activation_L_U0_ap_ready);
    sigmoid_activation_L_U0->input_V_address0(sigmoid_activation_L_U0_input_V_address0);
    sigmoid_activation_L_U0->input_V_ce0(sigmoid_activation_L_U0_input_V_ce0);
    sigmoid_activation_L_U0->input_V_q0(L2_out_V_t_q0);
    sigmoid_activation_L_U0->result_V_address0(sigmoid_activation_L_U0_result_V_address0);
    sigmoid_activation_L_U0->result_V_ce0(sigmoid_activation_L_U0_result_V_ce0);
    sigmoid_activation_L_U0->result_V_we0(sigmoid_activation_L_U0_result_V_we0);
    sigmoid_activation_L_U0->result_V_d0(sigmoid_activation_L_U0_result_V_d0);
    classify_U0 = new classify("classify_U0");
    classify_U0->ap_clk(ap_clk);
    classify_U0->ap_rst(ap_rst);
    classify_U0->ap_start(classify_U0_ap_start);
    classify_U0->ap_done(classify_U0_ap_done);
    classify_U0->ap_continue(classify_U0_ap_continue);
    classify_U0->ap_idle(classify_U0_ap_idle);
    classify_U0->ap_ready(classify_U0_ap_ready);
    classify_U0->activated_L2_V_address0(classify_U0_activated_L2_V_address0);
    classify_U0->activated_L2_V_ce0(classify_U0_activated_L2_V_ce0);
    classify_U0->activated_L2_V_q0(L2_out_activ_V_t_q0);
    classify_U0->ap_return(classify_U0_ap_return);
    Block_arrayctor_loop_U0 = new Block_arrayctor_loop("Block_arrayctor_loop_U0");
    Block_arrayctor_loop_U0->ap_clk(ap_clk);
    Block_arrayctor_loop_U0->ap_rst(ap_rst);
    Block_arrayctor_loop_U0->ap_start(Block_arrayctor_loop_U0_ap_start);
    Block_arrayctor_loop_U0->ap_done(Block_arrayctor_loop_U0_ap_done);
    Block_arrayctor_loop_U0->ap_continue(Block_arrayctor_loop_U0_ap_continue);
    Block_arrayctor_loop_U0->ap_idle(Block_arrayctor_loop_U0_ap_idle);
    Block_arrayctor_loop_U0->ap_ready(Block_arrayctor_loop_U0_ap_ready);
    Block_arrayctor_loop_U0->p_read(digit_dout);
    Block_arrayctor_loop_U0->ap_return(Block_arrayctor_loop_U0_ap_return);
    p_src_mlp_cpp_lin_U0 = new p_src_mlp_cpp_lin("p_src_mlp_cpp_lin_U0");
    p_src_mlp_cpp_lin_U0->ap_clk(ap_clk);
    p_src_mlp_cpp_lin_U0->ap_rst(ap_rst);
    p_src_mlp_cpp_lin_U0->ap_start(p_src_mlp_cpp_lin_U0_ap_start);
    p_src_mlp_cpp_lin_U0->ap_done(p_src_mlp_cpp_lin_U0_ap_done);
    p_src_mlp_cpp_lin_U0->ap_continue(p_src_mlp_cpp_lin_U0_ap_continue);
    p_src_mlp_cpp_lin_U0->ap_idle(p_src_mlp_cpp_lin_U0_ap_idle);
    p_src_mlp_cpp_lin_U0->ap_ready(p_src_mlp_cpp_lin_U0_ap_ready);
    p_src_mlp_cpp_lin_U0->p_read(digit_load_loc_chann_dout);
    p_src_mlp_cpp_lin_U0->ap_return(p_src_mlp_cpp_lin_U0_ap_return);
    digit_U = new fifo_w32_d2_A("digit_U");
    digit_U->clk(ap_clk);
    digit_U->reset(ap_rst);
    digit_U->if_read_ce(ap_var_for_const2);
    digit_U->if_write_ce(ap_var_for_const2);
    digit_U->if_din(classify_U0_ap_return);
    digit_U->if_full_n(digit_full_n);
    digit_U->if_write(classify_U0_ap_done);
    digit_U->if_dout(digit_dout);
    digit_U->if_empty_n(digit_empty_n);
    digit_U->if_read(Block_arrayctor_loop_U0_ap_ready);
    digit_load_loc_chann_U = new fifo_w32_d2_A("digit_load_loc_chann_U");
    digit_load_loc_chann_U->clk(ap_clk);
    digit_load_loc_chann_U->reset(ap_rst);
    digit_load_loc_chann_U->if_read_ce(ap_var_for_const2);
    digit_load_loc_chann_U->if_write_ce(ap_var_for_const2);
    digit_load_loc_chann_U->if_din(Block_arrayctor_loop_U0_ap_return);
    digit_load_loc_chann_U->if_full_n(digit_load_loc_chann_full_n);
    digit_load_loc_chann_U->if_write(Block_arrayctor_loop_U0_ap_done);
    digit_load_loc_chann_U->if_dout(digit_load_loc_chann_dout);
    digit_load_loc_chann_U->if_empty_n(digit_load_loc_chann_empty_n);
    digit_load_loc_chann_U->if_read(p_src_mlp_cpp_lin_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Block_arrayctor_loop_U0_ap_continue);
    sensitive << ( digit_load_loc_chann_full_n );

    SC_METHOD(thread_Block_arrayctor_loop_U0_ap_start);
    sensitive << ( digit_empty_n );

    SC_METHOD(thread_Block_arrayctor_loop_U0_start_full_n);

    SC_METHOD(thread_Block_arrayctor_loop_U0_start_write);

    SC_METHOD(thread_add_bias_pre_L1_U0_ap_continue);
    sensitive << ( bias_added_V_i_full_n );

    SC_METHOD(thread_add_bias_pre_L1_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_add_bias_pre_L1_U0_ap_ready );

    SC_METHOD(thread_add_bias_pre_L1_U0_result_V_full_n);
    sensitive << ( bias_added_V_i_full_n );

    SC_METHOD(thread_add_bias_pre_L1_U0_start_full_n);

    SC_METHOD(thread_add_bias_pre_L1_U0_start_write);

    SC_METHOD(thread_add_bias_pre_L2_U0_ap_continue);
    sensitive << ( L2_bias_added_V_i_full_n );

    SC_METHOD(thread_add_bias_pre_L2_U0_ap_start);
    sensitive << ( L1_activ_V_t_empty_n );

    SC_METHOD(thread_add_bias_pre_L2_U0_result_V_full_n);
    sensitive << ( L2_bias_added_V_i_full_n );

    SC_METHOD(thread_add_bias_pre_L2_U0_start_full_n);

    SC_METHOD(thread_add_bias_pre_L2_U0_start_write);

    SC_METHOD(thread_ap_channel_done_L1_activ_V);
    sensitive << ( sigmoid_activation_L_1_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_L1_no_activ_V);
    sensitive << ( mvprod_layer_1_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_L2_bias_added_V);
    sensitive << ( add_bias_pre_L2_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_L2_out_V);
    sensitive << ( mvprod_layer_2_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_L2_out_activ_V);
    sensitive << ( sigmoid_activation_L_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_bias_added_V);
    sensitive << ( add_bias_pre_L1_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_digit);
    sensitive << ( classify_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_digit_load_loc_chann);
    sensitive << ( Block_arrayctor_loop_U0_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( p_src_mlp_cpp_lin_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( add_bias_pre_L1_U0_ap_idle );
    sensitive << ( mvprod_layer_1_U0_ap_idle );
    sensitive << ( sigmoid_activation_L_1_U0_ap_idle );
    sensitive << ( add_bias_pre_L2_U0_ap_idle );
    sensitive << ( mvprod_layer_2_U0_ap_idle );
    sensitive << ( sigmoid_activation_L_U0_ap_idle );
    sensitive << ( classify_U0_ap_idle );
    sensitive << ( Block_arrayctor_loop_U0_ap_idle );
    sensitive << ( p_src_mlp_cpp_lin_U0_ap_idle );
    sensitive << ( bias_added_V_t_empty_n );
    sensitive << ( L1_no_activ_V_t_empty_n );
    sensitive << ( L1_activ_V_t_empty_n );
    sensitive << ( L2_bias_added_V_t_empty_n );
    sensitive << ( L2_out_V_t_empty_n );
    sensitive << ( L2_out_activ_V_t_empty_n );
    sensitive << ( digit_empty_n );
    sensitive << ( digit_load_loc_chann_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sync_ready );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_src_mlp_cpp_lin_U0_ap_return );

    SC_METHOD(thread_ap_sync_add_bias_pre_L1_U0_ap_ready);
    sensitive << ( add_bias_pre_L1_U0_ap_ready );
    sensitive << ( ap_sync_reg_add_bias_pre_L1_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( p_src_mlp_cpp_lin_U0_ap_done );

    SC_METHOD(thread_ap_sync_mvprod_layer_1_U0_ap_ready);
    sensitive << ( mvprod_layer_1_U0_ap_ready );
    sensitive << ( ap_sync_reg_mvprod_layer_1_U0_ap_ready );

    SC_METHOD(thread_ap_sync_mvprod_layer_2_U0_ap_ready);
    sensitive << ( mvprod_layer_2_U0_ap_ready );
    sensitive << ( ap_sync_reg_mvprod_layer_2_U0_ap_ready );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( ap_sync_mvprod_layer_1_U0_ap_ready );
    sensitive << ( ap_sync_mvprod_layer_2_U0_ap_ready );
    sensitive << ( ap_sync_add_bias_pre_L1_U0_ap_ready );

    SC_METHOD(thread_classify_U0_ap_continue);
    sensitive << ( digit_full_n );

    SC_METHOD(thread_classify_U0_ap_start);
    sensitive << ( L2_out_activ_V_t_empty_n );

    SC_METHOD(thread_classify_U0_start_full_n);

    SC_METHOD(thread_classify_U0_start_write);

    SC_METHOD(thread_input_V_address0);
    sensitive << ( add_bias_pre_L1_U0_input_V_address0 );

    SC_METHOD(thread_input_V_address1);

    SC_METHOD(thread_input_V_ce0);
    sensitive << ( add_bias_pre_L1_U0_input_V_ce0 );

    SC_METHOD(thread_input_V_ce1);

    SC_METHOD(thread_input_V_d0);

    SC_METHOD(thread_input_V_d1);

    SC_METHOD(thread_input_V_we0);

    SC_METHOD(thread_input_V_we1);

    SC_METHOD(thread_mvprod_layer_1_U0_ap_continue);
    sensitive << ( L1_no_activ_V_i_full_n );

    SC_METHOD(thread_mvprod_layer_1_U0_ap_start);
    sensitive << ( bias_added_V_t_empty_n );
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_mvprod_layer_1_U0_ap_ready );

    SC_METHOD(thread_mvprod_layer_1_U0_result_V_full_n);
    sensitive << ( L1_no_activ_V_i_full_n );

    SC_METHOD(thread_mvprod_layer_1_U0_start_full_n);

    SC_METHOD(thread_mvprod_layer_1_U0_start_write);

    SC_METHOD(thread_mvprod_layer_2_U0_ap_continue);
    sensitive << ( L2_out_V_i_full_n );

    SC_METHOD(thread_mvprod_layer_2_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( L2_bias_added_V_t_empty_n );
    sensitive << ( ap_sync_reg_mvprod_layer_2_U0_ap_ready );

    SC_METHOD(thread_mvprod_layer_2_U0_result_V_full_n);
    sensitive << ( L2_out_V_i_full_n );

    SC_METHOD(thread_mvprod_layer_2_U0_start_full_n);

    SC_METHOD(thread_mvprod_layer_2_U0_start_write);

    SC_METHOD(thread_p_src_mlp_cpp_lin_U0_ap_continue);

    SC_METHOD(thread_p_src_mlp_cpp_lin_U0_ap_start);
    sensitive << ( digit_load_loc_chann_empty_n );

    SC_METHOD(thread_p_src_mlp_cpp_lin_U0_start_full_n);

    SC_METHOD(thread_p_src_mlp_cpp_lin_U0_start_write);

    SC_METHOD(thread_sigmoid_activation_L_1_U0_ap_continue);
    sensitive << ( L1_activ_V_i_full_n );

    SC_METHOD(thread_sigmoid_activation_L_1_U0_ap_start);
    sensitive << ( L1_no_activ_V_t_empty_n );

    SC_METHOD(thread_sigmoid_activation_L_1_U0_result_V_full_n);
    sensitive << ( L1_activ_V_i_full_n );

    SC_METHOD(thread_sigmoid_activation_L_1_U0_start_full_n);

    SC_METHOD(thread_sigmoid_activation_L_1_U0_start_write);

    SC_METHOD(thread_sigmoid_activation_L_U0_ap_continue);
    sensitive << ( L2_out_activ_V_i_full_n );

    SC_METHOD(thread_sigmoid_activation_L_U0_ap_start);
    sensitive << ( L2_out_V_t_empty_n );

    SC_METHOD(thread_sigmoid_activation_L_U0_result_V_full_n);
    sensitive << ( L2_out_activ_V_i_full_n );

    SC_METHOD(thread_sigmoid_activation_L_U0_start_full_n);

    SC_METHOD(thread_sigmoid_activation_L_U0_start_write);

    SC_METHOD(thread_tmp_p_src_mlp_cpp_lin_fu_117_ap_return);

    SC_METHOD(thread_weights_L1_V_address0);
    sensitive << ( mvprod_layer_1_U0_matrix_V_address0 );

    SC_METHOD(thread_weights_L1_V_address1);

    SC_METHOD(thread_weights_L1_V_ce0);
    sensitive << ( mvprod_layer_1_U0_matrix_V_ce0 );

    SC_METHOD(thread_weights_L1_V_ce1);

    SC_METHOD(thread_weights_L1_V_d0);

    SC_METHOD(thread_weights_L1_V_d1);

    SC_METHOD(thread_weights_L1_V_we0);

    SC_METHOD(thread_weights_L1_V_we1);

    SC_METHOD(thread_weights_L2_V_address0);
    sensitive << ( mvprod_layer_2_U0_matrix_V_address0 );

    SC_METHOD(thread_weights_L2_V_address1);

    SC_METHOD(thread_weights_L2_V_ce0);
    sensitive << ( mvprod_layer_2_U0_matrix_V_ce0 );

    SC_METHOD(thread_weights_L2_V_ce1);

    SC_METHOD(thread_weights_L2_V_d0);

    SC_METHOD(thread_weights_L2_V_d1);

    SC_METHOD(thread_weights_L2_V_we0);

    SC_METHOD(thread_weights_L2_V_we1);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_sync_reg_mvprod_layer_1_U0_ap_ready = SC_LOGIC_0;
    mvprod_layer_1_U0_ap_ready_count = "00";
    ap_sync_reg_mvprod_layer_2_U0_ap_ready = SC_LOGIC_0;
    mvprod_layer_2_U0_ap_ready_count = "00";
    ap_sync_reg_add_bias_pre_L1_U0_ap_ready = SC_LOGIC_0;
    add_bias_pre_L1_U0_ap_ready_count = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mlp_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, weights_L1_V_address0, "(port)weights_L1_V_address0");
    sc_trace(mVcdFile, weights_L1_V_ce0, "(port)weights_L1_V_ce0");
    sc_trace(mVcdFile, weights_L1_V_d0, "(port)weights_L1_V_d0");
    sc_trace(mVcdFile, weights_L1_V_q0, "(port)weights_L1_V_q0");
    sc_trace(mVcdFile, weights_L1_V_we0, "(port)weights_L1_V_we0");
    sc_trace(mVcdFile, weights_L1_V_address1, "(port)weights_L1_V_address1");
    sc_trace(mVcdFile, weights_L1_V_ce1, "(port)weights_L1_V_ce1");
    sc_trace(mVcdFile, weights_L1_V_d1, "(port)weights_L1_V_d1");
    sc_trace(mVcdFile, weights_L1_V_q1, "(port)weights_L1_V_q1");
    sc_trace(mVcdFile, weights_L1_V_we1, "(port)weights_L1_V_we1");
    sc_trace(mVcdFile, weights_L2_V_address0, "(port)weights_L2_V_address0");
    sc_trace(mVcdFile, weights_L2_V_ce0, "(port)weights_L2_V_ce0");
    sc_trace(mVcdFile, weights_L2_V_d0, "(port)weights_L2_V_d0");
    sc_trace(mVcdFile, weights_L2_V_q0, "(port)weights_L2_V_q0");
    sc_trace(mVcdFile, weights_L2_V_we0, "(port)weights_L2_V_we0");
    sc_trace(mVcdFile, weights_L2_V_address1, "(port)weights_L2_V_address1");
    sc_trace(mVcdFile, weights_L2_V_ce1, "(port)weights_L2_V_ce1");
    sc_trace(mVcdFile, weights_L2_V_d1, "(port)weights_L2_V_d1");
    sc_trace(mVcdFile, weights_L2_V_q1, "(port)weights_L2_V_q1");
    sc_trace(mVcdFile, weights_L2_V_we1, "(port)weights_L2_V_we1");
    sc_trace(mVcdFile, input_V_address0, "(port)input_V_address0");
    sc_trace(mVcdFile, input_V_ce0, "(port)input_V_ce0");
    sc_trace(mVcdFile, input_V_d0, "(port)input_V_d0");
    sc_trace(mVcdFile, input_V_q0, "(port)input_V_q0");
    sc_trace(mVcdFile, input_V_we0, "(port)input_V_we0");
    sc_trace(mVcdFile, input_V_address1, "(port)input_V_address1");
    sc_trace(mVcdFile, input_V_ce1, "(port)input_V_ce1");
    sc_trace(mVcdFile, input_V_d1, "(port)input_V_d1");
    sc_trace(mVcdFile, input_V_q1, "(port)input_V_q1");
    sc_trace(mVcdFile, input_V_we1, "(port)input_V_we1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, bias_added_V_i_q0, "bias_added_V_i_q0");
    sc_trace(mVcdFile, bias_added_V_t_q0, "bias_added_V_t_q0");
    sc_trace(mVcdFile, L1_no_activ_V_i_q0, "L1_no_activ_V_i_q0");
    sc_trace(mVcdFile, L1_no_activ_V_t_q0, "L1_no_activ_V_t_q0");
    sc_trace(mVcdFile, L1_activ_V_i_q0, "L1_activ_V_i_q0");
    sc_trace(mVcdFile, L1_activ_V_t_q0, "L1_activ_V_t_q0");
    sc_trace(mVcdFile, L2_bias_added_V_i_q0, "L2_bias_added_V_i_q0");
    sc_trace(mVcdFile, L2_bias_added_V_t_q0, "L2_bias_added_V_t_q0");
    sc_trace(mVcdFile, L2_out_V_i_q0, "L2_out_V_i_q0");
    sc_trace(mVcdFile, L2_out_V_t_q0, "L2_out_V_t_q0");
    sc_trace(mVcdFile, L2_out_activ_V_i_q0, "L2_out_activ_V_i_q0");
    sc_trace(mVcdFile, L2_out_activ_V_t_q0, "L2_out_activ_V_t_q0");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_ap_start, "add_bias_pre_L1_U0_ap_start");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_ap_done, "add_bias_pre_L1_U0_ap_done");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_ap_continue, "add_bias_pre_L1_U0_ap_continue");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_ap_idle, "add_bias_pre_L1_U0_ap_idle");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_ap_ready, "add_bias_pre_L1_U0_ap_ready");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_input_V_address0, "add_bias_pre_L1_U0_input_V_address0");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_input_V_ce0, "add_bias_pre_L1_U0_input_V_ce0");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_result_V_address0, "add_bias_pre_L1_U0_result_V_address0");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_result_V_ce0, "add_bias_pre_L1_U0_result_V_ce0");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_result_V_we0, "add_bias_pre_L1_U0_result_V_we0");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_result_V_d0, "add_bias_pre_L1_U0_result_V_d0");
    sc_trace(mVcdFile, ap_channel_done_bias_added_V, "ap_channel_done_bias_added_V");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_result_V_full_n, "add_bias_pre_L1_U0_result_V_full_n");
    sc_trace(mVcdFile, mvprod_layer_1_U0_ap_start, "mvprod_layer_1_U0_ap_start");
    sc_trace(mVcdFile, mvprod_layer_1_U0_ap_done, "mvprod_layer_1_U0_ap_done");
    sc_trace(mVcdFile, mvprod_layer_1_U0_ap_continue, "mvprod_layer_1_U0_ap_continue");
    sc_trace(mVcdFile, mvprod_layer_1_U0_ap_idle, "mvprod_layer_1_U0_ap_idle");
    sc_trace(mVcdFile, mvprod_layer_1_U0_ap_ready, "mvprod_layer_1_U0_ap_ready");
    sc_trace(mVcdFile, mvprod_layer_1_U0_matrix_V_address0, "mvprod_layer_1_U0_matrix_V_address0");
    sc_trace(mVcdFile, mvprod_layer_1_U0_matrix_V_ce0, "mvprod_layer_1_U0_matrix_V_ce0");
    sc_trace(mVcdFile, mvprod_layer_1_U0_input_V_address0, "mvprod_layer_1_U0_input_V_address0");
    sc_trace(mVcdFile, mvprod_layer_1_U0_input_V_ce0, "mvprod_layer_1_U0_input_V_ce0");
    sc_trace(mVcdFile, mvprod_layer_1_U0_result_V_address0, "mvprod_layer_1_U0_result_V_address0");
    sc_trace(mVcdFile, mvprod_layer_1_U0_result_V_ce0, "mvprod_layer_1_U0_result_V_ce0");
    sc_trace(mVcdFile, mvprod_layer_1_U0_result_V_we0, "mvprod_layer_1_U0_result_V_we0");
    sc_trace(mVcdFile, mvprod_layer_1_U0_result_V_d0, "mvprod_layer_1_U0_result_V_d0");
    sc_trace(mVcdFile, ap_channel_done_L1_no_activ_V, "ap_channel_done_L1_no_activ_V");
    sc_trace(mVcdFile, mvprod_layer_1_U0_result_V_full_n, "mvprod_layer_1_U0_result_V_full_n");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_ap_start, "sigmoid_activation_L_1_U0_ap_start");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_ap_done, "sigmoid_activation_L_1_U0_ap_done");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_ap_continue, "sigmoid_activation_L_1_U0_ap_continue");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_ap_idle, "sigmoid_activation_L_1_U0_ap_idle");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_ap_ready, "sigmoid_activation_L_1_U0_ap_ready");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_input_V_address0, "sigmoid_activation_L_1_U0_input_V_address0");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_input_V_ce0, "sigmoid_activation_L_1_U0_input_V_ce0");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_result_V_address0, "sigmoid_activation_L_1_U0_result_V_address0");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_result_V_ce0, "sigmoid_activation_L_1_U0_result_V_ce0");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_result_V_we0, "sigmoid_activation_L_1_U0_result_V_we0");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_result_V_d0, "sigmoid_activation_L_1_U0_result_V_d0");
    sc_trace(mVcdFile, ap_channel_done_L1_activ_V, "ap_channel_done_L1_activ_V");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_result_V_full_n, "sigmoid_activation_L_1_U0_result_V_full_n");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_ap_start, "add_bias_pre_L2_U0_ap_start");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_ap_done, "add_bias_pre_L2_U0_ap_done");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_ap_continue, "add_bias_pre_L2_U0_ap_continue");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_ap_idle, "add_bias_pre_L2_U0_ap_idle");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_ap_ready, "add_bias_pre_L2_U0_ap_ready");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_input_V_address0, "add_bias_pre_L2_U0_input_V_address0");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_input_V_ce0, "add_bias_pre_L2_U0_input_V_ce0");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_result_V_address0, "add_bias_pre_L2_U0_result_V_address0");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_result_V_ce0, "add_bias_pre_L2_U0_result_V_ce0");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_result_V_we0, "add_bias_pre_L2_U0_result_V_we0");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_result_V_d0, "add_bias_pre_L2_U0_result_V_d0");
    sc_trace(mVcdFile, ap_channel_done_L2_bias_added_V, "ap_channel_done_L2_bias_added_V");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_result_V_full_n, "add_bias_pre_L2_U0_result_V_full_n");
    sc_trace(mVcdFile, mvprod_layer_2_U0_ap_start, "mvprod_layer_2_U0_ap_start");
    sc_trace(mVcdFile, mvprod_layer_2_U0_ap_done, "mvprod_layer_2_U0_ap_done");
    sc_trace(mVcdFile, mvprod_layer_2_U0_ap_continue, "mvprod_layer_2_U0_ap_continue");
    sc_trace(mVcdFile, mvprod_layer_2_U0_ap_idle, "mvprod_layer_2_U0_ap_idle");
    sc_trace(mVcdFile, mvprod_layer_2_U0_ap_ready, "mvprod_layer_2_U0_ap_ready");
    sc_trace(mVcdFile, mvprod_layer_2_U0_matrix_V_address0, "mvprod_layer_2_U0_matrix_V_address0");
    sc_trace(mVcdFile, mvprod_layer_2_U0_matrix_V_ce0, "mvprod_layer_2_U0_matrix_V_ce0");
    sc_trace(mVcdFile, mvprod_layer_2_U0_input_V_address0, "mvprod_layer_2_U0_input_V_address0");
    sc_trace(mVcdFile, mvprod_layer_2_U0_input_V_ce0, "mvprod_layer_2_U0_input_V_ce0");
    sc_trace(mVcdFile, mvprod_layer_2_U0_result_V_address0, "mvprod_layer_2_U0_result_V_address0");
    sc_trace(mVcdFile, mvprod_layer_2_U0_result_V_ce0, "mvprod_layer_2_U0_result_V_ce0");
    sc_trace(mVcdFile, mvprod_layer_2_U0_result_V_we0, "mvprod_layer_2_U0_result_V_we0");
    sc_trace(mVcdFile, mvprod_layer_2_U0_result_V_d0, "mvprod_layer_2_U0_result_V_d0");
    sc_trace(mVcdFile, ap_channel_done_L2_out_V, "ap_channel_done_L2_out_V");
    sc_trace(mVcdFile, mvprod_layer_2_U0_result_V_full_n, "mvprod_layer_2_U0_result_V_full_n");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_ap_start, "sigmoid_activation_L_U0_ap_start");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_ap_done, "sigmoid_activation_L_U0_ap_done");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_ap_continue, "sigmoid_activation_L_U0_ap_continue");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_ap_idle, "sigmoid_activation_L_U0_ap_idle");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_ap_ready, "sigmoid_activation_L_U0_ap_ready");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_input_V_address0, "sigmoid_activation_L_U0_input_V_address0");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_input_V_ce0, "sigmoid_activation_L_U0_input_V_ce0");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_result_V_address0, "sigmoid_activation_L_U0_result_V_address0");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_result_V_ce0, "sigmoid_activation_L_U0_result_V_ce0");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_result_V_we0, "sigmoid_activation_L_U0_result_V_we0");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_result_V_d0, "sigmoid_activation_L_U0_result_V_d0");
    sc_trace(mVcdFile, ap_channel_done_L2_out_activ_V, "ap_channel_done_L2_out_activ_V");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_result_V_full_n, "sigmoid_activation_L_U0_result_V_full_n");
    sc_trace(mVcdFile, classify_U0_ap_start, "classify_U0_ap_start");
    sc_trace(mVcdFile, classify_U0_ap_done, "classify_U0_ap_done");
    sc_trace(mVcdFile, classify_U0_ap_continue, "classify_U0_ap_continue");
    sc_trace(mVcdFile, classify_U0_ap_idle, "classify_U0_ap_idle");
    sc_trace(mVcdFile, classify_U0_ap_ready, "classify_U0_ap_ready");
    sc_trace(mVcdFile, classify_U0_activated_L2_V_address0, "classify_U0_activated_L2_V_address0");
    sc_trace(mVcdFile, classify_U0_activated_L2_V_ce0, "classify_U0_activated_L2_V_ce0");
    sc_trace(mVcdFile, classify_U0_ap_return, "classify_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_digit, "ap_channel_done_digit");
    sc_trace(mVcdFile, digit_full_n, "digit_full_n");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_start, "Block_arrayctor_loop_U0_ap_start");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_done, "Block_arrayctor_loop_U0_ap_done");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_continue, "Block_arrayctor_loop_U0_ap_continue");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_idle, "Block_arrayctor_loop_U0_ap_idle");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_ready, "Block_arrayctor_loop_U0_ap_ready");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_ap_return, "Block_arrayctor_loop_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_digit_load_loc_chann, "ap_channel_done_digit_load_loc_chann");
    sc_trace(mVcdFile, digit_load_loc_chann_full_n, "digit_load_loc_chann_full_n");
    sc_trace(mVcdFile, p_src_mlp_cpp_lin_U0_ap_start, "p_src_mlp_cpp_lin_U0_ap_start");
    sc_trace(mVcdFile, p_src_mlp_cpp_lin_U0_ap_done, "p_src_mlp_cpp_lin_U0_ap_done");
    sc_trace(mVcdFile, p_src_mlp_cpp_lin_U0_ap_continue, "p_src_mlp_cpp_lin_U0_ap_continue");
    sc_trace(mVcdFile, p_src_mlp_cpp_lin_U0_ap_idle, "p_src_mlp_cpp_lin_U0_ap_idle");
    sc_trace(mVcdFile, p_src_mlp_cpp_lin_U0_ap_ready, "p_src_mlp_cpp_lin_U0_ap_ready");
    sc_trace(mVcdFile, p_src_mlp_cpp_lin_U0_ap_return, "p_src_mlp_cpp_lin_U0_ap_return");
    sc_trace(mVcdFile, tmp_p_src_mlp_cpp_lin_fu_117_ap_return, "tmp_p_src_mlp_cpp_lin_fu_117_ap_return");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, bias_added_V_i_full_n, "bias_added_V_i_full_n");
    sc_trace(mVcdFile, bias_added_V_t_empty_n, "bias_added_V_t_empty_n");
    sc_trace(mVcdFile, L1_no_activ_V_i_full_n, "L1_no_activ_V_i_full_n");
    sc_trace(mVcdFile, L1_no_activ_V_t_empty_n, "L1_no_activ_V_t_empty_n");
    sc_trace(mVcdFile, L1_activ_V_i_full_n, "L1_activ_V_i_full_n");
    sc_trace(mVcdFile, L1_activ_V_t_empty_n, "L1_activ_V_t_empty_n");
    sc_trace(mVcdFile, L2_bias_added_V_i_full_n, "L2_bias_added_V_i_full_n");
    sc_trace(mVcdFile, L2_bias_added_V_t_empty_n, "L2_bias_added_V_t_empty_n");
    sc_trace(mVcdFile, L2_out_V_i_full_n, "L2_out_V_i_full_n");
    sc_trace(mVcdFile, L2_out_V_t_empty_n, "L2_out_V_t_empty_n");
    sc_trace(mVcdFile, L2_out_activ_V_i_full_n, "L2_out_activ_V_i_full_n");
    sc_trace(mVcdFile, L2_out_activ_V_t_empty_n, "L2_out_activ_V_t_empty_n");
    sc_trace(mVcdFile, digit_dout, "digit_dout");
    sc_trace(mVcdFile, digit_empty_n, "digit_empty_n");
    sc_trace(mVcdFile, digit_load_loc_chann_dout, "digit_load_loc_chann_dout");
    sc_trace(mVcdFile, digit_load_loc_chann_empty_n, "digit_load_loc_chann_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, ap_sync_reg_mvprod_layer_1_U0_ap_ready, "ap_sync_reg_mvprod_layer_1_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_mvprod_layer_1_U0_ap_ready, "ap_sync_mvprod_layer_1_U0_ap_ready");
    sc_trace(mVcdFile, mvprod_layer_1_U0_ap_ready_count, "mvprod_layer_1_U0_ap_ready_count");
    sc_trace(mVcdFile, ap_sync_reg_mvprod_layer_2_U0_ap_ready, "ap_sync_reg_mvprod_layer_2_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_mvprod_layer_2_U0_ap_ready, "ap_sync_mvprod_layer_2_U0_ap_ready");
    sc_trace(mVcdFile, mvprod_layer_2_U0_ap_ready_count, "mvprod_layer_2_U0_ap_ready_count");
    sc_trace(mVcdFile, ap_sync_reg_add_bias_pre_L1_U0_ap_ready, "ap_sync_reg_add_bias_pre_L1_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_add_bias_pre_L1_U0_ap_ready, "ap_sync_add_bias_pre_L1_U0_ap_ready");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_ap_ready_count, "add_bias_pre_L1_U0_ap_ready_count");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_start_full_n, "add_bias_pre_L1_U0_start_full_n");
    sc_trace(mVcdFile, add_bias_pre_L1_U0_start_write, "add_bias_pre_L1_U0_start_write");
    sc_trace(mVcdFile, mvprod_layer_1_U0_start_full_n, "mvprod_layer_1_U0_start_full_n");
    sc_trace(mVcdFile, mvprod_layer_1_U0_start_write, "mvprod_layer_1_U0_start_write");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_start_full_n, "sigmoid_activation_L_1_U0_start_full_n");
    sc_trace(mVcdFile, sigmoid_activation_L_1_U0_start_write, "sigmoid_activation_L_1_U0_start_write");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_start_full_n, "add_bias_pre_L2_U0_start_full_n");
    sc_trace(mVcdFile, add_bias_pre_L2_U0_start_write, "add_bias_pre_L2_U0_start_write");
    sc_trace(mVcdFile, mvprod_layer_2_U0_start_full_n, "mvprod_layer_2_U0_start_full_n");
    sc_trace(mVcdFile, mvprod_layer_2_U0_start_write, "mvprod_layer_2_U0_start_write");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_start_full_n, "sigmoid_activation_L_U0_start_full_n");
    sc_trace(mVcdFile, sigmoid_activation_L_U0_start_write, "sigmoid_activation_L_U0_start_write");
    sc_trace(mVcdFile, classify_U0_start_full_n, "classify_U0_start_full_n");
    sc_trace(mVcdFile, classify_U0_start_write, "classify_U0_start_write");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_start_full_n, "Block_arrayctor_loop_U0_start_full_n");
    sc_trace(mVcdFile, Block_arrayctor_loop_U0_start_write, "Block_arrayctor_loop_U0_start_write");
    sc_trace(mVcdFile, p_src_mlp_cpp_lin_U0_start_full_n, "p_src_mlp_cpp_lin_U0_start_full_n");
    sc_trace(mVcdFile, p_src_mlp_cpp_lin_U0_start_write, "p_src_mlp_cpp_lin_U0_start_write");
#endif

    }
    mHdltvinHandle.open("mlp.hdltvin.dat");
    mHdltvoutHandle.open("mlp.hdltvout.dat");
}

mlp::~mlp() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete bias_added_V_U;
    delete L1_no_activ_V_U;
    delete L1_activ_V_U;
    delete L2_bias_added_V_U;
    delete L2_out_V_U;
    delete L2_out_activ_V_U;
    delete add_bias_pre_L1_U0;
    delete mvprod_layer_1_U0;
    delete sigmoid_activation_L_1_U0;
    delete add_bias_pre_L2_U0;
    delete mvprod_layer_2_U0;
    delete sigmoid_activation_L_U0;
    delete classify_U0;
    delete Block_arrayctor_loop_U0;
    delete p_src_mlp_cpp_lin_U0;
    delete digit_U;
    delete digit_load_loc_chann_U;
}

void mlp::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_logic_1;
}

void mlp::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void mlp::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv18_0;
}

void mlp::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, add_bias_pre_L1_U0_ap_ready.read()))) {
        add_bias_pre_L1_U0_ap_ready_count = (!add_bias_pre_L1_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(add_bias_pre_L1_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, add_bias_pre_L1_U0_ap_ready.read()))) {
        add_bias_pre_L1_U0_ap_ready_count = (!add_bias_pre_L1_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(add_bias_pre_L1_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_add_bias_pre_L1_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_add_bias_pre_L1_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_add_bias_pre_L1_U0_ap_ready = ap_sync_add_bias_pre_L1_U0_ap_ready.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_mvprod_layer_1_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_mvprod_layer_1_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_mvprod_layer_1_U0_ap_ready = ap_sync_mvprod_layer_1_U0_ap_ready.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_mvprod_layer_2_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_mvprod_layer_2_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_mvprod_layer_2_U0_ap_ready = ap_sync_mvprod_layer_2_U0_ap_ready.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_0, mvprod_layer_1_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()))) {
        mvprod_layer_1_U0_ap_ready_count = (!mvprod_layer_1_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(mvprod_layer_1_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, mvprod_layer_1_U0_ap_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()))) {
        mvprod_layer_1_U0_ap_ready_count = (!mvprod_layer_1_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(mvprod_layer_1_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, mvprod_layer_2_U0_ap_ready.read()))) {
        mvprod_layer_2_U0_ap_ready_count = (!mvprod_layer_2_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(mvprod_layer_2_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, mvprod_layer_2_U0_ap_ready.read()))) {
        mvprod_layer_2_U0_ap_ready_count = (!mvprod_layer_2_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(mvprod_layer_2_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
}

void mlp::thread_Block_arrayctor_loop_U0_ap_continue() {
    Block_arrayctor_loop_U0_ap_continue = digit_load_loc_chann_full_n.read();
}

void mlp::thread_Block_arrayctor_loop_U0_ap_start() {
    Block_arrayctor_loop_U0_ap_start = digit_empty_n.read();
}

void mlp::thread_Block_arrayctor_loop_U0_start_full_n() {
    Block_arrayctor_loop_U0_start_full_n = ap_const_logic_1;
}

void mlp::thread_Block_arrayctor_loop_U0_start_write() {
    Block_arrayctor_loop_U0_start_write = ap_const_logic_0;
}

void mlp::thread_add_bias_pre_L1_U0_ap_continue() {
    add_bias_pre_L1_U0_ap_continue = bias_added_V_i_full_n.read();
}

void mlp::thread_add_bias_pre_L1_U0_ap_start() {
    add_bias_pre_L1_U0_ap_start = (ap_start.read() & (ap_sync_reg_add_bias_pre_L1_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void mlp::thread_add_bias_pre_L1_U0_result_V_full_n() {
    add_bias_pre_L1_U0_result_V_full_n = bias_added_V_i_full_n.read();
}

void mlp::thread_add_bias_pre_L1_U0_start_full_n() {
    add_bias_pre_L1_U0_start_full_n = ap_const_logic_1;
}

void mlp::thread_add_bias_pre_L1_U0_start_write() {
    add_bias_pre_L1_U0_start_write = ap_const_logic_0;
}

void mlp::thread_add_bias_pre_L2_U0_ap_continue() {
    add_bias_pre_L2_U0_ap_continue = L2_bias_added_V_i_full_n.read();
}

void mlp::thread_add_bias_pre_L2_U0_ap_start() {
    add_bias_pre_L2_U0_ap_start = L1_activ_V_t_empty_n.read();
}

void mlp::thread_add_bias_pre_L2_U0_result_V_full_n() {
    add_bias_pre_L2_U0_result_V_full_n = L2_bias_added_V_i_full_n.read();
}

void mlp::thread_add_bias_pre_L2_U0_start_full_n() {
    add_bias_pre_L2_U0_start_full_n = ap_const_logic_1;
}

void mlp::thread_add_bias_pre_L2_U0_start_write() {
    add_bias_pre_L2_U0_start_write = ap_const_logic_0;
}

void mlp::thread_ap_channel_done_L1_activ_V() {
    ap_channel_done_L1_activ_V = sigmoid_activation_L_1_U0_ap_done.read();
}

void mlp::thread_ap_channel_done_L1_no_activ_V() {
    ap_channel_done_L1_no_activ_V = mvprod_layer_1_U0_ap_done.read();
}

void mlp::thread_ap_channel_done_L2_bias_added_V() {
    ap_channel_done_L2_bias_added_V = add_bias_pre_L2_U0_ap_done.read();
}

void mlp::thread_ap_channel_done_L2_out_V() {
    ap_channel_done_L2_out_V = mvprod_layer_2_U0_ap_done.read();
}

void mlp::thread_ap_channel_done_L2_out_activ_V() {
    ap_channel_done_L2_out_activ_V = sigmoid_activation_L_U0_ap_done.read();
}

void mlp::thread_ap_channel_done_bias_added_V() {
    ap_channel_done_bias_added_V = add_bias_pre_L1_U0_ap_done.read();
}

void mlp::thread_ap_channel_done_digit() {
    ap_channel_done_digit = classify_U0_ap_done.read();
}

void mlp::thread_ap_channel_done_digit_load_loc_chann() {
    ap_channel_done_digit_load_loc_chann = Block_arrayctor_loop_U0_ap_done.read();
}

void mlp::thread_ap_done() {
    ap_done = p_src_mlp_cpp_lin_U0_ap_done.read();
}

void mlp::thread_ap_idle() {
    ap_idle = (add_bias_pre_L1_U0_ap_idle.read() & mvprod_layer_1_U0_ap_idle.read() & sigmoid_activation_L_1_U0_ap_idle.read() & add_bias_pre_L2_U0_ap_idle.read() & mvprod_layer_2_U0_ap_idle.read() & sigmoid_activation_L_U0_ap_idle.read() & classify_U0_ap_idle.read() & Block_arrayctor_loop_U0_ap_idle.read() & p_src_mlp_cpp_lin_U0_ap_idle.read() & (bias_added_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (L1_no_activ_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (L1_activ_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (L2_bias_added_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (L2_out_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (L2_out_activ_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (digit_empty_n.read() ^ 
  ap_const_logic_1) & (digit_load_loc_chann_empty_n.read() ^ 
  ap_const_logic_1));
}

void mlp::thread_ap_ready() {
    ap_ready = ap_sync_ready.read();
}

void mlp::thread_ap_return() {
    ap_return = p_src_mlp_cpp_lin_U0_ap_return.read();
}

void mlp::thread_ap_sync_add_bias_pre_L1_U0_ap_ready() {
    ap_sync_add_bias_pre_L1_U0_ap_ready = (add_bias_pre_L1_U0_ap_ready.read() | ap_sync_reg_add_bias_pre_L1_U0_ap_ready.read());
}

void mlp::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void mlp::thread_ap_sync_done() {
    ap_sync_done = p_src_mlp_cpp_lin_U0_ap_done.read();
}

void mlp::thread_ap_sync_mvprod_layer_1_U0_ap_ready() {
    ap_sync_mvprod_layer_1_U0_ap_ready = (mvprod_layer_1_U0_ap_ready.read() | ap_sync_reg_mvprod_layer_1_U0_ap_ready.read());
}

void mlp::thread_ap_sync_mvprod_layer_2_U0_ap_ready() {
    ap_sync_mvprod_layer_2_U0_ap_ready = (mvprod_layer_2_U0_ap_ready.read() | ap_sync_reg_mvprod_layer_2_U0_ap_ready.read());
}

void mlp::thread_ap_sync_ready() {
    ap_sync_ready = (ap_sync_mvprod_layer_1_U0_ap_ready.read() & ap_sync_mvprod_layer_2_U0_ap_ready.read() & ap_sync_add_bias_pre_L1_U0_ap_ready.read());
}

void mlp::thread_classify_U0_ap_continue() {
    classify_U0_ap_continue = digit_full_n.read();
}

void mlp::thread_classify_U0_ap_start() {
    classify_U0_ap_start = L2_out_activ_V_t_empty_n.read();
}

void mlp::thread_classify_U0_start_full_n() {
    classify_U0_start_full_n = ap_const_logic_1;
}

void mlp::thread_classify_U0_start_write() {
    classify_U0_start_write = ap_const_logic_0;
}

void mlp::thread_input_V_address0() {
    input_V_address0 = add_bias_pre_L1_U0_input_V_address0.read();
}

void mlp::thread_input_V_address1() {
    input_V_address1 = ap_const_lv9_0;
}

void mlp::thread_input_V_ce0() {
    input_V_ce0 = add_bias_pre_L1_U0_input_V_ce0.read();
}

void mlp::thread_input_V_ce1() {
    input_V_ce1 = ap_const_logic_0;
}

void mlp::thread_input_V_d0() {
    input_V_d0 = ap_const_lv18_0;
}

void mlp::thread_input_V_d1() {
    input_V_d1 = ap_const_lv18_0;
}

void mlp::thread_input_V_we0() {
    input_V_we0 = ap_const_logic_0;
}

void mlp::thread_input_V_we1() {
    input_V_we1 = ap_const_logic_0;
}

void mlp::thread_mvprod_layer_1_U0_ap_continue() {
    mvprod_layer_1_U0_ap_continue = L1_no_activ_V_i_full_n.read();
}

void mlp::thread_mvprod_layer_1_U0_ap_start() {
    mvprod_layer_1_U0_ap_start = (bias_added_V_t_empty_n.read() & ap_start.read() & (ap_sync_reg_mvprod_layer_1_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void mlp::thread_mvprod_layer_1_U0_result_V_full_n() {
    mvprod_layer_1_U0_result_V_full_n = L1_no_activ_V_i_full_n.read();
}

void mlp::thread_mvprod_layer_1_U0_start_full_n() {
    mvprod_layer_1_U0_start_full_n = ap_const_logic_1;
}

void mlp::thread_mvprod_layer_1_U0_start_write() {
    mvprod_layer_1_U0_start_write = ap_const_logic_0;
}

void mlp::thread_mvprod_layer_2_U0_ap_continue() {
    mvprod_layer_2_U0_ap_continue = L2_out_V_i_full_n.read();
}

void mlp::thread_mvprod_layer_2_U0_ap_start() {
    mvprod_layer_2_U0_ap_start = (ap_start.read() & L2_bias_added_V_t_empty_n.read() & (ap_sync_reg_mvprod_layer_2_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void mlp::thread_mvprod_layer_2_U0_result_V_full_n() {
    mvprod_layer_2_U0_result_V_full_n = L2_out_V_i_full_n.read();
}

void mlp::thread_mvprod_layer_2_U0_start_full_n() {
    mvprod_layer_2_U0_start_full_n = ap_const_logic_1;
}

void mlp::thread_mvprod_layer_2_U0_start_write() {
    mvprod_layer_2_U0_start_write = ap_const_logic_0;
}

void mlp::thread_p_src_mlp_cpp_lin_U0_ap_continue() {
    p_src_mlp_cpp_lin_U0_ap_continue = ap_const_logic_1;
}

void mlp::thread_p_src_mlp_cpp_lin_U0_ap_start() {
    p_src_mlp_cpp_lin_U0_ap_start = digit_load_loc_chann_empty_n.read();
}

void mlp::thread_p_src_mlp_cpp_lin_U0_start_full_n() {
    p_src_mlp_cpp_lin_U0_start_full_n = ap_const_logic_1;
}

void mlp::thread_p_src_mlp_cpp_lin_U0_start_write() {
    p_src_mlp_cpp_lin_U0_start_write = ap_const_logic_0;
}

void mlp::thread_sigmoid_activation_L_1_U0_ap_continue() {
    sigmoid_activation_L_1_U0_ap_continue = L1_activ_V_i_full_n.read();
}

void mlp::thread_sigmoid_activation_L_1_U0_ap_start() {
    sigmoid_activation_L_1_U0_ap_start = L1_no_activ_V_t_empty_n.read();
}

void mlp::thread_sigmoid_activation_L_1_U0_result_V_full_n() {
    sigmoid_activation_L_1_U0_result_V_full_n = L1_activ_V_i_full_n.read();
}

void mlp::thread_sigmoid_activation_L_1_U0_start_full_n() {
    sigmoid_activation_L_1_U0_start_full_n = ap_const_logic_1;
}

void mlp::thread_sigmoid_activation_L_1_U0_start_write() {
    sigmoid_activation_L_1_U0_start_write = ap_const_logic_0;
}

void mlp::thread_sigmoid_activation_L_U0_ap_continue() {
    sigmoid_activation_L_U0_ap_continue = L2_out_activ_V_i_full_n.read();
}

void mlp::thread_sigmoid_activation_L_U0_ap_start() {
    sigmoid_activation_L_U0_ap_start = L2_out_V_t_empty_n.read();
}

void mlp::thread_sigmoid_activation_L_U0_result_V_full_n() {
    sigmoid_activation_L_U0_result_V_full_n = L2_out_activ_V_i_full_n.read();
}

void mlp::thread_sigmoid_activation_L_U0_start_full_n() {
    sigmoid_activation_L_U0_start_full_n = ap_const_logic_1;
}

void mlp::thread_sigmoid_activation_L_U0_start_write() {
    sigmoid_activation_L_U0_start_write = ap_const_logic_0;
}

void mlp::thread_tmp_p_src_mlp_cpp_lin_fu_117_ap_return() {
    tmp_p_src_mlp_cpp_lin_fu_117_ap_return = ap_const_lv32_0;
}

void mlp::thread_weights_L1_V_address0() {
    weights_L1_V_address0 = mvprod_layer_1_U0_matrix_V_address0.read();
}

void mlp::thread_weights_L1_V_address1() {
    weights_L1_V_address1 = ap_const_lv14_0;
}

void mlp::thread_weights_L1_V_ce0() {
    weights_L1_V_ce0 = mvprod_layer_1_U0_matrix_V_ce0.read();
}

void mlp::thread_weights_L1_V_ce1() {
    weights_L1_V_ce1 = ap_const_logic_0;
}

void mlp::thread_weights_L1_V_d0() {
    weights_L1_V_d0 = ap_const_lv18_0;
}

void mlp::thread_weights_L1_V_d1() {
    weights_L1_V_d1 = ap_const_lv18_0;
}

void mlp::thread_weights_L1_V_we0() {
    weights_L1_V_we0 = ap_const_logic_0;
}

void mlp::thread_weights_L1_V_we1() {
    weights_L1_V_we1 = ap_const_logic_0;
}

void mlp::thread_weights_L2_V_address0() {
    weights_L2_V_address0 = mvprod_layer_2_U0_matrix_V_address0.read();
}

void mlp::thread_weights_L2_V_address1() {
    weights_L2_V_address1 = ap_const_lv9_0;
}

void mlp::thread_weights_L2_V_ce0() {
    weights_L2_V_ce0 = mvprod_layer_2_U0_matrix_V_ce0.read();
}

void mlp::thread_weights_L2_V_ce1() {
    weights_L2_V_ce1 = ap_const_logic_0;
}

void mlp::thread_weights_L2_V_d0() {
    weights_L2_V_d0 = ap_const_lv18_0;
}

void mlp::thread_weights_L2_V_d1() {
    weights_L2_V_d1 = ap_const_lv18_0;
}

void mlp::thread_weights_L2_V_we0() {
    weights_L2_V_we0 = ap_const_logic_0;
}

void mlp::thread_weights_L2_V_we1() {
    weights_L2_V_we1 = ap_const_logic_0;
}

void mlp::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"weights_L1_V_address0\" :  \"" << weights_L1_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L1_V_ce0\" :  \"" << weights_L1_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L1_V_d0\" :  \"" << weights_L1_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weights_L1_V_q0\" :  \"" << weights_L1_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L1_V_we0\" :  \"" << weights_L1_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L1_V_address1\" :  \"" << weights_L1_V_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L1_V_ce1\" :  \"" << weights_L1_V_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L1_V_d1\" :  \"" << weights_L1_V_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weights_L1_V_q1\" :  \"" << weights_L1_V_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L1_V_we1\" :  \"" << weights_L1_V_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L2_V_address0\" :  \"" << weights_L2_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L2_V_ce0\" :  \"" << weights_L2_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L2_V_d0\" :  \"" << weights_L2_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weights_L2_V_q0\" :  \"" << weights_L2_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L2_V_we0\" :  \"" << weights_L2_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L2_V_address1\" :  \"" << weights_L2_V_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L2_V_ce1\" :  \"" << weights_L2_V_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L2_V_d1\" :  \"" << weights_L2_V_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weights_L2_V_q1\" :  \"" << weights_L2_V_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_L2_V_we1\" :  \"" << weights_L2_V_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_address0\" :  \"" << input_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_ce0\" :  \"" << input_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_d0\" :  \"" << input_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_V_q0\" :  \"" << input_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_we0\" :  \"" << input_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_address1\" :  \"" << input_V_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_ce1\" :  \"" << input_V_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_d1\" :  \"" << input_V_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_V_q1\" :  \"" << input_V_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_we1\" :  \"" << input_V_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

