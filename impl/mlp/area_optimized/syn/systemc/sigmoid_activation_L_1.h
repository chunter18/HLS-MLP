// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sigmoid_activation_L_1_HH_
#define _sigmoid_activation_L_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mlp_mul_mul_18s_1dEe.h"

namespace ap_rtl {

struct sigmoid_activation_L_1 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > input_V_address0;
    sc_out< sc_logic > input_V_ce0;
    sc_in< sc_lv<18> > input_V_q0;
    sc_out< sc_lv<5> > result_V_address0;
    sc_out< sc_logic > result_V_ce0;
    sc_out< sc_logic > result_V_we0;
    sc_out< sc_lv<18> > result_V_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    sigmoid_activation_L_1(sc_module_name name);
    SC_HAS_PROCESS(sigmoid_activation_L_1);

    ~sigmoid_activation_L_1();

    sc_trace_file* mVcdFile;

    mlp_mul_mul_18s_1dEe<1,3,18,18,31>* mlp_mul_mul_18s_1dEe_U10;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_1_fu_109_p2;
    sc_signal< sc_lv<5> > i_1_reg_226;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_s_fu_115_p1;
    sc_signal< sc_lv<64> > tmp_s_reg_231;
    sc_signal< sc_lv<1> > tmp_fu_103_p2;
    sc_signal< sc_lv<18> > p_Val2_s_reg_242;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_1_reg_248;
    sc_signal< sc_lv<18> > p_Val2_1_fu_133_p3;
    sc_signal< sc_lv<18> > p_Val2_1_reg_253;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_2_fu_139_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_258;
    sc_signal< sc_lv<14> > tmp_6_reg_263;
    sc_signal< sc_lv<31> > OP1_V_cast_fu_155_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<31> > grp_fu_217_p2;
    sc_signal< sc_lv<31> > tmp_4_reg_274;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<18> > p_Val2_9_fu_165_p2;
    sc_signal< sc_lv<18> > p_Val2_9_reg_279;
    sc_signal< sc_lv<18> > p_Val2_3_fu_203_p3;
    sc_signal< sc_lv<18> > p_Val2_3_reg_284;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<5> > i_reg_92;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<5> > result_V_addr_gep_fu_84_p3;
    sc_signal< sc_lv<18> > p_Val2_s_17_fu_211_p2;
    sc_signal< sc_lv<18> > p_Val2_8_fu_128_p2;
    sc_signal< sc_lv<18> > tmp_3_fu_158_p3;
    sc_signal< sc_lv<26> > tmp_5_fu_171_p3;
    sc_signal< sc_lv<26> > tmp_22_cast_fu_178_p4;
    sc_signal< sc_lv<26> > p_Val2_2_fu_187_p2;
    sc_signal< sc_lv<18> > tmp_9_fu_193_p4;
    sc_signal< sc_lv<18> > grp_fu_217_p0;
    sc_signal< sc_lv<18> > grp_fu_217_p1;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_19;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<18> ap_const_lv18_0;
    static const sc_lv<18> ap_const_lv18_4000;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<18> ap_const_lv18_8000;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<18> ap_const_lv18_10000;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_OP1_V_cast_fu_155_p1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_fu_217_p0();
    void thread_grp_fu_217_p1();
    void thread_i_1_fu_109_p2();
    void thread_input_V_address0();
    void thread_input_V_ce0();
    void thread_p_Val2_1_fu_133_p3();
    void thread_p_Val2_2_fu_187_p2();
    void thread_p_Val2_3_fu_203_p3();
    void thread_p_Val2_8_fu_128_p2();
    void thread_p_Val2_9_fu_165_p2();
    void thread_p_Val2_s_17_fu_211_p2();
    void thread_result_V_addr_gep_fu_84_p3();
    void thread_result_V_address0();
    void thread_result_V_ce0();
    void thread_result_V_d0();
    void thread_result_V_we0();
    void thread_tmp_22_cast_fu_178_p4();
    void thread_tmp_2_fu_139_p2();
    void thread_tmp_3_fu_158_p3();
    void thread_tmp_5_fu_171_p3();
    void thread_tmp_9_fu_193_p4();
    void thread_tmp_fu_103_p2();
    void thread_tmp_s_fu_115_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
