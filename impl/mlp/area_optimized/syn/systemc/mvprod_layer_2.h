// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mvprod_layer_2_HH_
#define _mvprod_layer_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mlp_mac_muladd_4neOg.h"
#include "mlp_mul_mul_18s_1fYi.h"

namespace ap_rtl {

struct mvprod_layer_2 : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > matrix_V_address0;
    sc_out< sc_logic > matrix_V_ce0;
    sc_in< sc_lv<18> > matrix_V_q0;
    sc_out< sc_lv<5> > input_V_address0;
    sc_out< sc_logic > input_V_ce0;
    sc_in< sc_lv<18> > input_V_q0;
    sc_out< sc_lv<4> > result_V_address0;
    sc_out< sc_logic > result_V_ce0;
    sc_out< sc_logic > result_V_we0;
    sc_out< sc_lv<18> > result_V_d0;


    // Module declarations
    mvprod_layer_2(sc_module_name name);
    SC_HAS_PROCESS(mvprod_layer_2);

    ~mvprod_layer_2();

    sc_trace_file* mVcdFile;

    mlp_mac_muladd_4neOg<1,3,4,6,5,9>* mlp_mac_muladd_4neOg_U16;
    mlp_mul_mul_18s_1fYi<1,3,18,18,36>* mlp_mul_mul_18s_1fYi_U17;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_345;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_345_pp0_iter3_reg;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > tmp_7_reg_105;
    sc_signal< sc_lv<5> > n4_reg_119;
    sc_signal< sc_lv<4> > m2_reg_133;
    sc_signal< sc_lv<9> > indvar_flatten1_reg_147;
    sc_signal< sc_lv<18> > acc_s_reg_161;
    sc_signal< sc_lv<5> > n_mid2_fu_181_p3;
    sc_signal< sc_lv<5> > n_mid2_reg_311;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_lv<5> > n_mid2_reg_311_pp0_iter1_reg;
    sc_signal< sc_lv<5> > n_mid2_reg_311_pp0_iter2_reg;
    sc_signal< sc_lv<4> > m_mid2_fu_189_p3;
    sc_signal< sc_lv<4> > m_mid2_reg_319;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > m_mid2_reg_319_pp0_iter1_reg;
    sc_signal< sc_lv<4> > m_mid2_reg_319_pp0_iter2_reg;
    sc_signal< sc_lv<4> > m_mid2_reg_319_pp0_iter3_reg;
    sc_signal< sc_lv<4> > m_mid2_reg_319_pp0_iter4_reg;
    sc_signal< sc_lv<4> > m_mid2_reg_319_pp0_iter5_reg;
    sc_signal< sc_lv<4> > m_mid2_reg_319_pp0_iter6_reg;
    sc_signal< sc_lv<4> > m_mid2_reg_319_pp0_iter7_reg;
    sc_signal< sc_lv<9> > indvar_flatten_next_fu_201_p2;
    sc_signal< sc_lv<9> > indvar_flatten_next_reg_330;
    sc_signal< sc_lv<5> > n_fu_207_p2;
    sc_signal< sc_lv<5> > n_reg_335;
    sc_signal< sc_lv<1> > tmp_s_fu_213_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_340;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_219_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_345_pp0_iter1_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_345_pp0_iter2_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_345_pp0_iter4_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_345_pp0_iter5_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_345_pp0_iter6_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_345_pp0_iter7_reg;
    sc_signal< sc_lv<9> > grp_fu_297_p3;
    sc_signal< sc_lv<9> > tmp_8_reg_349;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > tmp_1_fu_228_p2;
    sc_signal< sc_lv<1> > tmp_1_reg_354;
    sc_signal< sc_lv<1> > tmp_1_reg_354_pp0_iter4_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_354_pp0_iter5_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_354_pp0_iter6_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_354_pp0_iter7_reg;
    sc_signal< sc_lv<1> > tmp_6_fu_241_p2;
    sc_signal< sc_lv<1> > tmp_6_reg_369;
    sc_signal< sc_lv<1> > tmp_6_reg_369_pp0_iter4_reg;
    sc_signal< sc_lv<1> > tmp_6_reg_369_pp0_iter5_reg;
    sc_signal< sc_lv<1> > tmp_6_reg_369_pp0_iter6_reg;
    sc_signal< sc_lv<1> > tmp_6_reg_369_pp0_iter7_reg;
    sc_signal< sc_lv<18> > input_V_load_reg_373;
    sc_signal< sc_lv<18> > matrix_V_load_reg_378;
    sc_signal< sc_lv<36> > grp_fu_305_p2;
    sc_signal< sc_lv<36> > p_Val2_s_reg_393;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > rewind_ap_ready;
    sc_signal< sc_logic > rewind_ap_ready_reg;
    sc_signal< sc_logic > rewind_enable;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_lv<1> > ap_phi_mux_tmp_7_phi_fu_109_p6;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<5> > ap_phi_mux_n4_phi_fu_123_p6;
    sc_signal< sc_lv<4> > ap_phi_mux_m2_phi_fu_137_p6;
    sc_signal< sc_lv<9> > ap_phi_mux_indvar_flatten1_phi_fu_151_p6;
    sc_signal< sc_lv<64> > tmp_11_cast_fu_237_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_233_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_252_p1;
    sc_signal< sc_lv<4> > m_fu_175_p2;
    sc_signal< sc_lv<18> > tmp_10_fu_256_p3;
    sc_signal< sc_lv<35> > tmp_4_fu_263_p3;
    sc_signal< sc_lv<37> > tmp_5_fu_275_p1;
    sc_signal< sc_lv<37> > tmp_29_cast_fu_271_p1;
    sc_signal< sc_lv<37> > p_Val2_5_fu_278_p2;
    sc_signal< sc_lv<4> > grp_fu_297_p0;
    sc_signal< sc_lv<6> > grp_fu_297_p1;
    sc_signal< sc_lv<5> > grp_fu_297_p2;
    sc_signal< sc_logic > grp_fu_297_ce;
    sc_signal< sc_logic > grp_fu_305_ce;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to7;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<9> > grp_fu_297_p00;
    sc_signal< sc_lv<9> > grp_fu_297_p20;
    sc_signal< bool > ap_condition_194;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<18> ap_const_lv18_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_1A;
    static const sc_lv<9> ap_const_lv9_103;
    static const sc_lv<5> ap_const_lv5_19;
    static const sc_lv<17> ap_const_lv17_0;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_22;
    static const sc_lv<9> ap_const_lv9_1A;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_194();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to7();
    void thread_ap_phi_mux_indvar_flatten1_phi_fu_151_p6();
    void thread_ap_phi_mux_m2_phi_fu_137_p6();
    void thread_ap_phi_mux_n4_phi_fu_123_p6();
    void thread_ap_phi_mux_tmp_7_phi_fu_109_p6();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_exitcond_flatten_fu_219_p2();
    void thread_grp_fu_297_ce();
    void thread_grp_fu_297_p0();
    void thread_grp_fu_297_p00();
    void thread_grp_fu_297_p1();
    void thread_grp_fu_297_p2();
    void thread_grp_fu_297_p20();
    void thread_grp_fu_305_ce();
    void thread_indvar_flatten_next_fu_201_p2();
    void thread_input_V_address0();
    void thread_input_V_ce0();
    void thread_internal_ap_ready();
    void thread_m_fu_175_p2();
    void thread_m_mid2_fu_189_p3();
    void thread_matrix_V_address0();
    void thread_matrix_V_ce0();
    void thread_n_fu_207_p2();
    void thread_n_mid2_fu_181_p3();
    void thread_p_Val2_5_fu_278_p2();
    void thread_result_V_address0();
    void thread_result_V_ce0();
    void thread_result_V_d0();
    void thread_result_V_we0();
    void thread_rewind_ap_ready();
    void thread_rewind_enable();
    void thread_tmp_10_fu_256_p3();
    void thread_tmp_11_cast_fu_237_p1();
    void thread_tmp_1_fu_228_p2();
    void thread_tmp_29_cast_fu_271_p1();
    void thread_tmp_2_fu_233_p1();
    void thread_tmp_3_fu_252_p1();
    void thread_tmp_4_fu_263_p3();
    void thread_tmp_5_fu_275_p1();
    void thread_tmp_6_fu_241_p2();
    void thread_tmp_s_fu_213_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
