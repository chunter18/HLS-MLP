// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mlp_HH_
#define _mlp_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "add_bias_pre_L1.h"
#include "mvprod_layer_1.h"
#include "sigmoid_activation_L_1.h"
#include "add_bias_pre_L2.h"
#include "mvprod_layer_2.h"
#include "sigmoid_activation_L.h"
#include "classify.h"
#include "Block_arrayctor_loop.h"
#include "p_src_mlp_cpp_lin.h"
#include "mlp_bias_added_V.h"
#include "mlp_L1_no_activ_V.h"
#include "mlp_L2_bias_added_V.h"
#include "mlp_L2_out_V.h"
#include "fifo_w32_d2_A.h"

namespace ap_rtl {

struct mlp : public sc_module {
    // Port declarations 37
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<14> > weights_L1_V_address0;
    sc_out< sc_logic > weights_L1_V_ce0;
    sc_out< sc_lv<18> > weights_L1_V_d0;
    sc_in< sc_lv<18> > weights_L1_V_q0;
    sc_out< sc_logic > weights_L1_V_we0;
    sc_out< sc_lv<14> > weights_L1_V_address1;
    sc_out< sc_logic > weights_L1_V_ce1;
    sc_out< sc_lv<18> > weights_L1_V_d1;
    sc_in< sc_lv<18> > weights_L1_V_q1;
    sc_out< sc_logic > weights_L1_V_we1;
    sc_out< sc_lv<9> > weights_L2_V_address0;
    sc_out< sc_logic > weights_L2_V_ce0;
    sc_out< sc_lv<18> > weights_L2_V_d0;
    sc_in< sc_lv<18> > weights_L2_V_q0;
    sc_out< sc_logic > weights_L2_V_we0;
    sc_out< sc_lv<9> > weights_L2_V_address1;
    sc_out< sc_logic > weights_L2_V_ce1;
    sc_out< sc_lv<18> > weights_L2_V_d1;
    sc_in< sc_lv<18> > weights_L2_V_q1;
    sc_out< sc_logic > weights_L2_V_we1;
    sc_out< sc_lv<9> > input_V_address0;
    sc_out< sc_logic > input_V_ce0;
    sc_out< sc_lv<18> > input_V_d0;
    sc_in< sc_lv<18> > input_V_q0;
    sc_out< sc_logic > input_V_we0;
    sc_out< sc_lv<9> > input_V_address1;
    sc_out< sc_logic > input_V_ce1;
    sc_out< sc_lv<18> > input_V_d1;
    sc_in< sc_lv<18> > input_V_q1;
    sc_out< sc_logic > input_V_we1;
    sc_out< sc_lv<32> > ap_return;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const2;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<18> > ap_var_for_const1;


    // Module declarations
    mlp(sc_module_name name);
    SC_HAS_PROCESS(mlp);

    ~mlp();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mlp_bias_added_V* bias_added_V_U;
    mlp_L1_no_activ_V* L1_no_activ_V_U;
    mlp_L1_no_activ_V* L1_activ_V_U;
    mlp_L2_bias_added_V* L2_bias_added_V_U;
    mlp_L2_out_V* L2_out_V_U;
    mlp_L2_out_V* L2_out_activ_V_U;
    add_bias_pre_L1* add_bias_pre_L1_U0;
    mvprod_layer_1* mvprod_layer_1_U0;
    sigmoid_activation_L_1* sigmoid_activation_L_1_U0;
    add_bias_pre_L2* add_bias_pre_L2_U0;
    mvprod_layer_2* mvprod_layer_2_U0;
    sigmoid_activation_L* sigmoid_activation_L_U0;
    classify* classify_U0;
    Block_arrayctor_loop* Block_arrayctor_loop_U0;
    p_src_mlp_cpp_lin* p_src_mlp_cpp_lin_U0;
    fifo_w32_d2_A* digit_U;
    fifo_w32_d2_A* digit_load_loc_chann_U;
    sc_signal< sc_lv<18> > bias_added_V_i_q0;
    sc_signal< sc_lv<18> > bias_added_V_t_q0;
    sc_signal< sc_lv<18> > L1_no_activ_V_i_q0;
    sc_signal< sc_lv<18> > L1_no_activ_V_t_q0;
    sc_signal< sc_lv<18> > L1_activ_V_i_q0;
    sc_signal< sc_lv<18> > L1_activ_V_t_q0;
    sc_signal< sc_lv<18> > L2_bias_added_V_i_q0;
    sc_signal< sc_lv<18> > L2_bias_added_V_t_q0;
    sc_signal< sc_lv<18> > L2_out_V_i_q0;
    sc_signal< sc_lv<18> > L2_out_V_t_q0;
    sc_signal< sc_lv<18> > L2_out_activ_V_i_q0;
    sc_signal< sc_lv<18> > L2_out_activ_V_t_q0;
    sc_signal< sc_logic > add_bias_pre_L1_U0_ap_start;
    sc_signal< sc_logic > add_bias_pre_L1_U0_ap_done;
    sc_signal< sc_logic > add_bias_pre_L1_U0_ap_continue;
    sc_signal< sc_logic > add_bias_pre_L1_U0_ap_idle;
    sc_signal< sc_logic > add_bias_pre_L1_U0_ap_ready;
    sc_signal< sc_lv<9> > add_bias_pre_L1_U0_input_V_address0;
    sc_signal< sc_logic > add_bias_pre_L1_U0_input_V_ce0;
    sc_signal< sc_lv<9> > add_bias_pre_L1_U0_result_V_address0;
    sc_signal< sc_logic > add_bias_pre_L1_U0_result_V_ce0;
    sc_signal< sc_logic > add_bias_pre_L1_U0_result_V_we0;
    sc_signal< sc_lv<18> > add_bias_pre_L1_U0_result_V_d0;
    sc_signal< sc_logic > ap_channel_done_bias_added_V;
    sc_signal< sc_logic > add_bias_pre_L1_U0_result_V_full_n;
    sc_signal< sc_logic > mvprod_layer_1_U0_ap_start;
    sc_signal< sc_logic > mvprod_layer_1_U0_ap_done;
    sc_signal< sc_logic > mvprod_layer_1_U0_ap_continue;
    sc_signal< sc_logic > mvprod_layer_1_U0_ap_idle;
    sc_signal< sc_logic > mvprod_layer_1_U0_ap_ready;
    sc_signal< sc_lv<14> > mvprod_layer_1_U0_matrix_V_address0;
    sc_signal< sc_logic > mvprod_layer_1_U0_matrix_V_ce0;
    sc_signal< sc_lv<9> > mvprod_layer_1_U0_input_V_address0;
    sc_signal< sc_logic > mvprod_layer_1_U0_input_V_ce0;
    sc_signal< sc_lv<5> > mvprod_layer_1_U0_result_V_address0;
    sc_signal< sc_logic > mvprod_layer_1_U0_result_V_ce0;
    sc_signal< sc_logic > mvprod_layer_1_U0_result_V_we0;
    sc_signal< sc_lv<18> > mvprod_layer_1_U0_result_V_d0;
    sc_signal< sc_logic > ap_channel_done_L1_no_activ_V;
    sc_signal< sc_logic > mvprod_layer_1_U0_result_V_full_n;
    sc_signal< sc_logic > sigmoid_activation_L_1_U0_ap_start;
    sc_signal< sc_logic > sigmoid_activation_L_1_U0_ap_done;
    sc_signal< sc_logic > sigmoid_activation_L_1_U0_ap_continue;
    sc_signal< sc_logic > sigmoid_activation_L_1_U0_ap_idle;
    sc_signal< sc_logic > sigmoid_activation_L_1_U0_ap_ready;
    sc_signal< sc_lv<5> > sigmoid_activation_L_1_U0_input_V_address0;
    sc_signal< sc_logic > sigmoid_activation_L_1_U0_input_V_ce0;
    sc_signal< sc_lv<5> > sigmoid_activation_L_1_U0_result_V_address0;
    sc_signal< sc_logic > sigmoid_activation_L_1_U0_result_V_ce0;
    sc_signal< sc_logic > sigmoid_activation_L_1_U0_result_V_we0;
    sc_signal< sc_lv<18> > sigmoid_activation_L_1_U0_result_V_d0;
    sc_signal< sc_logic > ap_channel_done_L1_activ_V;
    sc_signal< sc_logic > sigmoid_activation_L_1_U0_result_V_full_n;
    sc_signal< sc_logic > add_bias_pre_L2_U0_ap_start;
    sc_signal< sc_logic > add_bias_pre_L2_U0_ap_done;
    sc_signal< sc_logic > add_bias_pre_L2_U0_ap_continue;
    sc_signal< sc_logic > add_bias_pre_L2_U0_ap_idle;
    sc_signal< sc_logic > add_bias_pre_L2_U0_ap_ready;
    sc_signal< sc_lv<5> > add_bias_pre_L2_U0_input_V_address0;
    sc_signal< sc_logic > add_bias_pre_L2_U0_input_V_ce0;
    sc_signal< sc_lv<5> > add_bias_pre_L2_U0_result_V_address0;
    sc_signal< sc_logic > add_bias_pre_L2_U0_result_V_ce0;
    sc_signal< sc_logic > add_bias_pre_L2_U0_result_V_we0;
    sc_signal< sc_lv<18> > add_bias_pre_L2_U0_result_V_d0;
    sc_signal< sc_logic > ap_channel_done_L2_bias_added_V;
    sc_signal< sc_logic > add_bias_pre_L2_U0_result_V_full_n;
    sc_signal< sc_logic > mvprod_layer_2_U0_ap_start;
    sc_signal< sc_logic > mvprod_layer_2_U0_ap_done;
    sc_signal< sc_logic > mvprod_layer_2_U0_ap_continue;
    sc_signal< sc_logic > mvprod_layer_2_U0_ap_idle;
    sc_signal< sc_logic > mvprod_layer_2_U0_ap_ready;
    sc_signal< sc_lv<9> > mvprod_layer_2_U0_matrix_V_address0;
    sc_signal< sc_logic > mvprod_layer_2_U0_matrix_V_ce0;
    sc_signal< sc_lv<5> > mvprod_layer_2_U0_input_V_address0;
    sc_signal< sc_logic > mvprod_layer_2_U0_input_V_ce0;
    sc_signal< sc_lv<4> > mvprod_layer_2_U0_result_V_address0;
    sc_signal< sc_logic > mvprod_layer_2_U0_result_V_ce0;
    sc_signal< sc_logic > mvprod_layer_2_U0_result_V_we0;
    sc_signal< sc_lv<18> > mvprod_layer_2_U0_result_V_d0;
    sc_signal< sc_logic > ap_channel_done_L2_out_V;
    sc_signal< sc_logic > mvprod_layer_2_U0_result_V_full_n;
    sc_signal< sc_logic > sigmoid_activation_L_U0_ap_start;
    sc_signal< sc_logic > sigmoid_activation_L_U0_ap_done;
    sc_signal< sc_logic > sigmoid_activation_L_U0_ap_continue;
    sc_signal< sc_logic > sigmoid_activation_L_U0_ap_idle;
    sc_signal< sc_logic > sigmoid_activation_L_U0_ap_ready;
    sc_signal< sc_lv<4> > sigmoid_activation_L_U0_input_V_address0;
    sc_signal< sc_logic > sigmoid_activation_L_U0_input_V_ce0;
    sc_signal< sc_lv<4> > sigmoid_activation_L_U0_result_V_address0;
    sc_signal< sc_logic > sigmoid_activation_L_U0_result_V_ce0;
    sc_signal< sc_logic > sigmoid_activation_L_U0_result_V_we0;
    sc_signal< sc_lv<18> > sigmoid_activation_L_U0_result_V_d0;
    sc_signal< sc_logic > ap_channel_done_L2_out_activ_V;
    sc_signal< sc_logic > sigmoid_activation_L_U0_result_V_full_n;
    sc_signal< sc_logic > classify_U0_ap_start;
    sc_signal< sc_logic > classify_U0_ap_done;
    sc_signal< sc_logic > classify_U0_ap_continue;
    sc_signal< sc_logic > classify_U0_ap_idle;
    sc_signal< sc_logic > classify_U0_ap_ready;
    sc_signal< sc_lv<4> > classify_U0_activated_L2_V_address0;
    sc_signal< sc_logic > classify_U0_activated_L2_V_ce0;
    sc_signal< sc_lv<32> > classify_U0_ap_return;
    sc_signal< sc_logic > ap_channel_done_digit;
    sc_signal< sc_logic > digit_full_n;
    sc_signal< sc_logic > Block_arrayctor_loop_U0_ap_start;
    sc_signal< sc_logic > Block_arrayctor_loop_U0_ap_done;
    sc_signal< sc_logic > Block_arrayctor_loop_U0_ap_continue;
    sc_signal< sc_logic > Block_arrayctor_loop_U0_ap_idle;
    sc_signal< sc_logic > Block_arrayctor_loop_U0_ap_ready;
    sc_signal< sc_lv<32> > Block_arrayctor_loop_U0_ap_return;
    sc_signal< sc_logic > ap_channel_done_digit_load_loc_chann;
    sc_signal< sc_logic > digit_load_loc_chann_full_n;
    sc_signal< sc_logic > p_src_mlp_cpp_lin_U0_ap_start;
    sc_signal< sc_logic > p_src_mlp_cpp_lin_U0_ap_done;
    sc_signal< sc_logic > p_src_mlp_cpp_lin_U0_ap_continue;
    sc_signal< sc_logic > p_src_mlp_cpp_lin_U0_ap_idle;
    sc_signal< sc_logic > p_src_mlp_cpp_lin_U0_ap_ready;
    sc_signal< sc_lv<32> > p_src_mlp_cpp_lin_U0_ap_return;
    sc_signal< sc_lv<32> > tmp_p_src_mlp_cpp_lin_fu_117_ap_return;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > bias_added_V_i_full_n;
    sc_signal< sc_logic > bias_added_V_t_empty_n;
    sc_signal< sc_logic > L1_no_activ_V_i_full_n;
    sc_signal< sc_logic > L1_no_activ_V_t_empty_n;
    sc_signal< sc_logic > L1_activ_V_i_full_n;
    sc_signal< sc_logic > L1_activ_V_t_empty_n;
    sc_signal< sc_logic > L2_bias_added_V_i_full_n;
    sc_signal< sc_logic > L2_bias_added_V_t_empty_n;
    sc_signal< sc_logic > L2_out_V_i_full_n;
    sc_signal< sc_logic > L2_out_V_t_empty_n;
    sc_signal< sc_logic > L2_out_activ_V_i_full_n;
    sc_signal< sc_logic > L2_out_activ_V_t_empty_n;
    sc_signal< sc_lv<32> > digit_dout;
    sc_signal< sc_logic > digit_empty_n;
    sc_signal< sc_lv<32> > digit_load_loc_chann_dout;
    sc_signal< sc_logic > digit_load_loc_chann_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_mvprod_layer_1_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_mvprod_layer_1_U0_ap_ready;
    sc_signal< sc_lv<2> > mvprod_layer_1_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_mvprod_layer_2_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_mvprod_layer_2_U0_ap_ready;
    sc_signal< sc_lv<2> > mvprod_layer_2_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_add_bias_pre_L1_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_add_bias_pre_L1_U0_ap_ready;
    sc_signal< sc_lv<2> > add_bias_pre_L1_U0_ap_ready_count;
    sc_signal< sc_logic > add_bias_pre_L1_U0_start_full_n;
    sc_signal< sc_logic > add_bias_pre_L1_U0_start_write;
    sc_signal< sc_logic > mvprod_layer_1_U0_start_full_n;
    sc_signal< sc_logic > mvprod_layer_1_U0_start_write;
    sc_signal< sc_logic > sigmoid_activation_L_1_U0_start_full_n;
    sc_signal< sc_logic > sigmoid_activation_L_1_U0_start_write;
    sc_signal< sc_logic > add_bias_pre_L2_U0_start_full_n;
    sc_signal< sc_logic > add_bias_pre_L2_U0_start_write;
    sc_signal< sc_logic > mvprod_layer_2_U0_start_full_n;
    sc_signal< sc_logic > mvprod_layer_2_U0_start_write;
    sc_signal< sc_logic > sigmoid_activation_L_U0_start_full_n;
    sc_signal< sc_logic > sigmoid_activation_L_U0_start_write;
    sc_signal< sc_logic > classify_U0_start_full_n;
    sc_signal< sc_logic > classify_U0_start_write;
    sc_signal< sc_logic > Block_arrayctor_loop_U0_start_full_n;
    sc_signal< sc_logic > Block_arrayctor_loop_U0_start_write;
    sc_signal< sc_logic > p_src_mlp_cpp_lin_U0_start_full_n;
    sc_signal< sc_logic > p_src_mlp_cpp_lin_U0_start_write;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<18> ap_const_lv18_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_Block_arrayctor_loop_U0_ap_continue();
    void thread_Block_arrayctor_loop_U0_ap_start();
    void thread_Block_arrayctor_loop_U0_start_full_n();
    void thread_Block_arrayctor_loop_U0_start_write();
    void thread_add_bias_pre_L1_U0_ap_continue();
    void thread_add_bias_pre_L1_U0_ap_start();
    void thread_add_bias_pre_L1_U0_result_V_full_n();
    void thread_add_bias_pre_L1_U0_start_full_n();
    void thread_add_bias_pre_L1_U0_start_write();
    void thread_add_bias_pre_L2_U0_ap_continue();
    void thread_add_bias_pre_L2_U0_ap_start();
    void thread_add_bias_pre_L2_U0_result_V_full_n();
    void thread_add_bias_pre_L2_U0_start_full_n();
    void thread_add_bias_pre_L2_U0_start_write();
    void thread_ap_channel_done_L1_activ_V();
    void thread_ap_channel_done_L1_no_activ_V();
    void thread_ap_channel_done_L2_bias_added_V();
    void thread_ap_channel_done_L2_out_V();
    void thread_ap_channel_done_L2_out_activ_V();
    void thread_ap_channel_done_bias_added_V();
    void thread_ap_channel_done_digit();
    void thread_ap_channel_done_digit_load_loc_chann();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_sync_add_bias_pre_L1_U0_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_mvprod_layer_1_U0_ap_ready();
    void thread_ap_sync_mvprod_layer_2_U0_ap_ready();
    void thread_ap_sync_ready();
    void thread_classify_U0_ap_continue();
    void thread_classify_U0_ap_start();
    void thread_classify_U0_start_full_n();
    void thread_classify_U0_start_write();
    void thread_input_V_address0();
    void thread_input_V_address1();
    void thread_input_V_ce0();
    void thread_input_V_ce1();
    void thread_input_V_d0();
    void thread_input_V_d1();
    void thread_input_V_we0();
    void thread_input_V_we1();
    void thread_mvprod_layer_1_U0_ap_continue();
    void thread_mvprod_layer_1_U0_ap_start();
    void thread_mvprod_layer_1_U0_result_V_full_n();
    void thread_mvprod_layer_1_U0_start_full_n();
    void thread_mvprod_layer_1_U0_start_write();
    void thread_mvprod_layer_2_U0_ap_continue();
    void thread_mvprod_layer_2_U0_ap_start();
    void thread_mvprod_layer_2_U0_result_V_full_n();
    void thread_mvprod_layer_2_U0_start_full_n();
    void thread_mvprod_layer_2_U0_start_write();
    void thread_p_src_mlp_cpp_lin_U0_ap_continue();
    void thread_p_src_mlp_cpp_lin_U0_ap_start();
    void thread_p_src_mlp_cpp_lin_U0_start_full_n();
    void thread_p_src_mlp_cpp_lin_U0_start_write();
    void thread_sigmoid_activation_L_1_U0_ap_continue();
    void thread_sigmoid_activation_L_1_U0_ap_start();
    void thread_sigmoid_activation_L_1_U0_result_V_full_n();
    void thread_sigmoid_activation_L_1_U0_start_full_n();
    void thread_sigmoid_activation_L_1_U0_start_write();
    void thread_sigmoid_activation_L_U0_ap_continue();
    void thread_sigmoid_activation_L_U0_ap_start();
    void thread_sigmoid_activation_L_U0_result_V_full_n();
    void thread_sigmoid_activation_L_U0_start_full_n();
    void thread_sigmoid_activation_L_U0_start_write();
    void thread_tmp_p_src_mlp_cpp_lin_fu_117_ap_return();
    void thread_weights_L1_V_address0();
    void thread_weights_L1_V_address1();
    void thread_weights_L1_V_ce0();
    void thread_weights_L1_V_ce1();
    void thread_weights_L1_V_d0();
    void thread_weights_L1_V_d1();
    void thread_weights_L1_V_we0();
    void thread_weights_L1_V_we1();
    void thread_weights_L2_V_address0();
    void thread_weights_L2_V_address1();
    void thread_weights_L2_V_ce0();
    void thread_weights_L2_V_ce1();
    void thread_weights_L2_V_d0();
    void thread_weights_L2_V_d1();
    void thread_weights_L2_V_we0();
    void thread_weights_L2_V_we1();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
