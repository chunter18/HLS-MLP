// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module classify (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        activated_L2_V_address0,
        activated_L2_V_ce0,
        activated_L2_V_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] activated_L2_V_address0;
output   activated_L2_V_ce0;
input  [17:0] activated_L2_V_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] activated_L2_V_address0;
reg activated_L2_V_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire   [3:0] network_digit_fu_81_p2;
reg   [3:0] network_digit_reg_130;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_fu_75_p2;
wire   [17:0] max_V_2_fu_101_p3;
wire    ap_CS_fsm_state4;
wire   [31:0] network_digit_1_fu_109_p3;
reg   [17:0] p_0_reg_42;
reg   [31:0] result_write_assign_reg_52;
reg   [3:0] k_reg_64;
wire   [63:0] tmp_s_fu_87_p1;
wire   [0:0] tmp_1_fu_92_p2;
wire   [31:0] network_digit_2_cast_fu_98_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_fu_75_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_64 <= network_digit_reg_130;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_64 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_0_reg_42 <= max_V_2_fu_101_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_0_reg_42 <= activated_L2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        result_write_assign_reg_52 <= network_digit_1_fu_109_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        result_write_assign_reg_52 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        network_digit_reg_130 <= network_digit_fu_81_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        activated_L2_V_address0 = tmp_s_fu_87_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        activated_L2_V_address0 = 64'd0;
    end else begin
        activated_L2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        activated_L2_V_ce0 = 1'b1;
    end else begin
        activated_L2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_75_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_75_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_fu_75_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return = result_write_assign_reg_52;

assign max_V_2_fu_101_p3 = ((tmp_1_fu_92_p2[0:0] === 1'b1) ? activated_L2_V_q0 : p_0_reg_42);

assign network_digit_1_fu_109_p3 = ((tmp_1_fu_92_p2[0:0] === 1'b1) ? network_digit_2_cast_fu_98_p1 : result_write_assign_reg_52);

assign network_digit_2_cast_fu_98_p1 = network_digit_reg_130;

assign network_digit_fu_81_p2 = (k_reg_64 + 4'd1);

assign tmp_1_fu_92_p2 = (($signed(activated_L2_V_q0) > $signed(p_0_reg_42)) ? 1'b1 : 1'b0);

assign tmp_fu_75_p2 = ((k_reg_64 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_s_fu_87_p1 = k_reg_64;

endmodule //classify
