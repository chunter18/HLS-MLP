-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_bias_pre_L1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_0_V_ce0 : OUT STD_LOGIC;
    input_0_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_1_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_1_V_ce0 : OUT STD_LOGIC;
    input_1_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_2_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_2_V_ce0 : OUT STD_LOGIC;
    input_2_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_3_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_3_V_ce0 : OUT STD_LOGIC;
    input_3_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_4_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_4_V_ce0 : OUT STD_LOGIC;
    input_4_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_5_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_5_V_ce0 : OUT STD_LOGIC;
    input_5_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_6_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_6_V_ce0 : OUT STD_LOGIC;
    input_6_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_7_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_7_V_ce0 : OUT STD_LOGIC;
    input_7_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    result_0_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    result_0_V_ce0 : OUT STD_LOGIC;
    result_0_V_we0 : OUT STD_LOGIC;
    result_0_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    result_1_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    result_1_V_ce0 : OUT STD_LOGIC;
    result_1_V_we0 : OUT STD_LOGIC;
    result_1_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    result_2_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    result_2_V_ce0 : OUT STD_LOGIC;
    result_2_V_we0 : OUT STD_LOGIC;
    result_2_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    result_3_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    result_3_V_ce0 : OUT STD_LOGIC;
    result_3_V_we0 : OUT STD_LOGIC;
    result_3_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    result_4_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    result_4_V_ce0 : OUT STD_LOGIC;
    result_4_V_we0 : OUT STD_LOGIC;
    result_4_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    result_5_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    result_5_V_ce0 : OUT STD_LOGIC;
    result_5_V_we0 : OUT STD_LOGIC;
    result_5_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    result_6_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    result_6_V_ce0 : OUT STD_LOGIC;
    result_6_V_we0 : OUT STD_LOGIC;
    result_6_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    result_7_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    result_7_V_ce0 : OUT STD_LOGIC;
    result_7_V_we0 : OUT STD_LOGIC;
    result_7_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of add_bias_pre_L1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv18_10000 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_18F : STD_LOGIC_VECTOR (8 downto 0) := "110001111";
    constant ap_const_lv18_290 : STD_LOGIC_VECTOR (17 downto 0) := "000000001010010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv9_33 : STD_LOGIC_VECTOR (8 downto 0) := "000110011";
    constant ap_const_lv9_32 : STD_LOGIC_VECTOR (8 downto 0) := "000110010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv20_283 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001010000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal i4_reg_316 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_urem_reg_330 : STD_LOGIC_VECTOR (8 downto 0);
    signal do_init_reg_344 : STD_LOGIC_VECTOR (0 downto 0);
    signal do_init_reg_344_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_init_reg_344_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_init_reg_344_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_init_reg_344_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_init_reg_344_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_361 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_fu_375_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_500 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal next_urem_fu_393_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_urem_reg_547 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_553_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_553_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_553_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_553_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_553_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_553_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_405_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal next_mul_reg_557 : STD_LOGIC_VECTOR (17 downto 0);
    signal idx_urem_fu_457_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal idx_urem_reg_607 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_425_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_reg_612 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_reg_612_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_reg_612_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_reg_612_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_reg_612_pp0_iter5_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_reg_612_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_494_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_reg_629 : STD_LOGIC_VECTOR (19 downto 0);
    signal arrayNo1_fu_490_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayNo1_reg_634 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayNo1_reg_634_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayNo1_reg_634_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayNo1_reg_634_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_phi_mux_i4_phi_fu_320_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_phi_urem_phi_fu_334_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_phi_mul_phi_fu_365_p6 : STD_LOGIC_VECTOR (17 downto 0);
    signal newIndex1_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex3_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_411_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_425_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_447_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_447_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_481_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_494_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_494_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_425_ce : STD_LOGIC;
    signal grp_fu_447_ce : STD_LOGIC;
    signal grp_fu_494_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_0to5 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_494_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_condition_279 : BOOLEAN;
    signal ap_condition_293 : BOOLEAN;

    component mlp_mux_832_18_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        din3 : IN STD_LOGIC_VECTOR (17 downto 0);
        din4 : IN STD_LOGIC_VECTOR (17 downto 0);
        din5 : IN STD_LOGIC_VECTOR (17 downto 0);
        din6 : IN STD_LOGIC_VECTOR (17 downto 0);
        din7 : IN STD_LOGIC_VECTOR (17 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component mlp_urem_9ns_7ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component mlp_mul_mul_9ns_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    mlp_mux_832_18_2_1_U1 : component mlp_mux_832_18_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 18,
        din8_WIDTH => 32,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_0_V_q0,
        din1 => input_1_V_q0,
        din2 => input_2_V_q0,
        din3 => input_3_V_q0,
        din4 => input_4_V_q0,
        din5 => input_5_V_q0,
        din6 => input_6_V_q0,
        din7 => input_7_V_q0,
        din8 => grp_fu_425_p9,
        ce => grp_fu_425_ce,
        dout => grp_fu_425_p10);

    mlp_urem_9ns_7ns_bkb_U2 : component mlp_urem_9ns_7ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_reg_500,
        din1 => grp_fu_447_p1,
        ce => grp_fu_447_ce,
        dout => grp_fu_447_p2);

    mlp_mul_mul_9ns_1cud_U3 : component mlp_mul_mul_9ns_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_494_p0,
        din1 => grp_fu_494_p1,
        ce => grp_fu_494_ce,
        dout => grp_fu_494_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_553_pp0_iter6_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    do_init_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_553_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                do_init_reg_344 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_553_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_344 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i4_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_553 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i4_reg_316 <= i_reg_500;
            elsif ((((tmp_reg_553 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i4_reg_316 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_553_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                phi_mul_reg_361 <= next_mul_reg_557;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_553_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                phi_mul_reg_361 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_553 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                phi_urem_reg_330 <= idx_urem_reg_607;
            elsif ((((tmp_reg_553 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                phi_urem_reg_330 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                arrayNo1_reg_634 <= arrayNo1_fu_490_p1;
                arrayNo1_reg_634_pp0_iter3_reg <= arrayNo1_reg_634;
                arrayNo1_reg_634_pp0_iter4_reg <= arrayNo1_reg_634_pp0_iter3_reg;
                arrayNo1_reg_634_pp0_iter5_reg <= arrayNo1_reg_634_pp0_iter4_reg;
                do_init_reg_344_pp0_iter1_reg <= do_init_reg_344;
                do_init_reg_344_pp0_iter2_reg <= do_init_reg_344_pp0_iter1_reg;
                do_init_reg_344_pp0_iter3_reg <= do_init_reg_344_pp0_iter2_reg;
                do_init_reg_344_pp0_iter4_reg <= do_init_reg_344_pp0_iter3_reg;
                do_init_reg_344_pp0_iter5_reg <= do_init_reg_344_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_500 <= i_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                idx_urem_reg_607 <= idx_urem_fu_457_p3;
                next_mul_reg_557 <= next_mul_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_reg_629 <= grp_fu_494_p2;
                next_urem_reg_547 <= next_urem_fu_393_p2;
                tmp_4_reg_612 <= grp_fu_425_p10;
                tmp_4_reg_612_pp0_iter2_reg <= tmp_4_reg_612;
                tmp_4_reg_612_pp0_iter3_reg <= tmp_4_reg_612_pp0_iter2_reg;
                tmp_4_reg_612_pp0_iter4_reg <= tmp_4_reg_612_pp0_iter3_reg;
                tmp_4_reg_612_pp0_iter5_reg <= tmp_4_reg_612_pp0_iter4_reg;
                tmp_4_reg_612_pp0_iter6_reg <= tmp_4_reg_612_pp0_iter5_reg;
                tmp_reg_553 <= tmp_fu_399_p2;
                tmp_reg_553_pp0_iter1_reg <= tmp_reg_553;
                tmp_reg_553_pp0_iter2_reg <= tmp_reg_553_pp0_iter1_reg;
                tmp_reg_553_pp0_iter3_reg <= tmp_reg_553_pp0_iter2_reg;
                tmp_reg_553_pp0_iter4_reg <= tmp_reg_553_pp0_iter3_reg;
                tmp_reg_553_pp0_iter5_reg <= tmp_reg_553_pp0_iter4_reg;
                tmp_reg_553_pp0_iter6_reg <= tmp_reg_553_pp0_iter5_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_279_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_279 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_293_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
                ap_condition_293 <= ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_reg_553_pp0_iter6_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_553_pp0_iter6_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_0to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i4_phi_fu_320_p6_assign_proc : process(tmp_reg_553, i4_reg_316, i_reg_500, ap_condition_279)
    begin
        if ((ap_const_boolean_1 = ap_condition_279)) then
            if ((tmp_reg_553 = ap_const_lv1_1)) then 
                ap_phi_mux_i4_phi_fu_320_p6 <= ap_const_lv9_0;
            elsif ((tmp_reg_553 = ap_const_lv1_0)) then 
                ap_phi_mux_i4_phi_fu_320_p6 <= i_reg_500;
            else 
                ap_phi_mux_i4_phi_fu_320_p6 <= i4_reg_316;
            end if;
        else 
            ap_phi_mux_i4_phi_fu_320_p6 <= i4_reg_316;
        end if; 
    end process;


    ap_phi_mux_phi_mul_phi_fu_365_p6_assign_proc : process(phi_mul_reg_361, tmp_reg_553_pp0_iter1_reg, next_mul_reg_557, ap_condition_293)
    begin
        if ((ap_const_boolean_1 = ap_condition_293)) then
            if ((tmp_reg_553_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_phi_mul_phi_fu_365_p6 <= ap_const_lv18_0;
            elsif ((tmp_reg_553_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_phi_mul_phi_fu_365_p6 <= next_mul_reg_557;
            else 
                ap_phi_mux_phi_mul_phi_fu_365_p6 <= phi_mul_reg_361;
            end if;
        else 
            ap_phi_mux_phi_mul_phi_fu_365_p6 <= phi_mul_reg_361;
        end if; 
    end process;


    ap_phi_mux_phi_urem_phi_fu_334_p6_assign_proc : process(tmp_reg_553, phi_urem_reg_330, idx_urem_reg_607, ap_condition_279)
    begin
        if ((ap_const_boolean_1 = ap_condition_279)) then
            if ((tmp_reg_553 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_urem_phi_fu_334_p6 <= ap_const_lv9_0;
            elsif ((tmp_reg_553 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_urem_phi_fu_334_p6 <= idx_urem_reg_607;
            else 
                ap_phi_mux_phi_urem_phi_fu_334_p6 <= phi_urem_reg_330;
            end if;
        else 
            ap_phi_mux_phi_urem_phi_fu_334_p6 <= phi_urem_reg_330;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_reg_553, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_reg_553 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to5)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to5 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

        arrayNo1_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_481_p4),9));


    grp_fu_425_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_425_ce <= ap_const_logic_1;
        else 
            grp_fu_425_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_425_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_411_p4),32));

    grp_fu_447_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_447_ce <= ap_const_logic_1;
        else 
            grp_fu_447_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_447_p1 <= ap_const_lv9_33(7 - 1 downto 0);

    grp_fu_494_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_494_ce <= ap_const_logic_1;
        else 
            grp_fu_494_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_494_p0 <= grp_fu_494_p00(9 - 1 downto 0);
    grp_fu_494_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_500),20));
    grp_fu_494_p1 <= ap_const_lv20_283(11 - 1 downto 0);
    i_fu_375_p2 <= std_logic_vector(unsigned(ap_phi_mux_i4_phi_fu_320_p6) + unsigned(ap_const_lv9_1));
    idx_urem_fu_457_p3 <= 
        next_urem_reg_547 when (tmp_6_fu_452_p2(0) = '1') else 
        ap_const_lv9_0;
    input_0_V_address0 <= newIndex1_fu_381_p1(6 - 1 downto 0);

    input_0_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_V_ce0 <= ap_const_logic_1;
        else 
            input_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_V_address0 <= newIndex1_fu_381_p1(6 - 1 downto 0);

    input_1_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_V_ce0 <= ap_const_logic_1;
        else 
            input_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_V_address0 <= newIndex1_fu_381_p1(6 - 1 downto 0);

    input_2_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_V_ce0 <= ap_const_logic_1;
        else 
            input_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_V_address0 <= newIndex1_fu_381_p1(6 - 1 downto 0);

    input_3_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_3_V_ce0 <= ap_const_logic_1;
        else 
            input_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_4_V_address0 <= newIndex1_fu_381_p1(6 - 1 downto 0);

    input_4_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_4_V_ce0 <= ap_const_logic_1;
        else 
            input_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_5_V_address0 <= newIndex1_fu_381_p1(6 - 1 downto 0);

    input_5_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_5_V_ce0 <= ap_const_logic_1;
        else 
            input_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_6_V_address0 <= newIndex1_fu_381_p1(6 - 1 downto 0);

    input_6_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_6_V_ce0 <= ap_const_logic_1;
        else 
            input_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_7_V_address0 <= newIndex1_fu_381_p1(6 - 1 downto 0);

    input_7_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_7_V_ce0 <= ap_const_logic_1;
        else 
            input_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    newIndex1_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_phi_urem_phi_fu_334_p6),64));
    newIndex3_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_447_p2),64));
    next_mul_fu_405_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_mul_phi_fu_365_p6) + unsigned(ap_const_lv18_290));
    next_urem_fu_393_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_urem_phi_fu_334_p6) + unsigned(ap_const_lv9_1));

    result_0_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1, newIndex3_fu_464_p1)
    begin
        if ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                result_0_V_address0 <= newIndex3_fu_464_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                result_0_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
            else 
                result_0_V_address0 <= "XXXXXX";
            end if;
        else 
            result_0_V_address0 <= "XXXXXX";
        end if; 
    end process;


    result_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            result_0_V_ce0 <= ap_const_logic_1;
        else 
            result_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_0_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, tmp_4_reg_612_pp0_iter6_reg, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                result_0_V_d0 <= tmp_4_reg_612_pp0_iter6_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                result_0_V_d0 <= ap_const_lv18_10000;
            else 
                result_0_V_d0 <= "XXXXXXXXXXXXXXXXXX";
            end if;
        else 
            result_0_V_d0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_0_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, do_init_reg_344_pp0_iter5_reg, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, arrayNo1_reg_634_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((do_init_reg_344_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            result_0_V_we0 <= ap_const_logic_1;
        else 
            result_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_1_V_address0 <= newIndex3_fu_464_p1(6 - 1 downto 0);

    result_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_1_V_ce0 <= ap_const_logic_1;
        else 
            result_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_1_V_d0 <= tmp_4_reg_612_pp0_iter6_reg;

    result_1_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, arrayNo1_reg_634_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_1_V_we0 <= ap_const_logic_1;
        else 
            result_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_2_V_address0 <= newIndex3_fu_464_p1(6 - 1 downto 0);

    result_2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_2_V_ce0 <= ap_const_logic_1;
        else 
            result_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_2_V_d0 <= tmp_4_reg_612_pp0_iter6_reg;

    result_2_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, arrayNo1_reg_634_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_2_V_we0 <= ap_const_logic_1;
        else 
            result_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_3_V_address0 <= newIndex3_fu_464_p1(6 - 1 downto 0);

    result_3_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_3_V_ce0 <= ap_const_logic_1;
        else 
            result_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_3_V_d0 <= tmp_4_reg_612_pp0_iter6_reg;

    result_3_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, arrayNo1_reg_634_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_3_V_we0 <= ap_const_logic_1;
        else 
            result_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_4_V_address0 <= newIndex3_fu_464_p1(6 - 1 downto 0);

    result_4_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_4_V_ce0 <= ap_const_logic_1;
        else 
            result_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_4_V_d0 <= tmp_4_reg_612_pp0_iter6_reg;

    result_4_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, arrayNo1_reg_634_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_4_V_we0 <= ap_const_logic_1;
        else 
            result_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_5_V_address0 <= newIndex3_fu_464_p1(6 - 1 downto 0);

    result_5_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_5_V_ce0 <= ap_const_logic_1;
        else 
            result_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_5_V_d0 <= tmp_4_reg_612_pp0_iter6_reg;

    result_5_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, arrayNo1_reg_634_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_5_V_we0 <= ap_const_logic_1;
        else 
            result_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_6_V_address0 <= newIndex3_fu_464_p1(6 - 1 downto 0);

    result_6_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_6_V_ce0 <= ap_const_logic_1;
        else 
            result_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_6_V_d0 <= tmp_4_reg_612_pp0_iter6_reg;

    result_6_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, arrayNo1_reg_634_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_6_V_we0 <= ap_const_logic_1;
        else 
            result_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_7_V_address0 <= newIndex3_fu_464_p1(6 - 1 downto 0);

    result_7_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_7_V_ce0 <= ap_const_logic_1;
        else 
            result_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_7_V_d0 <= tmp_4_reg_612_pp0_iter6_reg;

    result_7_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, arrayNo1_reg_634_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if ((not((arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_1)) and not((arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_2)) and not((arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_3)) and not((arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_4)) and not((arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_5)) and not((arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_6)) and not((arrayNo1_reg_634_pp0_iter5_reg = ap_const_lv9_0)) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            result_7_V_we0 <= ap_const_logic_1;
        else 
            result_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_411_p4 <= ap_phi_mux_phi_mul_phi_fu_365_p6(17 downto 15);
    tmp_5_fu_481_p4 <= mul_reg_629(19 downto 15);
    tmp_6_fu_452_p2 <= "1" when (unsigned(next_urem_reg_547) < unsigned(ap_const_lv9_32)) else "0";
    tmp_fu_399_p2 <= "1" when (ap_phi_mux_i4_phi_fu_320_p6 = ap_const_lv9_18F) else "0";
end behav;
