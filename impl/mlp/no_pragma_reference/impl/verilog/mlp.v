// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mlp,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325tffg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.532000,HLS_SYN_LAT=63600,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=4,HLS_SYN_FF=853,HLS_SYN_LUT=1416,HLS_VERSION=2018_2}" *)

module mlp (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights_L1_V_address0,
        weights_L1_V_ce0,
        weights_L1_V_q0,
        weights_L2_V_address0,
        weights_L2_V_ce0,
        weights_L2_V_q0,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] weights_L1_V_address0;
output   weights_L1_V_ce0;
input  [17:0] weights_L1_V_q0;
output  [8:0] weights_L2_V_address0;
output   weights_L2_V_ce0;
input  [17:0] weights_L2_V_q0;
output  [8:0] input_V_address0;
output   input_V_ce0;
input  [17:0] input_V_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] i_fu_380_p2;
reg   [8:0] i_reg_701;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_i_fu_374_p2;
reg   [17:0] input_V_load_reg_712;
wire    ap_CS_fsm_state3;
wire   [4:0] i_2_fu_401_p2;
reg   [4:0] i_2_reg_720;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_i3_fu_407_p1;
reg   [63:0] tmp_i3_reg_725;
wire   [0:0] tmp_i2_fu_395_p2;
wire   [17:0] L1_no_activ_V_q0;
reg   [17:0] p_Val2_s_reg_736;
wire    ap_CS_fsm_state7;
reg   [0:0] tmp_1_reg_742;
wire  signed [17:0] p_Val2_3_fu_425_p3;
reg  signed [17:0] p_Val2_3_reg_747;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_15_i_fu_431_p2;
reg   [0:0] tmp_15_i_reg_752;
reg   [13:0] tmp_reg_757;
wire  signed [35:0] OP1_V_fu_447_p1;
wire    ap_CS_fsm_state9;
wire  signed [35:0] grp_fu_686_p2;
reg  signed [35:0] tmp_18_i_reg_768;
wire    ap_CS_fsm_state11;
wire   [17:0] p_Val2_5_i_fu_457_p2;
reg   [17:0] p_Val2_5_i_reg_773;
wire   [17:0] p_Val2_5_fu_495_p3;
reg   [17:0] p_Val2_5_reg_778;
wire    ap_CS_fsm_state12;
wire   [4:0] i_1_fu_515_p2;
reg   [4:0] i_1_reg_786;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_i5_fu_509_p2;
wire   [3:0] i_3_fu_536_p2;
reg   [3:0] i_3_reg_800;
wire    ap_CS_fsm_state17;
wire   [63:0] tmp_1_i_fu_542_p1;
reg   [63:0] tmp_1_i_reg_805;
wire   [0:0] tmp_i6_22_fu_530_p2;
wire   [17:0] L2_out_V_q0;
reg   [17:0] p_Val2_6_reg_821;
wire    ap_CS_fsm_state18;
reg   [0:0] tmp_2_reg_827;
wire  signed [17:0] p_Val2_7_fu_560_p3;
reg  signed [17:0] p_Val2_7_reg_832;
wire    ap_CS_fsm_state19;
wire   [0:0] tmp_7_i1_fu_566_p2;
reg   [0:0] tmp_7_i1_reg_837;
reg   [14:0] tmp_s_reg_842;
wire  signed [35:0] OP1_V_1_fu_582_p1;
wire    ap_CS_fsm_state20;
wire  signed [35:0] grp_fu_692_p2;
reg  signed [35:0] tmp_8_i_reg_853;
wire    ap_CS_fsm_state22;
wire   [17:0] p_Val2_2_i_fu_592_p2;
reg   [17:0] p_Val2_2_i_reg_858;
wire   [17:0] p_Val2_9_fu_630_p3;
reg   [17:0] p_Val2_9_reg_863;
wire    ap_CS_fsm_state23;
wire   [17:0] L2_out_activ_V_q0;
wire    ap_CS_fsm_state25;
wire   [3:0] network_digit_fu_650_p2;
reg   [3:0] network_digit_reg_876;
wire    ap_CS_fsm_state26;
wire   [0:0] tmp_i9_fu_644_p2;
wire   [17:0] max_V_1_i_0_i_fu_670_p3;
wire    ap_CS_fsm_state27;
wire   [31:0] network_digit_2_i_ne_fu_678_p3;
reg   [8:0] bias_added_V_address0;
reg    bias_added_V_ce0;
reg    bias_added_V_we0;
reg   [17:0] bias_added_V_d0;
wire   [17:0] bias_added_V_q0;
reg   [4:0] L1_no_activ_V_address0;
reg    L1_no_activ_V_ce0;
reg    L1_no_activ_V_we0;
reg   [4:0] L1_activ_V_address0;
reg    L1_activ_V_ce0;
reg    L1_activ_V_we0;
reg   [17:0] L1_activ_V_d0;
wire   [17:0] L1_activ_V_q0;
reg   [4:0] L2_bias_added_V_address0;
reg    L2_bias_added_V_ce0;
reg    L2_bias_added_V_we0;
reg   [17:0] L2_bias_added_V_d0;
wire   [17:0] L2_bias_added_V_q0;
reg   [3:0] L2_out_V_address0;
reg    L2_out_V_ce0;
reg    L2_out_V_we0;
reg   [3:0] L2_out_activ_V_address0;
reg    L2_out_activ_V_ce0;
reg    L2_out_activ_V_we0;
reg   [17:0] L2_out_activ_V_d0;
wire    grp_mvprod_layer_2_fu_358_ap_start;
wire    grp_mvprod_layer_2_fu_358_ap_done;
wire    grp_mvprod_layer_2_fu_358_ap_idle;
wire    grp_mvprod_layer_2_fu_358_ap_ready;
wire   [8:0] grp_mvprod_layer_2_fu_358_matrix_V_address0;
wire    grp_mvprod_layer_2_fu_358_matrix_V_ce0;
wire   [4:0] grp_mvprod_layer_2_fu_358_input_V_address0;
wire    grp_mvprod_layer_2_fu_358_input_V_ce0;
wire   [3:0] grp_mvprod_layer_2_fu_358_result_V_address0;
wire    grp_mvprod_layer_2_fu_358_result_V_ce0;
wire    grp_mvprod_layer_2_fu_358_result_V_we0;
wire   [17:0] grp_mvprod_layer_2_fu_358_result_V_d0;
wire    grp_mvprod_layer_1_fu_366_ap_start;
wire    grp_mvprod_layer_1_fu_366_ap_done;
wire    grp_mvprod_layer_1_fu_366_ap_idle;
wire    grp_mvprod_layer_1_fu_366_ap_ready;
wire   [13:0] grp_mvprod_layer_1_fu_366_matrix_V_address0;
wire    grp_mvprod_layer_1_fu_366_matrix_V_ce0;
wire   [8:0] grp_mvprod_layer_1_fu_366_input_V_address0;
wire    grp_mvprod_layer_1_fu_366_input_V_ce0;
wire   [4:0] grp_mvprod_layer_1_fu_366_result_V_address0;
wire    grp_mvprod_layer_1_fu_366_result_V_ce0;
wire    grp_mvprod_layer_1_fu_366_result_V_we0;
wire   [17:0] grp_mvprod_layer_1_fu_366_result_V_d0;
reg   [8:0] i_i_reg_281;
wire    ap_CS_fsm_state4;
reg   [4:0] i_i1_reg_292;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state13;
reg   [4:0] i_i4_reg_303;
wire    ap_CS_fsm_state15;
reg   [3:0] i_i5_reg_314;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state24;
reg   [17:0] p_0_i_reg_325;
reg   [31:0] digit_reg_335;
reg   [3:0] k_i_reg_347;
reg    grp_mvprod_layer_2_fu_358_ap_start_reg;
reg    grp_mvprod_layer_1_fu_366_ap_start_reg;
wire   [63:0] tmp_43_i_fu_386_p1;
wire   [63:0] tmp_i_19_fu_391_p1;
wire   [4:0] L1_activ_V_addr_gep_fu_213_p3;
wire   [63:0] tmp_42_i_fu_521_p1;
wire   [63:0] tmp_i6_fu_526_p1;
wire   [3:0] L2_out_activ_V_addr_1_gep_fu_267_p3;
wire   [63:0] tmp_i1_fu_656_p1;
wire   [17:0] p_Val2_i_fu_503_p2;
wire   [17:0] p_Val2_7_i_fu_638_p2;
wire   [17:0] p_Val2_8_i_fu_420_p2;
wire   [17:0] tmp_17_i_fu_450_p3;
wire   [25:0] tmp_20_i_fu_463_p3;
wire   [25:0] tmp_21_i_cast_fu_470_p4;
wire   [25:0] p_Val2_4_fu_479_p2;
wire   [17:0] tmp_23_i_fu_485_p4;
wire   [17:0] p_Val2_1_i9_fu_555_p2;
wire   [17:0] tmp_i2_24_fu_585_p3;
wire   [27:0] tmp_6_i1_fu_598_p3;
wire   [27:0] tmp_10_i_cast_fu_605_p4;
wire   [27:0] p_Val2_8_fu_614_p2;
wire   [17:0] tmp_12_i_fu_620_p4;
wire   [0:0] tmp_41_i_fu_661_p2;
wire   [31:0] network_digit_cast_fu_667_p1;
wire  signed [17:0] grp_fu_686_p0;
wire  signed [17:0] grp_fu_686_p1;
wire  signed [17:0] grp_fu_692_p0;
wire  signed [17:0] grp_fu_692_p1;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 grp_mvprod_layer_2_fu_358_ap_start_reg = 1'b0;
#0 grp_mvprod_layer_1_fu_366_ap_start_reg = 1'b0;
end

mlp_bias_added_V #(
    .DataWidth( 18 ),
    .AddressRange( 401 ),
    .AddressWidth( 9 ))
bias_added_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_added_V_address0),
    .ce0(bias_added_V_ce0),
    .we0(bias_added_V_we0),
    .d0(bias_added_V_d0),
    .q0(bias_added_V_q0)
);

mlp_L1_no_activ_V #(
    .DataWidth( 18 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
L1_no_activ_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(L1_no_activ_V_address0),
    .ce0(L1_no_activ_V_ce0),
    .we0(L1_no_activ_V_we0),
    .d0(grp_mvprod_layer_1_fu_366_result_V_d0),
    .q0(L1_no_activ_V_q0)
);

mlp_L1_no_activ_V #(
    .DataWidth( 18 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
L1_activ_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(L1_activ_V_address0),
    .ce0(L1_activ_V_ce0),
    .we0(L1_activ_V_we0),
    .d0(L1_activ_V_d0),
    .q0(L1_activ_V_q0)
);

mlp_L2_bias_added_V #(
    .DataWidth( 18 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
L2_bias_added_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(L2_bias_added_V_address0),
    .ce0(L2_bias_added_V_ce0),
    .we0(L2_bias_added_V_we0),
    .d0(L2_bias_added_V_d0),
    .q0(L2_bias_added_V_q0)
);

mlp_L2_out_V #(
    .DataWidth( 18 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
L2_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(L2_out_V_address0),
    .ce0(L2_out_V_ce0),
    .we0(L2_out_V_we0),
    .d0(grp_mvprod_layer_2_fu_358_result_V_d0),
    .q0(L2_out_V_q0)
);

mlp_L2_out_V #(
    .DataWidth( 18 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
L2_out_activ_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(L2_out_activ_V_address0),
    .ce0(L2_out_activ_V_ce0),
    .we0(L2_out_activ_V_we0),
    .d0(L2_out_activ_V_d0),
    .q0(L2_out_activ_V_q0)
);

mvprod_layer_2 grp_mvprod_layer_2_fu_358(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mvprod_layer_2_fu_358_ap_start),
    .ap_done(grp_mvprod_layer_2_fu_358_ap_done),
    .ap_idle(grp_mvprod_layer_2_fu_358_ap_idle),
    .ap_ready(grp_mvprod_layer_2_fu_358_ap_ready),
    .matrix_V_address0(grp_mvprod_layer_2_fu_358_matrix_V_address0),
    .matrix_V_ce0(grp_mvprod_layer_2_fu_358_matrix_V_ce0),
    .matrix_V_q0(weights_L2_V_q0),
    .input_V_address0(grp_mvprod_layer_2_fu_358_input_V_address0),
    .input_V_ce0(grp_mvprod_layer_2_fu_358_input_V_ce0),
    .input_V_q0(L2_bias_added_V_q0),
    .result_V_address0(grp_mvprod_layer_2_fu_358_result_V_address0),
    .result_V_ce0(grp_mvprod_layer_2_fu_358_result_V_ce0),
    .result_V_we0(grp_mvprod_layer_2_fu_358_result_V_we0),
    .result_V_d0(grp_mvprod_layer_2_fu_358_result_V_d0)
);

mvprod_layer_1 grp_mvprod_layer_1_fu_366(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mvprod_layer_1_fu_366_ap_start),
    .ap_done(grp_mvprod_layer_1_fu_366_ap_done),
    .ap_idle(grp_mvprod_layer_1_fu_366_ap_idle),
    .ap_ready(grp_mvprod_layer_1_fu_366_ap_ready),
    .matrix_V_address0(grp_mvprod_layer_1_fu_366_matrix_V_address0),
    .matrix_V_ce0(grp_mvprod_layer_1_fu_366_matrix_V_ce0),
    .matrix_V_q0(weights_L1_V_q0),
    .input_V_address0(grp_mvprod_layer_1_fu_366_input_V_address0),
    .input_V_ce0(grp_mvprod_layer_1_fu_366_input_V_ce0),
    .input_V_q0(bias_added_V_q0),
    .result_V_address0(grp_mvprod_layer_1_fu_366_result_V_address0),
    .result_V_ce0(grp_mvprod_layer_1_fu_366_result_V_ce0),
    .result_V_we0(grp_mvprod_layer_1_fu_366_result_V_we0),
    .result_V_d0(grp_mvprod_layer_1_fu_366_result_V_d0)
);

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_686_p0),
    .din1(grp_fu_686_p1),
    .ce(1'b1),
    .dout(grp_fu_686_p2)
);

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_692_p0),
    .din1(grp_fu_692_p1),
    .ce(1'b1),
    .dout(grp_fu_692_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mvprod_layer_1_fu_366_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_i_fu_374_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_mvprod_layer_1_fu_366_ap_start_reg <= 1'b1;
        end else if ((grp_mvprod_layer_1_fu_366_ap_ready == 1'b1)) begin
            grp_mvprod_layer_1_fu_366_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mvprod_layer_2_fu_358_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state14) & (tmp_i5_fu_509_p2 == 1'd1))) begin
            grp_mvprod_layer_2_fu_358_ap_start_reg <= 1'b1;
        end else if ((grp_mvprod_layer_2_fu_358_ap_ready == 1'b1)) begin
            grp_mvprod_layer_2_fu_358_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        digit_reg_335 <= network_digit_2_i_ne_fu_678_p3;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        digit_reg_335 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_i1_reg_292 <= i_2_reg_720;
    end else if (((grp_mvprod_layer_1_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_i1_reg_292 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_i4_reg_303 <= i_1_reg_786;
    end else if (((tmp_i2_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_i4_reg_303 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_i5_reg_314 <= i_3_reg_800;
    end else if (((grp_mvprod_layer_2_fu_358_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        i_i5_reg_314 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_reg_281 <= i_reg_701;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_281 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        k_i_reg_347 <= network_digit_reg_876;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        k_i_reg_347 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        p_0_i_reg_325 <= max_V_1_i_0_i_fu_670_p3;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        p_0_i_reg_325 <= L2_out_activ_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_1_reg_786 <= i_1_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_720 <= i_2_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_3_reg_800 <= i_3_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_701 <= i_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_V_load_reg_712 <= input_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        network_digit_reg_876 <= network_digit_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_i1_reg_837 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        p_Val2_2_i_reg_858[17 : 3] <= p_Val2_2_i_fu_592_p2[17 : 3];
        tmp_8_i_reg_853 <= grp_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_3_reg_747 <= p_Val2_3_fu_425_p3;
        tmp_15_i_reg_752 <= tmp_15_i_fu_431_p2;
        tmp_reg_757 <= {{p_Val2_3_fu_425_p3[15:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_i_reg_752 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        p_Val2_5_i_reg_773[17 : 4] <= p_Val2_5_i_fu_457_p2[17 : 4];
        tmp_18_i_reg_768 <= grp_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_Val2_5_reg_778 <= p_Val2_5_fu_495_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        p_Val2_6_reg_821 <= L2_out_V_q0;
        tmp_2_reg_827 <= L2_out_V_q0[32'd17];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_Val2_7_reg_832 <= p_Val2_7_fu_560_p3;
        tmp_7_i1_reg_837 <= tmp_7_i1_fu_566_p2;
        tmp_s_reg_842 <= {{p_Val2_7_fu_560_p3[16:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        p_Val2_9_reg_863 <= p_Val2_9_fu_630_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_s_reg_736 <= L1_no_activ_V_q0;
        tmp_1_reg_742 <= L1_no_activ_V_q0[32'd17];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i6_22_fu_530_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        tmp_1_i_reg_805[3 : 0] <= tmp_1_i_fu_542_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i2_fu_395_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_i3_reg_725[4 : 0] <= tmp_i3_fu_407_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        L1_activ_V_address0 = tmp_42_i_fu_521_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        L1_activ_V_address0 = L1_activ_V_addr_gep_fu_213_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        L1_activ_V_address0 = tmp_i3_reg_725;
    end else begin
        L1_activ_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        L1_activ_V_ce0 = 1'b1;
    end else begin
        L1_activ_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        L1_activ_V_d0 = p_Val2_i_fu_503_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        L1_activ_V_d0 = p_Val2_5_fu_495_p3;
    end else begin
        L1_activ_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (tmp_1_reg_742 == 1'd1)) | ((tmp_1_reg_742 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        L1_activ_V_we0 = 1'b1;
    end else begin
        L1_activ_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        L1_no_activ_V_address0 = tmp_i3_fu_407_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        L1_no_activ_V_address0 = grp_mvprod_layer_1_fu_366_result_V_address0;
    end else begin
        L1_no_activ_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        L1_no_activ_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        L1_no_activ_V_ce0 = grp_mvprod_layer_1_fu_366_result_V_ce0;
    end else begin
        L1_no_activ_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        L1_no_activ_V_we0 = grp_mvprod_layer_1_fu_366_result_V_we0;
    end else begin
        L1_no_activ_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        L2_bias_added_V_address0 = tmp_i6_fu_526_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        L2_bias_added_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        L2_bias_added_V_address0 = grp_mvprod_layer_2_fu_358_input_V_address0;
    end else begin
        L2_bias_added_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state15))) begin
        L2_bias_added_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        L2_bias_added_V_ce0 = grp_mvprod_layer_2_fu_358_input_V_ce0;
    end else begin
        L2_bias_added_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        L2_bias_added_V_d0 = L1_activ_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        L2_bias_added_V_d0 = 18'd65536;
    end else begin
        L2_bias_added_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((tmp_i2_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        L2_bias_added_V_we0 = 1'b1;
    end else begin
        L2_bias_added_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        L2_out_V_address0 = tmp_1_i_fu_542_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        L2_out_V_address0 = grp_mvprod_layer_2_fu_358_result_V_address0;
    end else begin
        L2_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        L2_out_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        L2_out_V_ce0 = grp_mvprod_layer_2_fu_358_result_V_ce0;
    end else begin
        L2_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        L2_out_V_we0 = grp_mvprod_layer_2_fu_358_result_V_we0;
    end else begin
        L2_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        L2_out_activ_V_address0 = tmp_i1_fu_656_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        L2_out_activ_V_address0 = L2_out_activ_V_addr_1_gep_fu_267_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        L2_out_activ_V_address0 = tmp_1_i_reg_805;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        L2_out_activ_V_address0 = 64'd0;
    end else begin
        L2_out_activ_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state17))) begin
        L2_out_activ_V_ce0 = 1'b1;
    end else begin
        L2_out_activ_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        L2_out_activ_V_d0 = p_Val2_7_i_fu_638_p2;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        L2_out_activ_V_d0 = p_Val2_9_fu_630_p3;
    end else begin
        L2_out_activ_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (tmp_2_reg_827 == 1'd1)) | ((tmp_2_reg_827 == 1'd0) & (1'b1 == ap_CS_fsm_state23)))) begin
        L2_out_activ_V_we0 = 1'b1;
    end else begin
        L2_out_activ_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (tmp_i9_fu_644_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (tmp_i9_fu_644_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_added_V_address0 = tmp_i_19_fu_391_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        bias_added_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_added_V_address0 = grp_mvprod_layer_1_fu_366_input_V_address0;
    end else begin
        bias_added_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        bias_added_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_added_V_ce0 = grp_mvprod_layer_1_fu_366_input_V_ce0;
    end else begin
        bias_added_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_added_V_d0 = input_V_load_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        bias_added_V_d0 = 18'd65536;
    end else begin
        bias_added_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        bias_added_V_we0 = 1'b1;
    end else begin
        bias_added_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_i_fu_374_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_mvprod_layer_1_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_i2_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (tmp_i5_fu_509_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_mvprod_layer_2_fu_358_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (tmp_i6_22_fu_530_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (tmp_i9_fu_644_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign L1_activ_V_addr_gep_fu_213_p3 = tmp_i3_reg_725;

assign L2_out_activ_V_addr_1_gep_fu_267_p3 = tmp_1_i_reg_805;

assign OP1_V_1_fu_582_p1 = p_Val2_7_reg_832;

assign OP1_V_fu_447_p1 = p_Val2_3_reg_747;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = digit_reg_335;

assign grp_fu_686_p0 = OP1_V_fu_447_p1;

assign grp_fu_686_p1 = OP1_V_fu_447_p1;

assign grp_fu_692_p0 = OP1_V_1_fu_582_p1;

assign grp_fu_692_p1 = OP1_V_1_fu_582_p1;

assign grp_mvprod_layer_1_fu_366_ap_start = grp_mvprod_layer_1_fu_366_ap_start_reg;

assign grp_mvprod_layer_2_fu_358_ap_start = grp_mvprod_layer_2_fu_358_ap_start_reg;

assign i_1_fu_515_p2 = (i_i4_reg_303 + 5'd1);

assign i_2_fu_401_p2 = (i_i1_reg_292 + 5'd1);

assign i_3_fu_536_p2 = (i_i5_reg_314 + 4'd1);

assign i_fu_380_p2 = (i_i_reg_281 + 9'd1);

assign input_V_address0 = tmp_43_i_fu_386_p1;

assign max_V_1_i_0_i_fu_670_p3 = ((tmp_41_i_fu_661_p2[0:0] === 1'b1) ? L2_out_activ_V_q0 : p_0_i_reg_325);

assign network_digit_2_i_ne_fu_678_p3 = ((tmp_41_i_fu_661_p2[0:0] === 1'b1) ? network_digit_cast_fu_667_p1 : digit_reg_335);

assign network_digit_cast_fu_667_p1 = network_digit_reg_876;

assign network_digit_fu_650_p2 = (k_i_reg_347 + 4'd1);

assign p_Val2_1_i9_fu_555_p2 = (18'd0 - p_Val2_6_reg_821);

assign p_Val2_2_i_fu_592_p2 = (tmp_i2_24_fu_585_p3 + 18'd32768);

assign p_Val2_3_fu_425_p3 = ((tmp_1_reg_742[0:0] === 1'b1) ? p_Val2_8_i_fu_420_p2 : p_Val2_s_reg_736);

assign p_Val2_4_fu_479_p2 = (tmp_20_i_fu_463_p3 - tmp_21_i_cast_fu_470_p4);

assign p_Val2_5_fu_495_p3 = ((tmp_15_i_reg_752[0:0] === 1'b1) ? 18'd65536 : tmp_23_i_fu_485_p4);

assign p_Val2_5_i_fu_457_p2 = (tmp_17_i_fu_450_p3 + 18'd32768);

assign p_Val2_7_fu_560_p3 = ((tmp_2_reg_827[0:0] === 1'b1) ? p_Val2_1_i9_fu_555_p2 : p_Val2_6_reg_821);

assign p_Val2_7_i_fu_638_p2 = (18'd65536 - p_Val2_9_reg_863);

assign p_Val2_8_fu_614_p2 = (tmp_6_i1_fu_598_p3 - tmp_10_i_cast_fu_605_p4);

assign p_Val2_8_i_fu_420_p2 = (18'd0 - p_Val2_s_reg_736);

assign p_Val2_9_fu_630_p3 = ((tmp_7_i1_reg_837[0:0] === 1'b1) ? 18'd65536 : tmp_12_i_fu_620_p4);

assign p_Val2_i_fu_503_p2 = (18'd65536 - p_Val2_5_reg_778);

assign tmp_10_i_cast_fu_605_p4 = {{tmp_8_i_reg_853[32:5]}};

assign tmp_12_i_fu_620_p4 = {{p_Val2_8_fu_614_p2[27:10]}};

assign tmp_15_i_fu_431_p2 = (($signed(p_Val2_3_fu_425_p3) > $signed(18'd16384)) ? 1'b1 : 1'b0);

assign tmp_17_i_fu_450_p3 = {{tmp_reg_757}, {4'd0}};

assign tmp_1_i_fu_542_p1 = i_i5_reg_314;

assign tmp_20_i_fu_463_p3 = {{p_Val2_5_i_reg_773}, {8'd0}};

assign tmp_21_i_cast_fu_470_p4 = {{tmp_18_i_reg_768[30:5]}};

assign tmp_23_i_fu_485_p4 = {{p_Val2_4_fu_479_p2[25:8]}};

assign tmp_41_i_fu_661_p2 = (($signed(L2_out_activ_V_q0) > $signed(p_0_i_reg_325)) ? 1'b1 : 1'b0);

assign tmp_42_i_fu_521_p1 = i_i4_reg_303;

assign tmp_43_i_fu_386_p1 = i_i_reg_281;

assign tmp_6_i1_fu_598_p3 = {{p_Val2_2_i_reg_858}, {10'd0}};

assign tmp_7_i1_fu_566_p2 = (($signed(p_Val2_7_fu_560_p3) > $signed(18'd32768)) ? 1'b1 : 1'b0);

assign tmp_i1_fu_656_p1 = k_i_reg_347;

assign tmp_i2_24_fu_585_p3 = {{tmp_s_reg_842}, {3'd0}};

assign tmp_i2_fu_395_p2 = ((i_i1_reg_292 == 5'd25) ? 1'b1 : 1'b0);

assign tmp_i3_fu_407_p1 = i_i1_reg_292;

assign tmp_i5_fu_509_p2 = ((i_i4_reg_303 == 5'd25) ? 1'b1 : 1'b0);

assign tmp_i6_22_fu_530_p2 = ((i_i5_reg_314 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_i6_fu_526_p1 = i_1_reg_786;

assign tmp_i9_fu_644_p2 = ((k_i_reg_347 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_i_19_fu_391_p1 = i_reg_701;

assign tmp_i_fu_374_p2 = ((i_i_reg_281 == 9'd400) ? 1'b1 : 1'b0);

assign weights_L1_V_address0 = grp_mvprod_layer_1_fu_366_matrix_V_address0;

assign weights_L1_V_ce0 = grp_mvprod_layer_1_fu_366_matrix_V_ce0;

assign weights_L2_V_address0 = grp_mvprod_layer_2_fu_358_matrix_V_address0;

assign weights_L2_V_ce0 = grp_mvprod_layer_2_fu_358_matrix_V_ce0;

always @ (posedge ap_clk) begin
    tmp_i3_reg_725[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_Val2_5_i_reg_773[3:0] <= 4'b0000;
    tmp_1_i_reg_805[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_Val2_2_i_reg_858[2:0] <= 3'b000;
end

endmodule //mlp
