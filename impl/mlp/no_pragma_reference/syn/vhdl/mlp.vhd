-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_L1_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    weights_L1_V_ce0 : OUT STD_LOGIC;
    weights_L1_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    weights_L2_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_L2_V_ce0 : OUT STD_LOGIC;
    weights_L2_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mlp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mlp,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325tffg676-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.532000,HLS_SYN_LAT=63600,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=4,HLS_SYN_FF=853,HLS_SYN_LUT=1416,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv18_10000 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv18_4000 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_const_lv18_8000 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_380_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_701 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_V_load_reg_712 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_2_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_720 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_i3_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_reg_725 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal L1_no_activ_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_reg_736 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_reg_742 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_425_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_3_reg_747 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_15_i_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_reg_752 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_757 : STD_LOGIC_VECTOR (13 downto 0);
    signal OP1_V_fu_447_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_686_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_18_i_reg_768 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Val2_5_i_fu_457_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_i_reg_773 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_fu_495_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_reg_778 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_1_fu_515_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_786 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_i5_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_536_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_800 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_1_i_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_reg_805 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i6_22_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal L2_out_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_6_reg_821 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_2_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_fu_560_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_reg_832 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_7_i1_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i1_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_842 : STD_LOGIC_VECTOR (14 downto 0);
    signal OP1_V_1_fu_582_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_692_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_8_i_reg_853 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal p_Val2_2_i_fu_592_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_2_i_reg_858 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_9_fu_630_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_9_reg_863 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal L2_out_activ_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal network_digit_fu_650_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal network_digit_reg_876 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_i9_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_V_1_i_0_i_fu_670_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal network_digit_2_i_ne_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_added_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bias_added_V_ce0 : STD_LOGIC;
    signal bias_added_V_we0 : STD_LOGIC;
    signal bias_added_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal bias_added_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L1_no_activ_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal L1_no_activ_V_ce0 : STD_LOGIC;
    signal L1_no_activ_V_we0 : STD_LOGIC;
    signal L1_activ_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal L1_activ_V_ce0 : STD_LOGIC;
    signal L1_activ_V_we0 : STD_LOGIC;
    signal L1_activ_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L1_activ_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L2_bias_added_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal L2_bias_added_V_ce0 : STD_LOGIC;
    signal L2_bias_added_V_we0 : STD_LOGIC;
    signal L2_bias_added_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L2_bias_added_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal L2_out_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal L2_out_V_ce0 : STD_LOGIC;
    signal L2_out_V_we0 : STD_LOGIC;
    signal L2_out_activ_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal L2_out_activ_V_ce0 : STD_LOGIC;
    signal L2_out_activ_V_we0 : STD_LOGIC;
    signal L2_out_activ_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_mvprod_layer_2_fu_358_ap_start : STD_LOGIC;
    signal grp_mvprod_layer_2_fu_358_ap_done : STD_LOGIC;
    signal grp_mvprod_layer_2_fu_358_ap_idle : STD_LOGIC;
    signal grp_mvprod_layer_2_fu_358_ap_ready : STD_LOGIC;
    signal grp_mvprod_layer_2_fu_358_matrix_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_mvprod_layer_2_fu_358_matrix_V_ce0 : STD_LOGIC;
    signal grp_mvprod_layer_2_fu_358_input_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mvprod_layer_2_fu_358_input_V_ce0 : STD_LOGIC;
    signal grp_mvprod_layer_2_fu_358_result_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mvprod_layer_2_fu_358_result_V_ce0 : STD_LOGIC;
    signal grp_mvprod_layer_2_fu_358_result_V_we0 : STD_LOGIC;
    signal grp_mvprod_layer_2_fu_358_result_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_mvprod_layer_1_fu_366_ap_start : STD_LOGIC;
    signal grp_mvprod_layer_1_fu_366_ap_done : STD_LOGIC;
    signal grp_mvprod_layer_1_fu_366_ap_idle : STD_LOGIC;
    signal grp_mvprod_layer_1_fu_366_ap_ready : STD_LOGIC;
    signal grp_mvprod_layer_1_fu_366_matrix_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_mvprod_layer_1_fu_366_matrix_V_ce0 : STD_LOGIC;
    signal grp_mvprod_layer_1_fu_366_input_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_mvprod_layer_1_fu_366_input_V_ce0 : STD_LOGIC;
    signal grp_mvprod_layer_1_fu_366_result_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mvprod_layer_1_fu_366_result_V_ce0 : STD_LOGIC;
    signal grp_mvprod_layer_1_fu_366_result_V_we0 : STD_LOGIC;
    signal grp_mvprod_layer_1_fu_366_result_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_i_reg_281 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_i1_reg_292 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_i4_reg_303 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_i5_reg_314 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_0_i_reg_325 : STD_LOGIC_VECTOR (17 downto 0);
    signal digit_reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i_reg_347 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mvprod_layer_2_fu_358_ap_start_reg : STD_LOGIC := '0';
    signal grp_mvprod_layer_1_fu_366_ap_start_reg : STD_LOGIC := '0';
    signal tmp_43_i_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_19_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal L1_activ_V_addr_gep_fu_213_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_i_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i6_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal L2_out_activ_V_addr_1_gep_fu_267_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i1_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_i_fu_503_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_i_fu_638_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_i_fu_420_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_17_i_fu_450_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_i_fu_463_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_21_i_cast_fu_470_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_4_fu_479_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_23_i_fu_485_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_1_i9_fu_555_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_i2_24_fu_585_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_i1_fu_598_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_10_i_cast_fu_605_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_8_fu_614_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_12_i_fu_620_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_41_i_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal network_digit_cast_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_686_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_686_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_692_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_692_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component mvprod_layer_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        matrix_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        matrix_V_ce0 : OUT STD_LOGIC;
        matrix_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        result_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_V_ce0 : OUT STD_LOGIC;
        result_V_we0 : OUT STD_LOGIC;
        result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component mvprod_layer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        matrix_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        matrix_V_ce0 : OUT STD_LOGIC;
        matrix_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        result_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        result_V_ce0 : OUT STD_LOGIC;
        result_V_we0 : OUT STD_LOGIC;
        result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component mlp_mul_mul_18s_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component mlp_bias_added_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component mlp_L1_no_activ_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component mlp_L2_bias_added_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component mlp_L2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    bias_added_V_U : component mlp_bias_added_V
    generic map (
        DataWidth => 18,
        AddressRange => 401,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_added_V_address0,
        ce0 => bias_added_V_ce0,
        we0 => bias_added_V_we0,
        d0 => bias_added_V_d0,
        q0 => bias_added_V_q0);

    L1_no_activ_V_U : component mlp_L1_no_activ_V
    generic map (
        DataWidth => 18,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L1_no_activ_V_address0,
        ce0 => L1_no_activ_V_ce0,
        we0 => L1_no_activ_V_we0,
        d0 => grp_mvprod_layer_1_fu_366_result_V_d0,
        q0 => L1_no_activ_V_q0);

    L1_activ_V_U : component mlp_L1_no_activ_V
    generic map (
        DataWidth => 18,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L1_activ_V_address0,
        ce0 => L1_activ_V_ce0,
        we0 => L1_activ_V_we0,
        d0 => L1_activ_V_d0,
        q0 => L1_activ_V_q0);

    L2_bias_added_V_U : component mlp_L2_bias_added_V
    generic map (
        DataWidth => 18,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L2_bias_added_V_address0,
        ce0 => L2_bias_added_V_ce0,
        we0 => L2_bias_added_V_we0,
        d0 => L2_bias_added_V_d0,
        q0 => L2_bias_added_V_q0);

    L2_out_V_U : component mlp_L2_out_V
    generic map (
        DataWidth => 18,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L2_out_V_address0,
        ce0 => L2_out_V_ce0,
        we0 => L2_out_V_we0,
        d0 => grp_mvprod_layer_2_fu_358_result_V_d0,
        q0 => L2_out_V_q0);

    L2_out_activ_V_U : component mlp_L2_out_V
    generic map (
        DataWidth => 18,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L2_out_activ_V_address0,
        ce0 => L2_out_activ_V_ce0,
        we0 => L2_out_activ_V_we0,
        d0 => L2_out_activ_V_d0,
        q0 => L2_out_activ_V_q0);

    grp_mvprod_layer_2_fu_358 : component mvprod_layer_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mvprod_layer_2_fu_358_ap_start,
        ap_done => grp_mvprod_layer_2_fu_358_ap_done,
        ap_idle => grp_mvprod_layer_2_fu_358_ap_idle,
        ap_ready => grp_mvprod_layer_2_fu_358_ap_ready,
        matrix_V_address0 => grp_mvprod_layer_2_fu_358_matrix_V_address0,
        matrix_V_ce0 => grp_mvprod_layer_2_fu_358_matrix_V_ce0,
        matrix_V_q0 => weights_L2_V_q0,
        input_V_address0 => grp_mvprod_layer_2_fu_358_input_V_address0,
        input_V_ce0 => grp_mvprod_layer_2_fu_358_input_V_ce0,
        input_V_q0 => L2_bias_added_V_q0,
        result_V_address0 => grp_mvprod_layer_2_fu_358_result_V_address0,
        result_V_ce0 => grp_mvprod_layer_2_fu_358_result_V_ce0,
        result_V_we0 => grp_mvprod_layer_2_fu_358_result_V_we0,
        result_V_d0 => grp_mvprod_layer_2_fu_358_result_V_d0);

    grp_mvprod_layer_1_fu_366 : component mvprod_layer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mvprod_layer_1_fu_366_ap_start,
        ap_done => grp_mvprod_layer_1_fu_366_ap_done,
        ap_idle => grp_mvprod_layer_1_fu_366_ap_idle,
        ap_ready => grp_mvprod_layer_1_fu_366_ap_ready,
        matrix_V_address0 => grp_mvprod_layer_1_fu_366_matrix_V_address0,
        matrix_V_ce0 => grp_mvprod_layer_1_fu_366_matrix_V_ce0,
        matrix_V_q0 => weights_L1_V_q0,
        input_V_address0 => grp_mvprod_layer_1_fu_366_input_V_address0,
        input_V_ce0 => grp_mvprod_layer_1_fu_366_input_V_ce0,
        input_V_q0 => bias_added_V_q0,
        result_V_address0 => grp_mvprod_layer_1_fu_366_result_V_address0,
        result_V_ce0 => grp_mvprod_layer_1_fu_366_result_V_ce0,
        result_V_we0 => grp_mvprod_layer_1_fu_366_result_V_we0,
        result_V_d0 => grp_mvprod_layer_1_fu_366_result_V_d0);

    mlp_mul_mul_18s_1cud_U11 : component mlp_mul_mul_18s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_686_p0,
        din1 => grp_fu_686_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_686_p2);

    mlp_mul_mul_18s_1cud_U12 : component mlp_mul_mul_18s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_692_p0,
        din1 => grp_fu_692_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_692_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mvprod_layer_1_fu_366_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mvprod_layer_1_fu_366_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_i_fu_374_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_mvprod_layer_1_fu_366_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mvprod_layer_1_fu_366_ap_ready = ap_const_logic_1)) then 
                    grp_mvprod_layer_1_fu_366_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mvprod_layer_2_fu_358_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mvprod_layer_2_fu_358_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_i5_fu_509_p2 = ap_const_lv1_1))) then 
                    grp_mvprod_layer_2_fu_358_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mvprod_layer_2_fu_358_ap_ready = ap_const_logic_1)) then 
                    grp_mvprod_layer_2_fu_358_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    digit_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                digit_reg_335 <= network_digit_2_i_ne_fu_678_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                digit_reg_335 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    i_i1_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_i1_reg_292 <= i_2_reg_720;
            elsif (((grp_mvprod_layer_1_fu_366_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_i1_reg_292 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_i4_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_i4_reg_303 <= i_1_reg_786;
            elsif (((tmp_i2_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_i4_reg_303 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_i5_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_i5_reg_314 <= i_3_reg_800;
            elsif (((grp_mvprod_layer_2_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_i5_reg_314 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_i_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_reg_281 <= i_reg_701;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_281 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    k_i_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                k_i_reg_347 <= network_digit_reg_876;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                k_i_reg_347 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_0_i_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                p_0_i_reg_325 <= max_V_1_i_0_i_fu_670_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                p_0_i_reg_325 <= L2_out_activ_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_1_reg_786 <= i_1_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_2_reg_720 <= i_2_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_3_reg_800 <= i_3_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_701 <= i_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                input_V_load_reg_712 <= input_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                network_digit_reg_876 <= network_digit_fu_650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_i1_reg_837 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    p_Val2_2_i_reg_858(17 downto 3) <= p_Val2_2_i_fu_592_p2(17 downto 3);
                tmp_8_i_reg_853 <= grp_fu_692_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_3_reg_747 <= p_Val2_3_fu_425_p3;
                tmp_15_i_reg_752 <= tmp_15_i_fu_431_p2;
                tmp_reg_757 <= p_Val2_3_fu_425_p3(15 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_15_i_reg_752 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    p_Val2_5_i_reg_773(17 downto 4) <= p_Val2_5_i_fu_457_p2(17 downto 4);
                tmp_18_i_reg_768 <= grp_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                p_Val2_5_reg_778 <= p_Val2_5_fu_495_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                p_Val2_6_reg_821 <= L2_out_V_q0;
                tmp_2_reg_827 <= L2_out_V_q0(17 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                p_Val2_7_reg_832 <= p_Val2_7_fu_560_p3;
                tmp_7_i1_reg_837 <= tmp_7_i1_fu_566_p2;
                tmp_s_reg_842 <= p_Val2_7_fu_560_p3(16 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                p_Val2_9_reg_863 <= p_Val2_9_fu_630_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Val2_s_reg_736 <= L1_no_activ_V_q0;
                tmp_1_reg_742 <= L1_no_activ_V_q0(17 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i6_22_fu_530_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    tmp_1_i_reg_805(3 downto 0) <= tmp_1_i_fu_542_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i2_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_i3_reg_725(4 downto 0) <= tmp_i3_fu_407_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp_i3_reg_725(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_Val2_5_i_reg_773(3 downto 0) <= "0000";
    tmp_1_i_reg_805(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_Val2_2_i_reg_858(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_i_fu_374_p2, ap_CS_fsm_state6, tmp_i2_fu_395_p2, ap_CS_fsm_state14, tmp_i5_fu_509_p2, ap_CS_fsm_state17, tmp_i6_22_fu_530_p2, ap_CS_fsm_state26, tmp_i9_fu_644_p2, grp_mvprod_layer_2_fu_358_ap_done, grp_mvprod_layer_1_fu_366_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_i_fu_374_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((grp_mvprod_layer_1_fu_366_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((tmp_i2_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_i5_fu_509_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((grp_mvprod_layer_2_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_i6_22_fu_530_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_i9_fu_644_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    L1_activ_V_addr_gep_fu_213_p3 <= tmp_i3_reg_725(5 - 1 downto 0);

    L1_activ_V_address0_assign_proc : process(tmp_i3_reg_725, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state13, L1_activ_V_addr_gep_fu_213_p3, tmp_42_i_fu_521_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            L1_activ_V_address0 <= tmp_42_i_fu_521_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            L1_activ_V_address0 <= L1_activ_V_addr_gep_fu_213_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            L1_activ_V_address0 <= tmp_i3_reg_725(5 - 1 downto 0);
        else 
            L1_activ_V_address0 <= "XXXXX";
        end if; 
    end process;


    L1_activ_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            L1_activ_V_ce0 <= ap_const_logic_1;
        else 
            L1_activ_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L1_activ_V_d0_assign_proc : process(p_Val2_5_fu_495_p3, ap_CS_fsm_state12, ap_CS_fsm_state13, p_Val2_i_fu_503_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            L1_activ_V_d0 <= p_Val2_i_fu_503_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            L1_activ_V_d0 <= p_Val2_5_fu_495_p3;
        else 
            L1_activ_V_d0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L1_activ_V_we0_assign_proc : process(tmp_1_reg_742, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_1_reg_742 = ap_const_lv1_1)) or ((tmp_1_reg_742 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            L1_activ_V_we0 <= ap_const_logic_1;
        else 
            L1_activ_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    L1_no_activ_V_address0_assign_proc : process(ap_CS_fsm_state6, tmp_i3_fu_407_p1, grp_mvprod_layer_1_fu_366_result_V_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            L1_no_activ_V_address0 <= tmp_i3_fu_407_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            L1_no_activ_V_address0 <= grp_mvprod_layer_1_fu_366_result_V_address0;
        else 
            L1_no_activ_V_address0 <= "XXXXX";
        end if; 
    end process;


    L1_no_activ_V_ce0_assign_proc : process(ap_CS_fsm_state6, grp_mvprod_layer_1_fu_366_result_V_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            L1_no_activ_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            L1_no_activ_V_ce0 <= grp_mvprod_layer_1_fu_366_result_V_ce0;
        else 
            L1_no_activ_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L1_no_activ_V_we0_assign_proc : process(grp_mvprod_layer_1_fu_366_result_V_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            L1_no_activ_V_we0 <= grp_mvprod_layer_1_fu_366_result_V_we0;
        else 
            L1_no_activ_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    L2_bias_added_V_address0_assign_proc : process(ap_CS_fsm_state6, grp_mvprod_layer_2_fu_358_input_V_address0, ap_CS_fsm_state15, ap_CS_fsm_state16, tmp_i6_fu_526_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            L2_bias_added_V_address0 <= tmp_i6_fu_526_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            L2_bias_added_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            L2_bias_added_V_address0 <= grp_mvprod_layer_2_fu_358_input_V_address0;
        else 
            L2_bias_added_V_address0 <= "XXXXX";
        end if; 
    end process;


    L2_bias_added_V_ce0_assign_proc : process(ap_CS_fsm_state6, grp_mvprod_layer_2_fu_358_input_V_ce0, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            L2_bias_added_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            L2_bias_added_V_ce0 <= grp_mvprod_layer_2_fu_358_input_V_ce0;
        else 
            L2_bias_added_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L2_bias_added_V_d0_assign_proc : process(ap_CS_fsm_state6, L1_activ_V_q0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            L2_bias_added_V_d0 <= L1_activ_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            L2_bias_added_V_d0 <= ap_const_lv18_10000;
        else 
            L2_bias_added_V_d0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L2_bias_added_V_we0_assign_proc : process(ap_CS_fsm_state6, tmp_i2_fu_395_p2, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((tmp_i2_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            L2_bias_added_V_we0 <= ap_const_logic_1;
        else 
            L2_bias_added_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    L2_out_V_address0_assign_proc : process(ap_CS_fsm_state17, tmp_1_i_fu_542_p1, grp_mvprod_layer_2_fu_358_result_V_address0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            L2_out_V_address0 <= tmp_1_i_fu_542_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            L2_out_V_address0 <= grp_mvprod_layer_2_fu_358_result_V_address0;
        else 
            L2_out_V_address0 <= "XXXX";
        end if; 
    end process;


    L2_out_V_ce0_assign_proc : process(ap_CS_fsm_state17, grp_mvprod_layer_2_fu_358_result_V_ce0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            L2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            L2_out_V_ce0 <= grp_mvprod_layer_2_fu_358_result_V_ce0;
        else 
            L2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L2_out_V_we0_assign_proc : process(grp_mvprod_layer_2_fu_358_result_V_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            L2_out_V_we0 <= grp_mvprod_layer_2_fu_358_result_V_we0;
        else 
            L2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    L2_out_activ_V_addr_1_gep_fu_267_p3 <= tmp_1_i_reg_805(4 - 1 downto 0);

    L2_out_activ_V_address0_assign_proc : process(ap_CS_fsm_state17, tmp_1_i_reg_805, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state24, L2_out_activ_V_addr_1_gep_fu_267_p3, tmp_i1_fu_656_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            L2_out_activ_V_address0 <= tmp_i1_fu_656_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            L2_out_activ_V_address0 <= L2_out_activ_V_addr_1_gep_fu_267_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            L2_out_activ_V_address0 <= tmp_1_i_reg_805(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            L2_out_activ_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            L2_out_activ_V_address0 <= "XXXX";
        end if; 
    end process;


    L2_out_activ_V_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            L2_out_activ_V_ce0 <= ap_const_logic_1;
        else 
            L2_out_activ_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L2_out_activ_V_d0_assign_proc : process(p_Val2_9_fu_630_p3, ap_CS_fsm_state23, ap_CS_fsm_state24, p_Val2_7_i_fu_638_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            L2_out_activ_V_d0 <= p_Val2_7_i_fu_638_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            L2_out_activ_V_d0 <= p_Val2_9_fu_630_p3;
        else 
            L2_out_activ_V_d0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L2_out_activ_V_we0_assign_proc : process(tmp_2_reg_827, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_2_reg_827 = ap_const_lv1_1)) or ((tmp_2_reg_827 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            L2_out_activ_V_we0 <= ap_const_logic_1;
        else 
            L2_out_activ_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        OP1_V_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_reg_832),36));

        OP1_V_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_3_reg_747),36));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state26, tmp_i9_fu_644_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_i9_fu_644_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26, tmp_i9_fu_644_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_i9_fu_644_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= digit_reg_335;

    bias_added_V_address0_assign_proc : process(ap_CS_fsm_state1, grp_mvprod_layer_1_fu_366_input_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_i_19_fu_391_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_added_V_address0 <= tmp_i_19_fu_391_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bias_added_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_added_V_address0 <= grp_mvprod_layer_1_fu_366_input_V_address0;
        else 
            bias_added_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bias_added_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_mvprod_layer_1_fu_366_input_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bias_added_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_added_V_ce0 <= grp_mvprod_layer_1_fu_366_input_V_ce0;
        else 
            bias_added_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_added_V_d0_assign_proc : process(ap_CS_fsm_state1, input_V_load_reg_712, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_added_V_d0 <= input_V_load_reg_712;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bias_added_V_d0 <= ap_const_lv18_10000;
        else 
            bias_added_V_d0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bias_added_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bias_added_V_we0 <= ap_const_logic_1;
        else 
            bias_added_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_686_p0 <= OP1_V_fu_447_p1(18 - 1 downto 0);
    grp_fu_686_p1 <= OP1_V_fu_447_p1(18 - 1 downto 0);
    grp_fu_692_p0 <= OP1_V_1_fu_582_p1(18 - 1 downto 0);
    grp_fu_692_p1 <= OP1_V_1_fu_582_p1(18 - 1 downto 0);
    grp_mvprod_layer_1_fu_366_ap_start <= grp_mvprod_layer_1_fu_366_ap_start_reg;
    grp_mvprod_layer_2_fu_358_ap_start <= grp_mvprod_layer_2_fu_358_ap_start_reg;
    i_1_fu_515_p2 <= std_logic_vector(unsigned(i_i4_reg_303) + unsigned(ap_const_lv5_1));
    i_2_fu_401_p2 <= std_logic_vector(unsigned(i_i1_reg_292) + unsigned(ap_const_lv5_1));
    i_3_fu_536_p2 <= std_logic_vector(unsigned(i_i5_reg_314) + unsigned(ap_const_lv4_1));
    i_fu_380_p2 <= std_logic_vector(unsigned(i_i_reg_281) + unsigned(ap_const_lv9_1));
    input_V_address0 <= tmp_43_i_fu_386_p1(9 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_V_1_i_0_i_fu_670_p3 <= 
        L2_out_activ_V_q0 when (tmp_41_i_fu_661_p2(0) = '1') else 
        p_0_i_reg_325;
    network_digit_2_i_ne_fu_678_p3 <= 
        network_digit_cast_fu_667_p1 when (tmp_41_i_fu_661_p2(0) = '1') else 
        digit_reg_335;
    network_digit_cast_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(network_digit_reg_876),32));
    network_digit_fu_650_p2 <= std_logic_vector(unsigned(k_i_reg_347) + unsigned(ap_const_lv4_1));
    p_Val2_1_i9_fu_555_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(p_Val2_6_reg_821));
    p_Val2_2_i_fu_592_p2 <= std_logic_vector(unsigned(tmp_i2_24_fu_585_p3) + unsigned(ap_const_lv18_8000));
    p_Val2_3_fu_425_p3 <= 
        p_Val2_8_i_fu_420_p2 when (tmp_1_reg_742(0) = '1') else 
        p_Val2_s_reg_736;
    p_Val2_4_fu_479_p2 <= std_logic_vector(unsigned(tmp_20_i_fu_463_p3) - unsigned(tmp_21_i_cast_fu_470_p4));
    p_Val2_5_fu_495_p3 <= 
        ap_const_lv18_10000 when (tmp_15_i_reg_752(0) = '1') else 
        tmp_23_i_fu_485_p4;
    p_Val2_5_i_fu_457_p2 <= std_logic_vector(unsigned(tmp_17_i_fu_450_p3) + unsigned(ap_const_lv18_8000));
    p_Val2_7_fu_560_p3 <= 
        p_Val2_1_i9_fu_555_p2 when (tmp_2_reg_827(0) = '1') else 
        p_Val2_6_reg_821;
    p_Val2_7_i_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv18_10000) - unsigned(p_Val2_9_reg_863));
    p_Val2_8_fu_614_p2 <= std_logic_vector(unsigned(tmp_6_i1_fu_598_p3) - unsigned(tmp_10_i_cast_fu_605_p4));
    p_Val2_8_i_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(p_Val2_s_reg_736));
    p_Val2_9_fu_630_p3 <= 
        ap_const_lv18_10000 when (tmp_7_i1_reg_837(0) = '1') else 
        tmp_12_i_fu_620_p4;
    p_Val2_i_fu_503_p2 <= std_logic_vector(unsigned(ap_const_lv18_10000) - unsigned(p_Val2_5_reg_778));
    tmp_10_i_cast_fu_605_p4 <= tmp_8_i_reg_853(32 downto 5);
    tmp_12_i_fu_620_p4 <= p_Val2_8_fu_614_p2(27 downto 10);
    tmp_15_i_fu_431_p2 <= "1" when (signed(p_Val2_3_fu_425_p3) > signed(ap_const_lv18_4000)) else "0";
    tmp_17_i_fu_450_p3 <= (tmp_reg_757 & ap_const_lv4_0);
    tmp_1_i_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_314),64));
    tmp_20_i_fu_463_p3 <= (p_Val2_5_i_reg_773 & ap_const_lv8_0);
    tmp_21_i_cast_fu_470_p4 <= tmp_18_i_reg_768(30 downto 5);
    tmp_23_i_fu_485_p4 <= p_Val2_4_fu_479_p2(25 downto 8);
    tmp_41_i_fu_661_p2 <= "1" when (signed(L2_out_activ_V_q0) > signed(p_0_i_reg_325)) else "0";
    tmp_42_i_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_303),64));
    tmp_43_i_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_281),64));
    tmp_6_i1_fu_598_p3 <= (p_Val2_2_i_reg_858 & ap_const_lv10_0);
    tmp_7_i1_fu_566_p2 <= "1" when (signed(p_Val2_7_fu_560_p3) > signed(ap_const_lv18_8000)) else "0";
    tmp_i1_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_i_reg_347),64));
    tmp_i2_24_fu_585_p3 <= (tmp_s_reg_842 & ap_const_lv3_0);
    tmp_i2_fu_395_p2 <= "1" when (i_i1_reg_292 = ap_const_lv5_19) else "0";
    tmp_i3_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_292),64));
    tmp_i5_fu_509_p2 <= "1" when (i_i4_reg_303 = ap_const_lv5_19) else "0";
    tmp_i6_22_fu_530_p2 <= "1" when (i_i5_reg_314 = ap_const_lv4_A) else "0";
    tmp_i6_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_786),64));
    tmp_i9_fu_644_p2 <= "1" when (k_i_reg_347 = ap_const_lv4_A) else "0";
    tmp_i_19_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_701),64));
    tmp_i_fu_374_p2 <= "1" when (i_i_reg_281 = ap_const_lv9_190) else "0";
    weights_L1_V_address0 <= grp_mvprod_layer_1_fu_366_matrix_V_address0;
    weights_L1_V_ce0 <= grp_mvprod_layer_1_fu_366_matrix_V_ce0;
    weights_L2_V_address0 <= grp_mvprod_layer_2_fu_358_matrix_V_address0;
    weights_L2_V_ce0 <= grp_mvprod_layer_2_fu_358_matrix_V_ce0;
end behav;
