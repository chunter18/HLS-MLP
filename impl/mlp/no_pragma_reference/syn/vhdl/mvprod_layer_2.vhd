-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mvprod_layer_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    matrix_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    matrix_V_ce0 : OUT STD_LOGIC;
    matrix_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    result_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    result_V_ce0 : OUT STD_LOGIC;
    result_V_we0 : OUT STD_LOGIC;
    result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of mvprod_layer_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv9_1A : STD_LOGIC_VECTOR (8 downto 0) := "000011010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_138_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_270 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal m_1_fu_150_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_1_reg_278 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_V_addr_reg_283 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_167_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_1_reg_291 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_9_fu_177_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_reg_296 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_V_load_reg_320 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal matrix_V_load_reg_325 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_s_reg_340 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal m_reg_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_109 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_reg_121 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_s_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_cast_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_V_1_fu_56 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_cast_fu_173_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_213_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_220_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_28_cast4_fu_228_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_5_fu_232_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_1_fu_235_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component mlp_mul_mul_18s_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    mlp_mul_mul_18s_1cud_U6 : component mlp_mul_mul_18s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => matrix_V_load_reg_325,
        din1 => input_V_load_reg_320,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_V_1_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                acc_V_1_fu_56 <= p_Val2_1_fu_235_p2(34 downto 17);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                acc_V_1_fu_56 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    m_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_reg_98 <= m_1_reg_278;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_reg_98 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    n_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                n_reg_121 <= n_1_reg_291;
            elsif (((tmp_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                n_reg_121 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_109 <= next_mul_reg_270;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_109 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                input_V_load_reg_320 <= input_V_q0;
                matrix_V_load_reg_325 <= matrix_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                m_1_reg_278 <= m_1_fu_150_p2;
                next_mul_reg_270 <= next_mul_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                n_1_reg_291 <= n_1_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_s_reg_340 <= grp_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                result_V_addr_reg_283 <= tmp_s_fu_156_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_2_reg_301 <= tmp_2_fu_183_p2;
                tmp_7_reg_316 <= tmp_7_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_9_reg_296 <= tmp_9_fu_177_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_144_p2, ap_CS_fsm_state3, tmp_1_fu_161_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_1_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_144_p2)
    begin
        if ((((tmp_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_144_p2)
    begin
        if (((tmp_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    input_V_address0 <= tmp_3_fu_189_p1(5 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_150_p2 <= std_logic_vector(unsigned(m_reg_98) + unsigned(ap_const_lv4_1));
    matrix_V_address0 <= tmp_9_cast_fu_194_p1(9 - 1 downto 0);

    matrix_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matrix_V_ce0 <= ap_const_logic_1;
        else 
            matrix_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    n_1_fu_167_p2 <= std_logic_vector(unsigned(n_reg_121) + unsigned(ap_const_lv5_1));
    next_mul_fu_138_p2 <= std_logic_vector(unsigned(phi_mul_reg_109) + unsigned(ap_const_lv9_1A));
    p_Val2_1_fu_235_p2 <= std_logic_vector(unsigned(tmp_28_cast4_fu_228_p1) + unsigned(tmp_5_fu_232_p1));
    result_V_address0 <= result_V_addr_reg_283;

    result_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            result_V_ce0 <= ap_const_logic_1;
        else 
            result_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_V_d0 <= p_Val2_1_fu_235_p2(34 downto 17);

    result_V_we0_assign_proc : process(tmp_7_reg_316, ap_CS_fsm_state9)
    begin
        if (((tmp_7_reg_316 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            result_V_we0 <= ap_const_logic_1;
        else 
            result_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_161_p2 <= "1" when (n_reg_121 = ap_const_lv5_1A) else "0";
    tmp_28_cast4_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_220_p3),37));
    tmp_2_fu_183_p2 <= "1" when (n_reg_121 = ap_const_lv5_0) else "0";
    tmp_3_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_121),9));
    tmp_3_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_121),64));
    tmp_4_fu_220_p3 <= (tmp_6_fu_213_p3 & ap_const_lv17_0);
    tmp_5_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_340),37));
    tmp_6_fu_213_p3 <= 
        ap_const_lv18_0 when (tmp_2_reg_301(0) = '1') else 
        acc_V_1_fu_56;
    tmp_7_fu_198_p2 <= "1" when (n_reg_121 = ap_const_lv5_19) else "0";
    tmp_9_cast_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_296),64));
    tmp_9_fu_177_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_173_p1) + unsigned(phi_mul_reg_109));
    tmp_fu_144_p2 <= "1" when (m_reg_98 = ap_const_lv4_A) else "0";
    tmp_s_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_98),64));
end behav;
