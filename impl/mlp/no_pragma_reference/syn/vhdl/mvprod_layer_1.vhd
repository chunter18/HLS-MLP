-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mvprod_layer_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    matrix_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    matrix_V_ce0 : OUT STD_LOGIC;
    matrix_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    result_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    result_V_ce0 : OUT STD_LOGIC;
    result_V_we0 : OUT STD_LOGIC;
    result_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of mvprod_layer_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv14_191 : STD_LOGIC_VECTOR (13 downto 0) := "00000110010001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_191 : STD_LOGIC_VECTOR (8 downto 0) := "110010001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_138_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_263 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal m_2_fu_150_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_2_reg_271 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_V_addr_reg_276 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_2_fu_167_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_2_reg_284 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_7_fu_177_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_reg_289 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_294 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_5_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal acc_V_reg_323 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal m_reg_98 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_109 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_reg_121 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_s_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_V_2_fu_56 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_cast_fu_173_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_10_fu_215_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_222_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_247_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_247_p20 : STD_LOGIC_VECTOR (38 downto 0);

    component mlp_mac_muladd_18bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (37 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;



begin
    mlp_mac_muladd_18bkb_U1 : component mlp_mac_muladd_18bkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 38,
        dout_WIDTH => 39)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => matrix_V_q0,
        din1 => input_V_q0,
        din2 => grp_fu_247_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_247_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_V_2_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                acc_V_2_fu_56 <= acc_V_reg_323;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                acc_V_2_fu_56 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    m_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_reg_98 <= m_2_reg_271;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_reg_98 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    n_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                n_reg_121 <= n_2_reg_284;
            elsif (((tmp_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                n_reg_121 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_109 <= next_mul_reg_263;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_109 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                acc_V_reg_323 <= grp_fu_247_p3(37 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                m_2_reg_271 <= m_2_fu_150_p2;
                next_mul_reg_263 <= next_mul_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                n_2_reg_284 <= n_2_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                result_V_addr_reg_276 <= tmp_s_fu_156_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_1_reg_294 <= tmp_1_fu_183_p2;
                tmp_5_reg_309 <= tmp_5_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_7_reg_289 <= tmp_7_fu_177_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_144_p2, ap_CS_fsm_state3, tmp_8_fu_161_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_8_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_144_p2)
    begin
        if ((((tmp_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_144_p2)
    begin
        if (((tmp_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_247_p2 <= grp_fu_247_p20(38 - 1 downto 0);
    grp_fu_247_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_222_p3),39));
    input_V_address0 <= tmp_2_fu_189_p1(9 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_2_fu_150_p2 <= std_logic_vector(unsigned(m_reg_98) + unsigned(ap_const_lv5_1));
    matrix_V_address0 <= tmp_16_cast_fu_194_p1(14 - 1 downto 0);

    matrix_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matrix_V_ce0 <= ap_const_logic_1;
        else 
            matrix_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    n_2_fu_167_p2 <= std_logic_vector(unsigned(n_reg_121) + unsigned(ap_const_lv9_1));
    next_mul_fu_138_p2 <= std_logic_vector(unsigned(phi_mul_reg_109) + unsigned(ap_const_lv14_191));
    result_V_address0 <= result_V_addr_reg_276;

    result_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            result_V_ce0 <= ap_const_logic_1;
        else 
            result_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_V_d0 <= acc_V_reg_323;

    result_V_we0_assign_proc : process(tmp_5_reg_309, ap_CS_fsm_state8)
    begin
        if (((tmp_5_reg_309 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            result_V_we0 <= ap_const_logic_1;
        else 
            result_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_215_p3 <= 
        ap_const_lv18_0 when (tmp_1_reg_294(0) = '1') else 
        acc_V_2_fu_56;
    tmp_16_cast_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_289),64));
    tmp_1_fu_183_p2 <= "1" when (n_reg_121 = ap_const_lv9_0) else "0";
    tmp_2_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_121),14));
    tmp_2_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_121),64));
    tmp_3_fu_222_p3 <= (tmp_10_fu_215_p3 & ap_const_lv20_0);
    tmp_5_fu_198_p2 <= "1" when (n_reg_121 = ap_const_lv9_190) else "0";
    tmp_7_fu_177_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_173_p1) + unsigned(phi_mul_reg_109));
    tmp_8_fu_161_p2 <= "1" when (n_reg_121 = ap_const_lv9_191) else "0";
    tmp_fu_144_p2 <= "1" when (m_reg_98 = ap_const_lv5_19) else "0";
    tmp_s_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_98),64));
end behav;
