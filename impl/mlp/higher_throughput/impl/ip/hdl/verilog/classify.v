// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module classify (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        activated_L2_0_V_re,
        activated_L2_1_V_re,
        activated_L2_2_V_re,
        activated_L2_3_V_re,
        activated_L2_4_V_re,
        activated_L2_5_V_re,
        activated_L2_6_V_re,
        activated_L2_7_V_re,
        activated_L2_8_V_re,
        activated_L2_9_V_re,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [17:0] activated_L2_0_V_re;
input  [17:0] activated_L2_1_V_re;
input  [17:0] activated_L2_2_V_re;
input  [17:0] activated_L2_3_V_re;
input  [17:0] activated_L2_4_V_re;
input  [17:0] activated_L2_5_V_re;
input  [17:0] activated_L2_6_V_re;
input  [17:0] activated_L2_7_V_re;
input  [17:0] activated_L2_8_V_re;
input  [17:0] activated_L2_9_V_re;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [17:0] activated_L2_9_V_re_1_reg_294;
reg   [17:0] activated_L2_9_V_re_1_reg_294_pp0_iter1_reg;
reg   [17:0] activated_L2_9_V_re_1_reg_294_pp0_iter2_reg;
reg   [17:0] activated_L2_9_V_re_1_reg_294_pp0_iter3_reg;
reg   [17:0] activated_L2_9_V_re_1_reg_294_pp0_iter4_reg;
reg   [17:0] activated_L2_8_V_re_1_reg_299;
reg   [17:0] activated_L2_8_V_re_1_reg_299_pp0_iter1_reg;
reg   [17:0] activated_L2_8_V_re_1_reg_299_pp0_iter2_reg;
reg   [17:0] activated_L2_8_V_re_1_reg_299_pp0_iter3_reg;
reg   [17:0] activated_L2_8_V_re_1_reg_299_pp0_iter4_reg;
reg   [17:0] activated_L2_7_V_re_1_reg_305;
reg   [17:0] activated_L2_7_V_re_1_reg_305_pp0_iter1_reg;
reg   [17:0] activated_L2_7_V_re_1_reg_305_pp0_iter2_reg;
reg   [17:0] activated_L2_7_V_re_1_reg_305_pp0_iter3_reg;
reg   [17:0] activated_L2_6_V_re_1_reg_311;
reg   [17:0] activated_L2_6_V_re_1_reg_311_pp0_iter1_reg;
reg   [17:0] activated_L2_6_V_re_1_reg_311_pp0_iter2_reg;
reg   [17:0] activated_L2_5_V_re_1_reg_317;
reg   [17:0] activated_L2_5_V_re_1_reg_317_pp0_iter1_reg;
reg   [17:0] activated_L2_5_V_re_1_reg_317_pp0_iter2_reg;
reg   [17:0] activated_L2_4_V_re_1_reg_323;
reg   [17:0] activated_L2_4_V_re_1_reg_323_pp0_iter1_reg;
reg   [17:0] activated_L2_3_V_re_1_reg_329;
reg   [17:0] activated_L2_2_V_re_1_reg_335;
wire   [0:0] tmp_55_1_fu_110_p2;
reg   [0:0] tmp_55_1_reg_340;
reg   [0:0] tmp_55_1_reg_340_pp0_iter1_reg;
reg   [0:0] tmp_55_1_reg_340_pp0_iter2_reg;
wire   [17:0] max_V_1_1_max_V_fu_116_p3;
reg   [17:0] max_V_1_1_max_V_reg_345;
wire   [0:0] tmp_55_2_fu_124_p2;
reg   [0:0] tmp_55_2_reg_350;
reg   [0:0] tmp_55_2_reg_350_pp0_iter1_reg;
reg   [0:0] tmp_55_2_reg_350_pp0_iter2_reg;
wire   [0:0] tmp_55_3_fu_135_p2;
reg   [0:0] tmp_55_3_reg_356;
reg   [0:0] tmp_55_3_reg_356_pp0_iter2_reg;
wire   [17:0] max_V_1_3_max_V_1_2_s_fu_140_p3;
reg   [17:0] max_V_1_3_max_V_1_2_s_reg_362;
wire   [0:0] tmp_55_4_fu_147_p2;
reg   [0:0] tmp_55_4_reg_368;
wire   [17:0] max_V_1_4_max_V_1_3_s_fu_151_p3;
reg   [17:0] max_V_1_4_max_V_1_3_s_reg_373;
wire   [0:0] tmp_55_5_fu_157_p2;
reg   [0:0] tmp_55_5_reg_378;
wire   [2:0] p_s_24_fu_204_p3;
reg   [2:0] p_s_24_reg_385;
wire   [0:0] tmp_55_6_fu_212_p2;
reg   [0:0] tmp_55_6_reg_390;
wire   [17:0] max_V_1_6_sel_SEBB_fu_217_p3;
reg   [17:0] max_V_1_6_sel_SEBB_reg_395;
wire   [17:0] max_V_1_7_max_V_1_6_s_fu_231_p3;
reg   [17:0] max_V_1_7_max_V_1_6_s_reg_401;
wire   [3:0] p_s_26_fu_250_p3;
reg   [3:0] p_s_26_reg_407;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire   [17:0] max_V_1_2_max_V_1_1_s_fu_130_p3;
wire   [0:0] tmp_fu_176_p2;
wire   [2:0] p_s_fu_169_p3;
wire   [2:0] p_cast_cast_cast_fu_162_p3;
wire   [0:0] tmp_s_fu_200_p2;
wire   [2:0] p_s_23_fu_193_p3;
wire   [2:0] p_s_22_fu_180_p3;
wire   [17:0] sel_SEBB_fu_188_p3;
wire   [0:0] tmp_55_7_fu_227_p2;
wire   [0:0] tmp_12_fu_245_p2;
wire   [3:0] p_s_25_fu_237_p3;
wire   [3:0] p_cast_fu_224_p1;
wire   [0:0] tmp_55_8_fu_258_p2;
wire   [17:0] max_V_1_8_max_V_1_7_s_fu_262_p3;
wire   [0:0] tmp_55_9_fu_268_p2;
wire   [0:0] tmp_13_fu_281_p2;
wire   [3:0] p_s_27_fu_273_p3;
wire   [3:0] p_s_28_fu_287_p3;
reg   [3:0] ap_return_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to4;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_return_preg = 4'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 4'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
            ap_return_preg <= p_s_28_fu_287_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        activated_L2_2_V_re_1_reg_335 <= activated_L2_2_V_re;
        activated_L2_3_V_re_1_reg_329 <= activated_L2_3_V_re;
        activated_L2_4_V_re_1_reg_323 <= activated_L2_4_V_re;
        activated_L2_4_V_re_1_reg_323_pp0_iter1_reg <= activated_L2_4_V_re_1_reg_323;
        activated_L2_5_V_re_1_reg_317 <= activated_L2_5_V_re;
        activated_L2_5_V_re_1_reg_317_pp0_iter1_reg <= activated_L2_5_V_re_1_reg_317;
        activated_L2_6_V_re_1_reg_311 <= activated_L2_6_V_re;
        activated_L2_6_V_re_1_reg_311_pp0_iter1_reg <= activated_L2_6_V_re_1_reg_311;
        activated_L2_7_V_re_1_reg_305 <= activated_L2_7_V_re;
        activated_L2_7_V_re_1_reg_305_pp0_iter1_reg <= activated_L2_7_V_re_1_reg_305;
        activated_L2_8_V_re_1_reg_299 <= activated_L2_8_V_re;
        activated_L2_8_V_re_1_reg_299_pp0_iter1_reg <= activated_L2_8_V_re_1_reg_299;
        activated_L2_9_V_re_1_reg_294 <= activated_L2_9_V_re;
        activated_L2_9_V_re_1_reg_294_pp0_iter1_reg <= activated_L2_9_V_re_1_reg_294;
        max_V_1_1_max_V_reg_345 <= max_V_1_1_max_V_fu_116_p3;
        max_V_1_3_max_V_1_2_s_reg_362 <= max_V_1_3_max_V_1_2_s_fu_140_p3;
        tmp_55_1_reg_340 <= tmp_55_1_fu_110_p2;
        tmp_55_1_reg_340_pp0_iter1_reg <= tmp_55_1_reg_340;
        tmp_55_2_reg_350 <= tmp_55_2_fu_124_p2;
        tmp_55_2_reg_350_pp0_iter1_reg <= tmp_55_2_reg_350;
        tmp_55_3_reg_356 <= tmp_55_3_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        activated_L2_5_V_re_1_reg_317_pp0_iter2_reg <= activated_L2_5_V_re_1_reg_317_pp0_iter1_reg;
        activated_L2_6_V_re_1_reg_311_pp0_iter2_reg <= activated_L2_6_V_re_1_reg_311_pp0_iter1_reg;
        activated_L2_7_V_re_1_reg_305_pp0_iter2_reg <= activated_L2_7_V_re_1_reg_305_pp0_iter1_reg;
        activated_L2_7_V_re_1_reg_305_pp0_iter3_reg <= activated_L2_7_V_re_1_reg_305_pp0_iter2_reg;
        activated_L2_8_V_re_1_reg_299_pp0_iter2_reg <= activated_L2_8_V_re_1_reg_299_pp0_iter1_reg;
        activated_L2_8_V_re_1_reg_299_pp0_iter3_reg <= activated_L2_8_V_re_1_reg_299_pp0_iter2_reg;
        activated_L2_8_V_re_1_reg_299_pp0_iter4_reg <= activated_L2_8_V_re_1_reg_299_pp0_iter3_reg;
        activated_L2_9_V_re_1_reg_294_pp0_iter2_reg <= activated_L2_9_V_re_1_reg_294_pp0_iter1_reg;
        activated_L2_9_V_re_1_reg_294_pp0_iter3_reg <= activated_L2_9_V_re_1_reg_294_pp0_iter2_reg;
        activated_L2_9_V_re_1_reg_294_pp0_iter4_reg <= activated_L2_9_V_re_1_reg_294_pp0_iter3_reg;
        max_V_1_4_max_V_1_3_s_reg_373 <= max_V_1_4_max_V_1_3_s_fu_151_p3;
        max_V_1_6_sel_SEBB_reg_395 <= max_V_1_6_sel_SEBB_fu_217_p3;
        max_V_1_7_max_V_1_6_s_reg_401 <= max_V_1_7_max_V_1_6_s_fu_231_p3;
        p_s_24_reg_385 <= p_s_24_fu_204_p3;
        p_s_26_reg_407 <= p_s_26_fu_250_p3;
        tmp_55_1_reg_340_pp0_iter2_reg <= tmp_55_1_reg_340_pp0_iter1_reg;
        tmp_55_2_reg_350_pp0_iter2_reg <= tmp_55_2_reg_350_pp0_iter1_reg;
        tmp_55_3_reg_356_pp0_iter2_reg <= tmp_55_3_reg_356;
        tmp_55_4_reg_368 <= tmp_55_4_fu_147_p2;
        tmp_55_5_reg_378 <= tmp_55_5_fu_157_p2;
        tmp_55_6_reg_390 <= tmp_55_6_fu_212_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to4 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_return = p_s_28_fu_287_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign max_V_1_1_max_V_fu_116_p3 = ((tmp_55_1_fu_110_p2[0:0] === 1'b1) ? activated_L2_1_V_re : activated_L2_0_V_re);

assign max_V_1_2_max_V_1_1_s_fu_130_p3 = ((tmp_55_2_reg_350[0:0] === 1'b1) ? activated_L2_2_V_re_1_reg_335 : max_V_1_1_max_V_reg_345);

assign max_V_1_3_max_V_1_2_s_fu_140_p3 = ((tmp_55_3_fu_135_p2[0:0] === 1'b1) ? activated_L2_3_V_re_1_reg_329 : max_V_1_2_max_V_1_1_s_fu_130_p3);

assign max_V_1_4_max_V_1_3_s_fu_151_p3 = ((tmp_55_4_fu_147_p2[0:0] === 1'b1) ? activated_L2_4_V_re_1_reg_323_pp0_iter1_reg : max_V_1_3_max_V_1_2_s_reg_362);

assign max_V_1_6_sel_SEBB_fu_217_p3 = ((tmp_55_6_fu_212_p2[0:0] === 1'b1) ? activated_L2_6_V_re_1_reg_311_pp0_iter2_reg : sel_SEBB_fu_188_p3);

assign max_V_1_7_max_V_1_6_s_fu_231_p3 = ((tmp_55_7_fu_227_p2[0:0] === 1'b1) ? activated_L2_7_V_re_1_reg_305_pp0_iter3_reg : max_V_1_6_sel_SEBB_reg_395);

assign max_V_1_8_max_V_1_7_s_fu_262_p3 = ((tmp_55_8_fu_258_p2[0:0] === 1'b1) ? activated_L2_8_V_re_1_reg_299_pp0_iter4_reg : max_V_1_7_max_V_1_6_s_reg_401);

assign p_cast_cast_cast_fu_162_p3 = ((tmp_55_1_reg_340_pp0_iter2_reg[0:0] === 1'b1) ? 3'd2 : 3'd1);

assign p_cast_fu_224_p1 = p_s_24_reg_385;

assign p_s_22_fu_180_p3 = ((tmp_fu_176_p2[0:0] === 1'b1) ? p_s_fu_169_p3 : p_cast_cast_cast_fu_162_p3);

assign p_s_23_fu_193_p3 = ((tmp_55_5_reg_378[0:0] === 1'b1) ? 3'd6 : 3'd5);

assign p_s_24_fu_204_p3 = ((tmp_s_fu_200_p2[0:0] === 1'b1) ? p_s_23_fu_193_p3 : p_s_22_fu_180_p3);

assign p_s_25_fu_237_p3 = ((tmp_55_7_fu_227_p2[0:0] === 1'b1) ? 4'd8 : 4'd7);

assign p_s_26_fu_250_p3 = ((tmp_12_fu_245_p2[0:0] === 1'b1) ? p_s_25_fu_237_p3 : p_cast_fu_224_p1);

assign p_s_27_fu_273_p3 = ((tmp_55_9_fu_268_p2[0:0] === 1'b1) ? 4'd10 : 4'd9);

assign p_s_28_fu_287_p3 = ((tmp_13_fu_281_p2[0:0] === 1'b1) ? p_s_27_fu_273_p3 : p_s_26_reg_407);

assign p_s_fu_169_p3 = ((tmp_55_3_reg_356_pp0_iter2_reg[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign sel_SEBB_fu_188_p3 = ((tmp_55_5_reg_378[0:0] === 1'b1) ? activated_L2_5_V_re_1_reg_317_pp0_iter2_reg : max_V_1_4_max_V_1_3_s_reg_373);

assign tmp_12_fu_245_p2 = (tmp_55_7_fu_227_p2 | tmp_55_6_reg_390);

assign tmp_13_fu_281_p2 = (tmp_55_9_fu_268_p2 | tmp_55_8_fu_258_p2);

assign tmp_55_1_fu_110_p2 = (($signed(activated_L2_1_V_re) > $signed(activated_L2_0_V_re)) ? 1'b1 : 1'b0);

assign tmp_55_2_fu_124_p2 = (($signed(max_V_1_1_max_V_fu_116_p3) < $signed(activated_L2_2_V_re)) ? 1'b1 : 1'b0);

assign tmp_55_3_fu_135_p2 = (($signed(max_V_1_2_max_V_1_1_s_fu_130_p3) < $signed(activated_L2_3_V_re_1_reg_329)) ? 1'b1 : 1'b0);

assign tmp_55_4_fu_147_p2 = (($signed(max_V_1_3_max_V_1_2_s_reg_362) < $signed(activated_L2_4_V_re_1_reg_323_pp0_iter1_reg)) ? 1'b1 : 1'b0);

assign tmp_55_5_fu_157_p2 = (($signed(max_V_1_4_max_V_1_3_s_fu_151_p3) < $signed(activated_L2_5_V_re_1_reg_317_pp0_iter1_reg)) ? 1'b1 : 1'b0);

assign tmp_55_6_fu_212_p2 = (($signed(sel_SEBB_fu_188_p3) < $signed(activated_L2_6_V_re_1_reg_311_pp0_iter2_reg)) ? 1'b1 : 1'b0);

assign tmp_55_7_fu_227_p2 = (($signed(max_V_1_6_sel_SEBB_reg_395) < $signed(activated_L2_7_V_re_1_reg_305_pp0_iter3_reg)) ? 1'b1 : 1'b0);

assign tmp_55_8_fu_258_p2 = (($signed(max_V_1_7_max_V_1_6_s_reg_401) < $signed(activated_L2_8_V_re_1_reg_299_pp0_iter4_reg)) ? 1'b1 : 1'b0);

assign tmp_55_9_fu_268_p2 = (($signed(max_V_1_8_max_V_1_7_s_fu_262_p3) < $signed(activated_L2_9_V_re_1_reg_294_pp0_iter4_reg)) ? 1'b1 : 1'b0);

assign tmp_fu_176_p2 = (tmp_55_3_reg_356_pp0_iter2_reg | tmp_55_2_reg_350_pp0_iter2_reg);

assign tmp_s_fu_200_p2 = (tmp_55_5_reg_378 | tmp_55_4_reg_368);

endmodule //classify
