// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sigmoid_activation_L (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        input_V_address1,
        input_V_ce1,
        input_V_q1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] input_V_address0;
output   input_V_ce0;
input  [17:0] input_V_q0;
output  [3:0] input_V_address1;
output   input_V_ce1;
input  [17:0] input_V_q1;
output  [17:0] ap_return_0;
output  [17:0] ap_return_1;
output  [17:0] ap_return_2;
output  [17:0] ap_return_3;
output  [17:0] ap_return_4;
output  [17:0] ap_return_5;
output  [17:0] ap_return_6;
output  [17:0] ap_return_7;
output  [17:0] ap_return_8;
output  [17:0] ap_return_9;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] input_V_address0;
reg input_V_ce0;
reg[3:0] input_V_address1;
reg input_V_ce1;
reg[17:0] ap_return_0;
reg[17:0] ap_return_1;
reg[17:0] ap_return_2;
reg[17:0] ap_return_3;
reg[17:0] ap_return_4;
reg[17:0] ap_return_5;
reg[17:0] ap_return_6;
reg[17:0] ap_return_7;
reg[17:0] ap_return_8;
reg[17:0] ap_return_9;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
wire  signed [17:0] grp_fu_181_p3;
reg  signed [17:0] reg_231;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire  signed [17:0] grp_fu_213_p3;
reg  signed [17:0] reg_235;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] grp_fu_167_p3;
reg   [0:0] tmp_56_reg_1053;
reg   [14:0] tmp_reg_1058;
wire   [0:0] grp_fu_199_p3;
reg   [0:0] tmp_57_reg_1063;
reg   [14:0] tmp_30_reg_1068;
wire   [0:0] grp_fu_239_p2;
reg   [0:0] tmp_7_reg_1083;
wire  signed [35:0] OP1_V_fu_251_p1;
wire   [0:0] grp_fu_245_p2;
reg   [0:0] tmp_7_1_reg_1094;
wire  signed [35:0] OP1_V_1_fu_255_p1;
reg   [0:0] tmp_58_reg_1105;
reg   [14:0] tmp_31_reg_1110;
reg   [0:0] tmp_59_reg_1115;
reg   [14:0] tmp_32_reg_1120;
reg   [0:0] tmp_7_2_reg_1135;
wire  signed [35:0] OP1_V_2_fu_259_p1;
reg   [0:0] tmp_7_3_reg_1146;
wire  signed [35:0] OP1_V_3_fu_263_p1;
reg   [0:0] tmp_60_reg_1157;
reg   [14:0] tmp_33_reg_1162;
reg   [0:0] tmp_61_reg_1167;
reg   [14:0] tmp_34_reg_1172;
wire  signed [35:0] grp_fu_983_p2;
reg  signed [35:0] tmp_4_reg_1187;
wire  signed [35:0] grp_fu_989_p2;
reg  signed [35:0] tmp_11_1_reg_1192;
reg   [0:0] tmp_7_4_reg_1197;
wire  signed [35:0] OP1_V_4_fu_267_p1;
reg   [0:0] tmp_7_5_reg_1208;
wire  signed [35:0] OP1_V_5_fu_271_p1;
reg   [0:0] tmp_62_reg_1219;
reg   [14:0] tmp_35_reg_1224;
reg   [0:0] tmp_63_reg_1229;
reg   [14:0] tmp_36_reg_1234;
wire   [17:0] p_Val2_6_fu_321_p3;
reg   [17:0] p_Val2_6_reg_1249;
wire   [17:0] p_Val2_6_1_fu_374_p3;
reg   [17:0] p_Val2_6_1_reg_1255;
wire  signed [35:0] grp_fu_995_p2;
reg  signed [35:0] tmp_11_2_reg_1261;
wire  signed [35:0] grp_fu_1001_p2;
reg  signed [35:0] tmp_11_3_reg_1266;
reg   [0:0] tmp_7_6_reg_1271;
wire  signed [35:0] OP1_V_6_fu_381_p1;
reg   [0:0] tmp_7_7_reg_1282;
wire  signed [35:0] OP1_V_7_fu_385_p1;
reg   [0:0] tmp_64_reg_1293;
reg   [14:0] tmp_37_reg_1298;
reg   [0:0] tmp_65_reg_1303;
reg   [14:0] tmp_38_reg_1308;
wire   [17:0] result_0_V_write_as_fu_394_p3;
reg   [17:0] result_0_V_write_as_reg_1313;
wire   [17:0] result_1_V_write_as_fu_405_p3;
reg   [17:0] result_1_V_write_as_reg_1318;
wire   [17:0] p_Val2_6_2_fu_457_p3;
reg   [17:0] p_Val2_6_2_reg_1323;
wire   [17:0] p_Val2_6_3_fu_510_p3;
reg   [17:0] p_Val2_6_3_reg_1329;
wire  signed [35:0] grp_fu_1007_p2;
reg  signed [35:0] tmp_11_4_reg_1335;
wire  signed [35:0] grp_fu_1013_p2;
reg  signed [35:0] tmp_11_5_reg_1340;
reg   [0:0] tmp_7_8_reg_1345;
wire  signed [35:0] OP1_V_8_fu_517_p1;
reg   [0:0] tmp_7_9_reg_1356;
wire  signed [35:0] OP1_V_9_fu_521_p1;
wire   [17:0] result_2_V_write_as_fu_530_p3;
reg   [17:0] result_2_V_write_as_reg_1367;
wire   [17:0] result_3_V_write_as_fu_541_p3;
reg   [17:0] result_3_V_write_as_reg_1372;
wire   [17:0] p_Val2_6_4_fu_593_p3;
reg   [17:0] p_Val2_6_4_reg_1377;
wire   [17:0] p_Val2_6_5_fu_646_p3;
reg   [17:0] p_Val2_6_5_reg_1383;
wire  signed [35:0] grp_fu_1019_p2;
reg  signed [35:0] tmp_11_6_reg_1389;
wire  signed [35:0] grp_fu_1025_p2;
reg  signed [35:0] tmp_11_7_reg_1394;
wire   [17:0] result_4_V_write_as_fu_658_p3;
reg   [17:0] result_4_V_write_as_reg_1399;
wire   [17:0] result_5_V_write_as_fu_669_p3;
reg   [17:0] result_5_V_write_as_reg_1404;
wire   [17:0] p_Val2_6_6_fu_721_p3;
reg   [17:0] p_Val2_6_6_reg_1409;
wire   [17:0] p_Val2_6_7_fu_774_p3;
reg   [17:0] p_Val2_6_7_reg_1415;
wire  signed [35:0] grp_fu_1031_p2;
reg  signed [35:0] tmp_11_8_reg_1421;
wire  signed [35:0] grp_fu_1037_p2;
reg  signed [35:0] tmp_11_9_reg_1426;
wire   [17:0] result_6_V_write_as_fu_786_p3;
reg   [17:0] result_6_V_write_as_reg_1431;
wire   [17:0] result_7_V_write_as_fu_797_p3;
reg   [17:0] result_7_V_write_as_reg_1436;
wire   [17:0] p_Val2_6_8_fu_849_p3;
reg   [17:0] p_Val2_6_8_reg_1441;
wire   [17:0] p_Val2_6_9_fu_902_p3;
reg   [17:0] p_Val2_6_9_reg_1447;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire   [17:0] grp_fu_175_p2;
wire   [17:0] grp_fu_207_p2;
wire   [17:0] tmp_s_fu_275_p3;
wire   [17:0] p_Val2_2_fu_282_p2;
wire   [27:0] tmp_8_fu_288_p3;
wire   [27:0] tmp_148_cast_fu_296_p4;
wire   [27:0] p_Val2_5_fu_305_p2;
wire   [17:0] tmp_9_fu_311_p4;
wire   [17:0] tmp_10_1_fu_328_p3;
wire   [17:0] p_Val2_3_s_fu_335_p2;
wire   [27:0] tmp_13_1_fu_341_p3;
wire   [27:0] tmp_148_1_cast_fu_349_p4;
wire   [27:0] p_Val2_5_1_fu_358_p2;
wire   [17:0] tmp_16_1_fu_364_p4;
wire   [17:0] p_Val2_7_fu_389_p2;
wire   [17:0] p_Val2_7_1_fu_400_p2;
wire   [17:0] tmp_10_2_fu_411_p3;
wire   [17:0] p_Val2_3_2_fu_418_p2;
wire   [27:0] tmp_13_2_fu_424_p3;
wire   [27:0] tmp_148_2_cast_fu_432_p4;
wire   [27:0] p_Val2_5_2_fu_441_p2;
wire   [17:0] tmp_16_2_fu_447_p4;
wire   [17:0] tmp_10_3_fu_464_p3;
wire   [17:0] p_Val2_3_4_fu_471_p2;
wire   [27:0] tmp_13_3_fu_477_p3;
wire   [27:0] tmp_148_3_cast_fu_485_p4;
wire   [27:0] p_Val2_5_3_fu_494_p2;
wire   [17:0] tmp_16_3_fu_500_p4;
wire   [17:0] p_Val2_7_2_fu_525_p2;
wire   [17:0] p_Val2_7_3_fu_536_p2;
wire   [17:0] tmp_10_4_fu_547_p3;
wire   [17:0] p_Val2_3_6_fu_554_p2;
wire   [27:0] tmp_13_4_fu_560_p3;
wire   [27:0] tmp_148_4_cast_fu_568_p4;
wire   [27:0] p_Val2_5_4_fu_577_p2;
wire   [17:0] tmp_16_4_fu_583_p4;
wire   [17:0] tmp_10_5_fu_600_p3;
wire   [17:0] p_Val2_3_8_fu_607_p2;
wire   [27:0] tmp_13_5_fu_613_p3;
wire   [27:0] tmp_148_5_cast_fu_621_p4;
wire   [27:0] p_Val2_5_5_fu_630_p2;
wire   [17:0] tmp_16_5_fu_636_p4;
wire   [17:0] p_Val2_7_4_fu_653_p2;
wire   [17:0] p_Val2_7_5_fu_664_p2;
wire   [17:0] tmp_10_6_fu_675_p3;
wire   [17:0] p_Val2_3_1_fu_682_p2;
wire   [27:0] tmp_13_6_fu_688_p3;
wire   [27:0] tmp_148_6_cast_fu_696_p4;
wire   [27:0] p_Val2_5_6_fu_705_p2;
wire   [17:0] tmp_16_6_fu_711_p4;
wire   [17:0] tmp_10_7_fu_728_p3;
wire   [17:0] p_Val2_3_3_fu_735_p2;
wire   [27:0] tmp_13_7_fu_741_p3;
wire   [27:0] tmp_148_7_cast_fu_749_p4;
wire   [27:0] p_Val2_5_7_fu_758_p2;
wire   [17:0] tmp_16_7_fu_764_p4;
wire   [17:0] p_Val2_7_6_fu_781_p2;
wire   [17:0] p_Val2_7_7_fu_792_p2;
wire   [17:0] tmp_10_8_fu_803_p3;
wire   [17:0] p_Val2_3_5_fu_810_p2;
wire   [27:0] tmp_13_8_fu_816_p3;
wire   [27:0] tmp_148_8_cast_fu_824_p4;
wire   [27:0] p_Val2_5_8_fu_833_p2;
wire   [17:0] tmp_16_8_fu_839_p4;
wire   [17:0] tmp_10_9_fu_856_p3;
wire   [17:0] p_Val2_3_7_fu_863_p2;
wire   [27:0] tmp_13_9_fu_869_p3;
wire   [27:0] tmp_148_9_cast_fu_877_p4;
wire   [27:0] p_Val2_5_9_fu_886_p2;
wire   [17:0] tmp_16_9_fu_892_p4;
wire   [17:0] p_Val2_7_8_fu_909_p2;
wire   [17:0] p_Val2_7_9_fu_920_p2;
wire   [17:0] result_8_V_write_as_fu_914_p3;
wire   [17:0] result_9_V_write_as_fu_925_p3;
wire  signed [17:0] grp_fu_983_p0;
wire  signed [17:0] grp_fu_983_p1;
wire  signed [17:0] grp_fu_989_p0;
wire  signed [17:0] grp_fu_989_p1;
wire  signed [17:0] grp_fu_995_p0;
wire  signed [17:0] grp_fu_995_p1;
wire  signed [17:0] grp_fu_1001_p0;
wire  signed [17:0] grp_fu_1001_p1;
wire  signed [17:0] grp_fu_1007_p0;
wire  signed [17:0] grp_fu_1007_p1;
wire  signed [17:0] grp_fu_1013_p0;
wire  signed [17:0] grp_fu_1013_p1;
wire  signed [17:0] grp_fu_1019_p0;
wire  signed [17:0] grp_fu_1019_p1;
wire  signed [17:0] grp_fu_1025_p0;
wire  signed [17:0] grp_fu_1025_p1;
wire  signed [17:0] grp_fu_1031_p0;
wire  signed [17:0] grp_fu_1031_p1;
wire  signed [17:0] grp_fu_1037_p0;
wire  signed [17:0] grp_fu_1037_p1;
reg    grp_fu_983_ce;
reg    grp_fu_989_ce;
reg    grp_fu_995_ce;
reg    grp_fu_1001_ce;
reg    grp_fu_1007_ce;
reg    grp_fu_1013_ce;
reg    grp_fu_1019_ce;
reg    grp_fu_1025_ce;
reg    grp_fu_1031_ce;
reg    grp_fu_1037_ce;
reg   [17:0] ap_return_0_preg;
reg   [17:0] ap_return_1_preg;
reg   [17:0] ap_return_2_preg;
reg   [17:0] ap_return_3_preg;
reg   [17:0] ap_return_4_preg;
reg   [17:0] ap_return_5_preg;
reg   [17:0] ap_return_6_preg;
reg   [17:0] ap_return_7_preg;
reg   [17:0] ap_return_8_preg;
reg   [17:0] ap_return_9_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_return_0_preg = 18'd0;
#0 ap_return_1_preg = 18'd0;
#0 ap_return_2_preg = 18'd0;
#0 ap_return_3_preg = 18'd0;
#0 ap_return_4_preg = 18'd0;
#0 ap_return_5_preg = 18'd0;
#0 ap_return_6_preg = 18'd0;
#0 ap_return_7_preg = 18'd0;
#0 ap_return_8_preg = 18'd0;
#0 ap_return_9_preg = 18'd0;
end

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U549(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_983_p0),
    .din1(grp_fu_983_p1),
    .ce(grp_fu_983_ce),
    .dout(grp_fu_983_p2)
);

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U550(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_989_p0),
    .din1(grp_fu_989_p1),
    .ce(grp_fu_989_ce),
    .dout(grp_fu_989_p2)
);

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U551(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_995_p0),
    .din1(grp_fu_995_p1),
    .ce(grp_fu_995_ce),
    .dout(grp_fu_995_p2)
);

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U552(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1001_p0),
    .din1(grp_fu_1001_p1),
    .ce(grp_fu_1001_ce),
    .dout(grp_fu_1001_p2)
);

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U553(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1007_p0),
    .din1(grp_fu_1007_p1),
    .ce(grp_fu_1007_ce),
    .dout(grp_fu_1007_p2)
);

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U554(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1013_p0),
    .din1(grp_fu_1013_p1),
    .ce(grp_fu_1013_ce),
    .dout(grp_fu_1013_p2)
);

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U555(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1019_p0),
    .din1(grp_fu_1019_p1),
    .ce(grp_fu_1019_ce),
    .dout(grp_fu_1019_p2)
);

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U556(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1025_p0),
    .din1(grp_fu_1025_p1),
    .ce(grp_fu_1025_ce),
    .dout(grp_fu_1025_p2)
);

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U557(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1031_p0),
    .din1(grp_fu_1031_p1),
    .ce(grp_fu_1031_ce),
    .dout(grp_fu_1031_p2)
);

mlp_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mlp_mul_mul_18s_1cud_U558(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1037_p0),
    .din1(grp_fu_1037_p1),
    .ce(grp_fu_1037_ce),
    .dout(grp_fu_1037_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 18'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            ap_return_0_preg <= result_0_V_write_as_reg_1313;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 18'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            ap_return_1_preg <= result_1_V_write_as_reg_1318;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 18'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            ap_return_2_preg <= result_2_V_write_as_reg_1367;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 18'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            ap_return_3_preg <= result_3_V_write_as_reg_1372;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 18'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            ap_return_4_preg <= result_4_V_write_as_reg_1399;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 18'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            ap_return_5_preg <= result_5_V_write_as_reg_1404;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 18'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            ap_return_6_preg <= result_6_V_write_as_reg_1431;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 18'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            ap_return_7_preg <= result_7_V_write_as_reg_1436;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 18'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            ap_return_8_preg <= result_8_V_write_as_fu_914_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 18'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            ap_return_9_preg <= result_9_V_write_as_fu_925_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        p_Val2_6_1_reg_1255 <= p_Val2_6_1_fu_374_p3;
        p_Val2_6_reg_1249 <= p_Val2_6_fu_321_p3;
        tmp_11_2_reg_1261 <= grp_fu_995_p2;
        tmp_11_3_reg_1266 <= grp_fu_1001_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_6_2_reg_1323 <= p_Val2_6_2_fu_457_p3;
        p_Val2_6_3_reg_1329 <= p_Val2_6_3_fu_510_p3;
        result_0_V_write_as_reg_1313 <= result_0_V_write_as_fu_394_p3;
        result_1_V_write_as_reg_1318 <= result_1_V_write_as_fu_405_p3;
        tmp_11_4_reg_1335 <= grp_fu_1007_p2;
        tmp_11_5_reg_1340 <= grp_fu_1013_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Val2_6_4_reg_1377 <= p_Val2_6_4_fu_593_p3;
        p_Val2_6_5_reg_1383 <= p_Val2_6_5_fu_646_p3;
        result_2_V_write_as_reg_1367 <= result_2_V_write_as_fu_530_p3;
        result_3_V_write_as_reg_1372 <= result_3_V_write_as_fu_541_p3;
        tmp_11_6_reg_1389 <= grp_fu_1019_p2;
        tmp_11_7_reg_1394 <= grp_fu_1025_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_Val2_6_6_reg_1409 <= p_Val2_6_6_fu_721_p3;
        p_Val2_6_7_reg_1415 <= p_Val2_6_7_fu_774_p3;
        result_4_V_write_as_reg_1399 <= result_4_V_write_as_fu_658_p3;
        result_5_V_write_as_reg_1404 <= result_5_V_write_as_fu_669_p3;
        tmp_11_8_reg_1421 <= grp_fu_1031_p2;
        tmp_11_9_reg_1426 <= grp_fu_1037_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        p_Val2_6_8_reg_1441 <= p_Val2_6_8_fu_849_p3;
        p_Val2_6_9_reg_1447 <= p_Val2_6_9_fu_902_p3;
        result_6_V_write_as_reg_1431 <= result_6_V_write_as_fu_786_p3;
        result_7_V_write_as_reg_1436 <= result_7_V_write_as_fu_797_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_231 <= grp_fu_181_p3;
        reg_235 <= grp_fu_213_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_11_1_reg_1192 <= grp_fu_989_p2;
        tmp_4_reg_1187 <= grp_fu_983_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_30_reg_1068 <= {{grp_fu_213_p3[16:2]}};
        tmp_56_reg_1053 <= input_V_q0[32'd17];
        tmp_57_reg_1063 <= input_V_q1[32'd17];
        tmp_reg_1058 <= {{grp_fu_181_p3[16:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_31_reg_1110 <= {{grp_fu_181_p3[16:2]}};
        tmp_32_reg_1120 <= {{grp_fu_213_p3[16:2]}};
        tmp_58_reg_1105 <= input_V_q0[32'd17];
        tmp_59_reg_1115 <= input_V_q1[32'd17];
        tmp_7_1_reg_1094 <= grp_fu_245_p2;
        tmp_7_reg_1083 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_33_reg_1162 <= {{grp_fu_181_p3[16:2]}};
        tmp_34_reg_1172 <= {{grp_fu_213_p3[16:2]}};
        tmp_60_reg_1157 <= input_V_q0[32'd17];
        tmp_61_reg_1167 <= input_V_q1[32'd17];
        tmp_7_2_reg_1135 <= grp_fu_239_p2;
        tmp_7_3_reg_1146 <= grp_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_35_reg_1224 <= {{grp_fu_181_p3[16:2]}};
        tmp_36_reg_1234 <= {{grp_fu_213_p3[16:2]}};
        tmp_62_reg_1219 <= input_V_q0[32'd17];
        tmp_63_reg_1229 <= input_V_q1[32'd17];
        tmp_7_4_reg_1197 <= grp_fu_239_p2;
        tmp_7_5_reg_1208 <= grp_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_37_reg_1298 <= {{grp_fu_181_p3[16:2]}};
        tmp_38_reg_1308 <= {{grp_fu_213_p3[16:2]}};
        tmp_64_reg_1293 <= input_V_q0[32'd17];
        tmp_65_reg_1303 <= input_V_q1[32'd17];
        tmp_7_6_reg_1271 <= grp_fu_239_p2;
        tmp_7_7_reg_1282 <= grp_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_7_8_reg_1345 <= grp_fu_239_p2;
        tmp_7_9_reg_1356 <= grp_fu_245_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_return_0 = result_0_V_write_as_reg_1313;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_return_1 = result_1_V_write_as_reg_1318;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_return_2 = result_2_V_write_as_reg_1367;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_return_3 = result_3_V_write_as_reg_1372;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_return_4 = result_4_V_write_as_reg_1399;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_return_5 = result_5_V_write_as_reg_1404;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_return_6 = result_6_V_write_as_reg_1431;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_return_7 = result_7_V_write_as_reg_1436;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_return_8 = result_8_V_write_as_fu_914_p3;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_return_9 = result_9_V_write_as_fu_925_p3;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        grp_fu_1001_ce = 1'b1;
    end else begin
        grp_fu_1001_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        grp_fu_1007_ce = 1'b1;
    end else begin
        grp_fu_1007_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        grp_fu_1013_ce = 1'b1;
    end else begin
        grp_fu_1013_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_1019_ce = 1'b1;
    end else begin
        grp_fu_1019_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_1025_ce = 1'b1;
    end else begin
        grp_fu_1025_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_1031_ce = 1'b1;
    end else begin
        grp_fu_1031_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_1037_ce = 1'b1;
    end else begin
        grp_fu_1037_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        grp_fu_983_ce = 1'b1;
    end else begin
        grp_fu_983_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        grp_fu_989_ce = 1'b1;
    end else begin
        grp_fu_989_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        grp_fu_995_ce = 1'b1;
    end else begin
        grp_fu_995_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_V_address0 = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_V_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_V_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_V_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_V_address0 = 64'd0;
        end else begin
            input_V_address0 = 'bx;
        end
    end else begin
        input_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_V_address1 = 64'd9;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_V_address1 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_V_address1 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_V_address1 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_V_address1 = 64'd1;
        end else begin
            input_V_address1 = 'bx;
        end
    end else begin
        input_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_V_ce1 = 1'b1;
    end else begin
        input_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_fu_255_p1 = reg_235;

assign OP1_V_2_fu_259_p1 = reg_231;

assign OP1_V_3_fu_263_p1 = reg_235;

assign OP1_V_4_fu_267_p1 = reg_231;

assign OP1_V_5_fu_271_p1 = reg_235;

assign OP1_V_6_fu_381_p1 = reg_231;

assign OP1_V_7_fu_385_p1 = reg_235;

assign OP1_V_8_fu_517_p1 = reg_231;

assign OP1_V_9_fu_521_p1 = reg_235;

assign OP1_V_fu_251_p1 = reg_231;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (ap_done_reg == 1'b1);
end

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_1001_p0 = OP1_V_3_fu_263_p1;

assign grp_fu_1001_p1 = OP1_V_3_fu_263_p1;

assign grp_fu_1007_p0 = OP1_V_4_fu_267_p1;

assign grp_fu_1007_p1 = OP1_V_4_fu_267_p1;

assign grp_fu_1013_p0 = OP1_V_5_fu_271_p1;

assign grp_fu_1013_p1 = OP1_V_5_fu_271_p1;

assign grp_fu_1019_p0 = OP1_V_6_fu_381_p1;

assign grp_fu_1019_p1 = OP1_V_6_fu_381_p1;

assign grp_fu_1025_p0 = OP1_V_7_fu_385_p1;

assign grp_fu_1025_p1 = OP1_V_7_fu_385_p1;

assign grp_fu_1031_p0 = OP1_V_8_fu_517_p1;

assign grp_fu_1031_p1 = OP1_V_8_fu_517_p1;

assign grp_fu_1037_p0 = OP1_V_9_fu_521_p1;

assign grp_fu_1037_p1 = OP1_V_9_fu_521_p1;

assign grp_fu_167_p3 = input_V_q0[32'd17];

assign grp_fu_175_p2 = (18'd0 - input_V_q0);

assign grp_fu_181_p3 = ((grp_fu_167_p3[0:0] === 1'b1) ? grp_fu_175_p2 : input_V_q0);

assign grp_fu_199_p3 = input_V_q1[32'd17];

assign grp_fu_207_p2 = (18'd0 - input_V_q1);

assign grp_fu_213_p3 = ((grp_fu_199_p3[0:0] === 1'b1) ? grp_fu_207_p2 : input_V_q1);

assign grp_fu_239_p2 = (($signed(reg_231) > $signed(18'd32768)) ? 1'b1 : 1'b0);

assign grp_fu_245_p2 = (($signed(reg_235) > $signed(18'd32768)) ? 1'b1 : 1'b0);

assign grp_fu_983_p0 = OP1_V_fu_251_p1;

assign grp_fu_983_p1 = OP1_V_fu_251_p1;

assign grp_fu_989_p0 = OP1_V_1_fu_255_p1;

assign grp_fu_989_p1 = OP1_V_1_fu_255_p1;

assign grp_fu_995_p0 = OP1_V_2_fu_259_p1;

assign grp_fu_995_p1 = OP1_V_2_fu_259_p1;

assign p_Val2_2_fu_282_p2 = (tmp_s_fu_275_p3 + 18'd32768);

assign p_Val2_3_1_fu_682_p2 = (tmp_10_6_fu_675_p3 + 18'd32768);

assign p_Val2_3_2_fu_418_p2 = (tmp_10_2_fu_411_p3 + 18'd32768);

assign p_Val2_3_3_fu_735_p2 = (tmp_10_7_fu_728_p3 + 18'd32768);

assign p_Val2_3_4_fu_471_p2 = (tmp_10_3_fu_464_p3 + 18'd32768);

assign p_Val2_3_5_fu_810_p2 = (tmp_10_8_fu_803_p3 + 18'd32768);

assign p_Val2_3_6_fu_554_p2 = (tmp_10_4_fu_547_p3 + 18'd32768);

assign p_Val2_3_7_fu_863_p2 = (tmp_10_9_fu_856_p3 + 18'd32768);

assign p_Val2_3_8_fu_607_p2 = (tmp_10_5_fu_600_p3 + 18'd32768);

assign p_Val2_3_s_fu_335_p2 = (tmp_10_1_fu_328_p3 + 18'd32768);

assign p_Val2_5_1_fu_358_p2 = (tmp_13_1_fu_341_p3 - tmp_148_1_cast_fu_349_p4);

assign p_Val2_5_2_fu_441_p2 = (tmp_13_2_fu_424_p3 - tmp_148_2_cast_fu_432_p4);

assign p_Val2_5_3_fu_494_p2 = (tmp_13_3_fu_477_p3 - tmp_148_3_cast_fu_485_p4);

assign p_Val2_5_4_fu_577_p2 = (tmp_13_4_fu_560_p3 - tmp_148_4_cast_fu_568_p4);

assign p_Val2_5_5_fu_630_p2 = (tmp_13_5_fu_613_p3 - tmp_148_5_cast_fu_621_p4);

assign p_Val2_5_6_fu_705_p2 = (tmp_13_6_fu_688_p3 - tmp_148_6_cast_fu_696_p4);

assign p_Val2_5_7_fu_758_p2 = (tmp_13_7_fu_741_p3 - tmp_148_7_cast_fu_749_p4);

assign p_Val2_5_8_fu_833_p2 = (tmp_13_8_fu_816_p3 - tmp_148_8_cast_fu_824_p4);

assign p_Val2_5_9_fu_886_p2 = (tmp_13_9_fu_869_p3 - tmp_148_9_cast_fu_877_p4);

assign p_Val2_5_fu_305_p2 = (tmp_8_fu_288_p3 - tmp_148_cast_fu_296_p4);

assign p_Val2_6_1_fu_374_p3 = ((tmp_7_1_reg_1094[0:0] === 1'b1) ? 18'd65536 : tmp_16_1_fu_364_p4);

assign p_Val2_6_2_fu_457_p3 = ((tmp_7_2_reg_1135[0:0] === 1'b1) ? 18'd65536 : tmp_16_2_fu_447_p4);

assign p_Val2_6_3_fu_510_p3 = ((tmp_7_3_reg_1146[0:0] === 1'b1) ? 18'd65536 : tmp_16_3_fu_500_p4);

assign p_Val2_6_4_fu_593_p3 = ((tmp_7_4_reg_1197[0:0] === 1'b1) ? 18'd65536 : tmp_16_4_fu_583_p4);

assign p_Val2_6_5_fu_646_p3 = ((tmp_7_5_reg_1208[0:0] === 1'b1) ? 18'd65536 : tmp_16_5_fu_636_p4);

assign p_Val2_6_6_fu_721_p3 = ((tmp_7_6_reg_1271[0:0] === 1'b1) ? 18'd65536 : tmp_16_6_fu_711_p4);

assign p_Val2_6_7_fu_774_p3 = ((tmp_7_7_reg_1282[0:0] === 1'b1) ? 18'd65536 : tmp_16_7_fu_764_p4);

assign p_Val2_6_8_fu_849_p3 = ((tmp_7_8_reg_1345[0:0] === 1'b1) ? 18'd65536 : tmp_16_8_fu_839_p4);

assign p_Val2_6_9_fu_902_p3 = ((tmp_7_9_reg_1356[0:0] === 1'b1) ? 18'd65536 : tmp_16_9_fu_892_p4);

assign p_Val2_6_fu_321_p3 = ((tmp_7_reg_1083[0:0] === 1'b1) ? 18'd65536 : tmp_9_fu_311_p4);

assign p_Val2_7_1_fu_400_p2 = (18'd65536 - p_Val2_6_1_reg_1255);

assign p_Val2_7_2_fu_525_p2 = (18'd65536 - p_Val2_6_2_reg_1323);

assign p_Val2_7_3_fu_536_p2 = (18'd65536 - p_Val2_6_3_reg_1329);

assign p_Val2_7_4_fu_653_p2 = (18'd65536 - p_Val2_6_4_reg_1377);

assign p_Val2_7_5_fu_664_p2 = (18'd65536 - p_Val2_6_5_reg_1383);

assign p_Val2_7_6_fu_781_p2 = (18'd65536 - p_Val2_6_6_reg_1409);

assign p_Val2_7_7_fu_792_p2 = (18'd65536 - p_Val2_6_7_reg_1415);

assign p_Val2_7_8_fu_909_p2 = (18'd65536 - p_Val2_6_8_reg_1441);

assign p_Val2_7_9_fu_920_p2 = (18'd65536 - p_Val2_6_9_reg_1447);

assign p_Val2_7_fu_389_p2 = (18'd65536 - p_Val2_6_reg_1249);

assign result_0_V_write_as_fu_394_p3 = ((tmp_56_reg_1053[0:0] === 1'b1) ? p_Val2_7_fu_389_p2 : p_Val2_6_reg_1249);

assign result_1_V_write_as_fu_405_p3 = ((tmp_57_reg_1063[0:0] === 1'b1) ? p_Val2_7_1_fu_400_p2 : p_Val2_6_1_reg_1255);

assign result_2_V_write_as_fu_530_p3 = ((tmp_58_reg_1105[0:0] === 1'b1) ? p_Val2_7_2_fu_525_p2 : p_Val2_6_2_reg_1323);

assign result_3_V_write_as_fu_541_p3 = ((tmp_59_reg_1115[0:0] === 1'b1) ? p_Val2_7_3_fu_536_p2 : p_Val2_6_3_reg_1329);

assign result_4_V_write_as_fu_658_p3 = ((tmp_60_reg_1157[0:0] === 1'b1) ? p_Val2_7_4_fu_653_p2 : p_Val2_6_4_reg_1377);

assign result_5_V_write_as_fu_669_p3 = ((tmp_61_reg_1167[0:0] === 1'b1) ? p_Val2_7_5_fu_664_p2 : p_Val2_6_5_reg_1383);

assign result_6_V_write_as_fu_786_p3 = ((tmp_62_reg_1219[0:0] === 1'b1) ? p_Val2_7_6_fu_781_p2 : p_Val2_6_6_reg_1409);

assign result_7_V_write_as_fu_797_p3 = ((tmp_63_reg_1229[0:0] === 1'b1) ? p_Val2_7_7_fu_792_p2 : p_Val2_6_7_reg_1415);

assign result_8_V_write_as_fu_914_p3 = ((tmp_64_reg_1293[0:0] === 1'b1) ? p_Val2_7_8_fu_909_p2 : p_Val2_6_8_reg_1441);

assign result_9_V_write_as_fu_925_p3 = ((tmp_65_reg_1303[0:0] === 1'b1) ? p_Val2_7_9_fu_920_p2 : p_Val2_6_9_reg_1447);

assign tmp_10_1_fu_328_p3 = {{tmp_30_reg_1068}, {3'd0}};

assign tmp_10_2_fu_411_p3 = {{tmp_31_reg_1110}, {3'd0}};

assign tmp_10_3_fu_464_p3 = {{tmp_32_reg_1120}, {3'd0}};

assign tmp_10_4_fu_547_p3 = {{tmp_33_reg_1162}, {3'd0}};

assign tmp_10_5_fu_600_p3 = {{tmp_34_reg_1172}, {3'd0}};

assign tmp_10_6_fu_675_p3 = {{tmp_35_reg_1224}, {3'd0}};

assign tmp_10_7_fu_728_p3 = {{tmp_36_reg_1234}, {3'd0}};

assign tmp_10_8_fu_803_p3 = {{tmp_37_reg_1298}, {3'd0}};

assign tmp_10_9_fu_856_p3 = {{tmp_38_reg_1308}, {3'd0}};

assign tmp_13_1_fu_341_p3 = {{p_Val2_3_s_fu_335_p2}, {10'd0}};

assign tmp_13_2_fu_424_p3 = {{p_Val2_3_2_fu_418_p2}, {10'd0}};

assign tmp_13_3_fu_477_p3 = {{p_Val2_3_4_fu_471_p2}, {10'd0}};

assign tmp_13_4_fu_560_p3 = {{p_Val2_3_6_fu_554_p2}, {10'd0}};

assign tmp_13_5_fu_613_p3 = {{p_Val2_3_8_fu_607_p2}, {10'd0}};

assign tmp_13_6_fu_688_p3 = {{p_Val2_3_1_fu_682_p2}, {10'd0}};

assign tmp_13_7_fu_741_p3 = {{p_Val2_3_3_fu_735_p2}, {10'd0}};

assign tmp_13_8_fu_816_p3 = {{p_Val2_3_5_fu_810_p2}, {10'd0}};

assign tmp_13_9_fu_869_p3 = {{p_Val2_3_7_fu_863_p2}, {10'd0}};

assign tmp_148_1_cast_fu_349_p4 = {{tmp_11_1_reg_1192[32:5]}};

assign tmp_148_2_cast_fu_432_p4 = {{tmp_11_2_reg_1261[32:5]}};

assign tmp_148_3_cast_fu_485_p4 = {{tmp_11_3_reg_1266[32:5]}};

assign tmp_148_4_cast_fu_568_p4 = {{tmp_11_4_reg_1335[32:5]}};

assign tmp_148_5_cast_fu_621_p4 = {{tmp_11_5_reg_1340[32:5]}};

assign tmp_148_6_cast_fu_696_p4 = {{tmp_11_6_reg_1389[32:5]}};

assign tmp_148_7_cast_fu_749_p4 = {{tmp_11_7_reg_1394[32:5]}};

assign tmp_148_8_cast_fu_824_p4 = {{tmp_11_8_reg_1421[32:5]}};

assign tmp_148_9_cast_fu_877_p4 = {{tmp_11_9_reg_1426[32:5]}};

assign tmp_148_cast_fu_296_p4 = {{tmp_4_reg_1187[32:5]}};

assign tmp_16_1_fu_364_p4 = {{p_Val2_5_1_fu_358_p2[27:10]}};

assign tmp_16_2_fu_447_p4 = {{p_Val2_5_2_fu_441_p2[27:10]}};

assign tmp_16_3_fu_500_p4 = {{p_Val2_5_3_fu_494_p2[27:10]}};

assign tmp_16_4_fu_583_p4 = {{p_Val2_5_4_fu_577_p2[27:10]}};

assign tmp_16_5_fu_636_p4 = {{p_Val2_5_5_fu_630_p2[27:10]}};

assign tmp_16_6_fu_711_p4 = {{p_Val2_5_6_fu_705_p2[27:10]}};

assign tmp_16_7_fu_764_p4 = {{p_Val2_5_7_fu_758_p2[27:10]}};

assign tmp_16_8_fu_839_p4 = {{p_Val2_5_8_fu_833_p2[27:10]}};

assign tmp_16_9_fu_892_p4 = {{p_Val2_5_9_fu_886_p2[27:10]}};

assign tmp_8_fu_288_p3 = {{p_Val2_2_fu_282_p2}, {10'd0}};

assign tmp_9_fu_311_p4 = {{p_Val2_5_fu_305_p2[27:10]}};

assign tmp_s_fu_275_p3 = {{tmp_reg_1058}, {3'd0}};

endmodule //sigmoid_activation_L
